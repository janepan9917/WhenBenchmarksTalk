{"qid": 30, "orig_input": "The campus has $m$ rooms numbered from $0$ to $m - 1$. Also the $x$-mouse lives in the campus. The $x$-mouse is not just a mouse: each second $x$-mouse moves from room $i$ to the room $i \\cdot x \\mod{m}$ (in fact, it teleports from one room to another since it doesn't visit any intermediate room). Starting position of the $x$-mouse is unknown.\n\nYou are responsible to catch the $x$-mouse in the campus, so you are guessing about minimum possible number of traps (one trap in one room) you need to place. You are sure that if the $x$-mouse enters a trapped room, it immediately gets caught.\n\nAnd the only observation you made is $\\text{GCD} (x, m) = 1$.\n\n\n-----Input-----\n\nThe only line contains two integers $m$ and $x$ ($2 \\le m \\le 10^{14}$, $1 \\le x < m$, $\\text{GCD} (x, m) = 1$) \u2014 the number of rooms and the parameter of $x$-mouse. \n\n\n-----Output-----\n\nPrint the only integer \u2014 minimum number of traps you need to install to catch the $x$-mouse.\n\n\n-----Examples-----\nInput\n4 3\n\nOutput\n3\n\nInput\n5 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example you can, for example, put traps in rooms $0$, $2$, $3$. If the $x$-mouse starts in one of this rooms it will be caught immediately. If $x$-mouse starts in the $1$-st rooms then it will move to the room $3$, where it will be caught.\n\nIn the second example you can put one trap in room $0$ and one trap in any other room since $x$-mouse will visit all rooms $1..m-1$ if it will start in any of these rooms.", "input": "The campus has $m$ rooms numbered from $0$ to $m - 1$. Also the $x$-mouse lives in the campus. The $x$-mouse is not just a mouse: each second $x$-mouse moves from room $i$ to the room $i \\cdot x \\mod{m}$ (in fact, it teleports from one room to another since it doesn't visit any intermediate room). Starting position of the $x$-mouse is unknown.\n\nYou are responsible to catch the $x$-mouse in the campus, so you are guessing about minimum possible number of traps (one trap in one room) you need to place. You are sure that if the $x$-mouse enters a trapped room, it immediately gets caught.\n\nAnd the only observation you made is $\\text{GCD} (x, m) = 1$.\n\n\n-----Input-----\n\nThe only line contains two integers $m$ and $x$ ($2 \\le m \\le 10^{14}$, $1 \\le x < m$, $\\text{GCD} (x, m) = 1$) \u2014 the number of rooms and the parameter of $x$-mouse. \n\n\n-----Output-----\n\nPrint the only integer \u2014 minimum number of traps you need to install to catch the $x$-mouse.\n\n\n-----Examples-----\nInput\n4 3\n\nOutput\n3\n\nInput\n5 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example you can, for example, put traps in rooms $0$, $2$, $3$. If the $x$-mouse starts in one of this rooms it will be caught immediately. If $x$-mouse starts in the $1$-st rooms then it will move to the room $3$, where it will be caught.\n\nIn the second example you can put one trap in room $0$ and one trap in any other room since $x$-mouse will visit all rooms $1..m-1$ if it will start in any of these rooms.", "test_cases": {"inputs": ["4 3\n", "5 2\n", "7 2\n", "2 1\n", "100000000000000 1\n", "100000000000000 99999999999999\n", "12 1\n", "12 5\n", "12 7\n", "12 11\n", "1117 1\n", "1117 2\n", "1117 3\n", "1117 4\n", "1117 5\n", "1117 6\n", "1117 7\n", "1117 8\n", "1117 9\n", "1260 1259\n", "1260 1249\n", "1260 1247\n", "1260 1243\n", "1260 1241\n", "1260 1237\n", "1260 1231\n", "1260 1229\n", "1260 1223\n", "1260 1219\n", "1260 1159\n", "1260 1157\n", "1260 1153\n", "1260 1151\n", "1260 1147\n", "1260 1139\n", "1260 1133\n", "1260 1129\n", "1260 1123\n", "1260 1121\n", "99999999999973 53\n", "99999999999973 59\n", "99999999999973 61\n", "99999999999973 67\n", "99999999999973 71\n", "99999999999971 53\n", "99999999999971 59\n", "99999999999971 61\n", "99999999999971 67\n", "99999999999971 71\n", "99999999999962 73\n", "99999999999962 79\n", "99999999999962 83\n", "99999999999962 89\n", "99999999999962 97\n", "99999999999898 73\n", "99999999999898 79\n", "99999999999898 83\n", "99999999999898 89\n", "99999999999898 97\n", "99999999999894 101\n", "99999999999894 103\n", "99999999999894 107\n", "99999999999894 109\n", "99999999999894 113\n", "99999999999726 101\n", "99999999999726 103\n", "99999999999726 107\n", "99999999999726 109\n", "99999999999726 113\n", "99999999999030 127\n", "99999999999030 131\n", "99999999999030 137\n", "99999999999030 139\n", "99999999999030 149\n", "99999999998490 127\n", "99999999998490 131\n", "99999999998490 137\n", "99999999998490 139\n", "99999999998490 149\n", "97821761637600 53\n", "97821761637600 59\n", "97821761637600 61\n", "97821761637600 67\n", "97821761637600 71\n", "97821761637600 73\n", "97821761637600 79\n", "97821761637600 83\n", "97821761637600 89\n", "97821761637600 97\n", "7420738134810 101\n", "7420738134810 103\n", "7420738134810 107\n", "7420738134810 109\n", "7420738134810 113\n", "7420738134810 127\n", "7420738134810 131\n", "7420738134810 137\n", "7420738134810 139\n", "7420738134810 149\n", "97821761637600 963761198299\n", "97821761637600 963761198297\n", "97821761637600 963761198293\n", "97821761637600 963761198291\n", "97821761637600 963761198287\n", "97821761637600 963761198273\n", "97821761637600 963761198269\n", "97821761637600 963761198263\n", "97821761637600 963761198261\n", "97821761637600 963761198251\n", "97821761637600 97821761637499\n", "97821761637600 97821761637497\n", "97821761637600 97821761637493\n", "97821761637600 97821761637491\n", "97821761637600 97821761637487\n", "7420738134810 200560490029\n", "7420738134810 200560490027\n", "7420738134810 200560490023\n", "7420738134810 200560490021\n", "7420738134810 200560490017\n", "7420738134810 200560490003\n", "7420738134810 200560489999\n", "7420738134810 200560489993\n", "7420738134810 200560489991\n", "7420738134810 200560489981\n", "7420738134810 7420738134709\n", "7420738134810 7420738134707\n", "7420738134810 7420738134703\n", "7420738134810 7420738134701\n", "7420738134810 7420738134697\n", "99999640000243 99999640000143\n", "99999640000243 99999640000142\n", "99999640000243 99999640000141\n", "99999640000243 99999640000140\n", "99999640000243 99999640000139\n", "93823365636000 53\n", "93823365636000 59\n", "93823365636000 61\n", "18632716502401 67\n", "18632716502401 71\n", "18632716502401 73\n", "93047965920000 79\n", "93047965920000 83\n", "93047965920000 89\n"], "outputs": ["3\n", "2\n", "3\n", "2\n", "100000000000000\n", "50000000000001\n", "12\n", "8\n", "9\n", "7\n", "1117\n", "2\n", "13\n", "3\n", "4\n", "2\n", "3\n", "4\n", "13\n", "631\n", "240\n", "217\n", "189\n", "300\n", "148\n", "375\n", "236\n", "163\n", "385\n", "253\n", "144\n", "180\n", "275\n", "215\n", "231\n", "380\n", "276\n", "143\n", "420\n", "37\n", "3\n", "3\n", "117\n", "2\n", "2\n", "11\n", "2\n", "3\n", "3\n", "10\n", "10\n", "8\n", "10\n", "4\n", "4\n", "4\n", "4\n", "4\n", "10\n", "28\n", "12\n", "10\n", "12\n", "10\n", "22\n", "18\n", "10\n", "12\n", "10\n", "162\n", "100\n", "100\n", "48\n", "316\n", "36\n", "110\n", "30\n", "126\n", "106\n", "6386192358\n", "5903853669\n", "1778524398\n", "9386162115\n", "3440795217\n", "3407682168\n", "2275785525\n", "4545097955\n", "19428828848\n", "2191149504\n", "1244195550\n", "2829289260\n", "302443010\n", "309268638\n", "291128068\n", "500231088\n", "309172890\n", "7972868454\n", "2547026670\n", "1403838534\n", "6174161235\n", "10459717320\n", "11919509478\n", "5810183379\n", "2616319665\n", "11146618176\n", "2985636126\n", "48735509439\n", "13656285022\n", "6049249425\n", "6174161235\n", "8923056792\n", "11943039006\n", "5832233847\n", "2616319665\n", "1128917538\n", "1003979340\n", "291692304\n", "309271050\n", "293274234\n", "498085450\n", "321151644\n", "7212515628\n", "2135429940\n", "1403682750\n", "1244367054\n", "2829284640\n", "302429394\n", "309271050\n", "291126132\n", "118\n", "40\n", "117\n", "24\n", "21\n", "238670450\n", "58923677\n", "31645794\n", "3\n", "5\n", "2\n", "103938875\n", "20177587\n", "517743436\n"]}, "solutions": "[\"from math import gcd\\ndef powmod(a,b,m):\\n a%=m\\n r=1\\n while b:\\n  if b&1:r=r*a%m\\n  a=a*a%m\\n  b>>=1\\n return r\\n\\ndef f(n):\\n r=[]\\n if (n&1)==0:\\n  e=0\\n  while (n&1)==0:n>>=1;e+=1\\n  yield (2,e)\\n p=3\\n while n>1:\\n  if p*p>n:p=n\\n  if n%p:\\n   p+=2\\n   continue\\n  e=1;n//=p\\n  while n%p==0:n//=p;e+=1\\n  yield (p,e)\\n  p+=2\\n return r\\nm,x=map(int,input().split())\\np=2\\nr=[(1,1)]\\nfor p,e in f(m):\\n assert e>=1\\n ord=p-1\\n assert powmod(x,ord,p)==1\\n for pi,ei in f(p-1):\\n  while ord % pi == 0 and powmod(x,ord//pi,p)==1: ord//=pi\\n ords=[(1,1),(ord,p-1)]\\n q=p\\n for v in range(2,e+1):\\n  q*=p\\n  if powmod(x,ord,q)!=1:ord*=p\\n  assert powmod(x,ord,q)==1\\n  ords.append((ord,q//p*(p-1)))\\n r=[(a//gcd(a,c)*c,b*d) for a,b in r for c,d in ords]\\nprint(sum(y//x for x,y in r))\"]", "task": "apps", "difficulty": "interview", "split": "test", "transformation_type": "vanilla"}