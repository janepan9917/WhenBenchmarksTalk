{"qid": 27, "orig_input": "You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.\n\nInitially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. \n\nBesides, at most once you may perform one additional operation: copy the string and append it to itself.\n\nFor example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.\n\nIf you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.\n\nPrint the minimum number of operations you need to type the given string.\n\n\n-----Input-----\n\nThe first line of the input containing only one integer number n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.\n\n\n-----Output-----\n\nPrint one integer number\u00a0\u2014 the minimum number of operations you need to type the given string.\n\n\n-----Examples-----\nInput\n7\nabcabca\n\nOutput\n5\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\n\n\n-----Note-----\n\nThe first test described in the problem statement.\n\nIn the second test you can only type all the characters one by one.", "input": "You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.\n\nInitially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. \n\nBesides, at most once you may perform one additional operation: copy the string and append it to itself.\n\nFor example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.\n\nIf you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.\n\nPrint the minimum number of operations you need to type the given string.\n\n\n-----Input-----\n\nThe first line of the input containing only one integer number n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.\n\n\n-----Output-----\n\nPrint one integer number\u00a0\u2014 the minimum number of operations you need to type the given string.\n\n\n-----Examples-----\nInput\n7\nabcabca\n\nOutput\n5\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\n\n\n-----Note-----\n\nThe first test described in the problem statement.\n\nIn the second test you can only type all the characters one by one.", "test_cases": {"inputs": ["7\nabcabca\n", "8\nabcdefgh\n", "100\nmhnzadklojbuumkrxjayikjhwuxihgkinllackcavhjpxlydxcmhnzadklojbuumkrxjayikjhwuxihgkinllackcavhjpxlydxc\n", "99\ntrolnjmzxxrfxuexcqpjvefndwuxwsukxwmjhhkqmlzuhrplrtrolnjmzxxrfxuexcqpjvefndwuxwsukxwmjhhkqmlzuhrplrm\n", "100\nyeywsnxcwslfyiqbbeoaawtmioksfdndptxxcwzfmrpcixjbzvicijofjrbcvzaedglifuoczgjlqylddnsvsjfmfsccxbdveqgu\n", "8\naaaaaaaa\n", "4\nabab\n", "7\nababbcc\n", "7\nabcaabc\n", "10\naaaaaaaaaa\n", "6\naabbbb\n", "6\nabbbba\n", "9\nabcdeabcd\n", "10\nabcdabcefg\n", "9\naaaaaaaaa\n", "10\nababababab\n", "9\nzabcdabcd\n", "5\naaaaa\n", "10\nadcbeadcfg\n", "12\nabcabcabcabc\n", "16\naaaaaaaaaaaaaaaa\n", "4\naaaa\n", "17\nababababzabababab\n", "10\nabcabcabca\n", "7\ndabcabc\n", "6\naaaaaa\n", "5\nabcbc\n", "7\naabaaaa\n", "100\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "6\nablfab\n", "8\nabcdefef\n", "5\naavaa\n", "1\na\n", "10\nabcabcdddd\n", "16\naaaaaabbaaaaaabb\n", "17\nabcdefggggglelsoe\n", "17\nabcdefgggggabcdef\n", "27\naaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "8\nabbbbbbb\n", "2\naa\n", "5\nbaaaa\n", "10\nabcdeeeeee\n", "12\naaaaaaaaaaaa\n", "6\nabcabd\n", "10\nababcababc\n", "16\nbbbbbbaaaaaaaaaa\n", "10\nbbbbbbbbbc\n", "9\nasdfpasdf\n", "9\nbaaaabaaa\n", "11\nabcabcabcab\n", "10\nabccaaaaba\n", "8\nabbbbbba\n", "8\naaaaaass\n", "20\nhhhhhhhhhhhhhhhhhhhh\n", "8\naabcabca\n", "6\nababab\n", "8\nababcdef\n", "8\nabababab\n", "14\nabcdefgabcdepq\n", "6\nabcaca\n", "11\nababababccc\n", "8\nababcabc\n", "20\naabaabaabaabaabaabaa\n", "20\nabcdabcdeeeeeeeeabcd\n", "9\nasdfgasdf\n", "10\navavavavbc\n", "63\njhkjhadlhhsfkadalssaaggdagggfahsakkdllkhldfdskkjssghklkkgsfhsks\n", "3\naaa\n", "13\naabbbkaakbbbb\n", "7\nabababa\n", "6\najkoaj\n", "7\nabcdbcd\n", "46\nkgadjahfdhjajagdkffsdfjjlsksklgkshfjkjdajkddlj\n", "5\naabab\n", "16\nabcdabcdabcdabcd\n", "7\nzabcabc\n", "8\nabcdeabc\n", "11\nababcabcabc\n", "8\nffffffff\n", "8\nabbababa\n", "13\naabaabaabaabx\n", "9\nabcabcabc\n", "99\nlhgjlskfgldjgadhdjjgskgakslflalhjfgfaaalkfdfgdkdffdjkjddfgdhalklhsgslskfdhsfjlhgajlgdfllhlsdhlhadaa\n", "1\ns\n", "87\nfhjgjjagajllljffggjjhgfffhfkkaskksaalhksfllgdjsldagshhlhhgslhjaaffkahlskdagsfasfkgdfjka\n", "8\nasafaass\n", "14\nabcabcabcabcjj\n", "5\nababa\n", "8\nbaaaaaaa\n", "10\nadadadadad\n", "12\naabaabaabaab\n", "6\nabcbcd\n", "7\nabacbac\n", "8\npppppppp\n", "11\nabcdeabcdfg\n", "5\nabcab\n", "5\nabbbb\n", "7\naabcdaa\n", "6\nababbb\n", "8\naaabcabc\n", "81\naaaaaababaabaaaabaaaaaaaabbabbbbbabaabaabbaaaababaabaababbbabbaababababbbbbabbaaa\n", "10\naaaacaaaac\n", "12\nabaabaabaaba\n", "92\nbbbbbabbbaaaabaaababbbaabbaabaaabbaabababaabbaabaabbbaabbaaabaabbbbaabbbabaaabbbabaaaaabaaaa\n", "9\nazxcvzxcv\n", "8\nabcabcde\n", "70\nbabababbabababbbabaababbababaabaabbaaabbbbaababaabaabbbbbbaaabaabbbabb\n", "7\nabcdabc\n", "36\nbbabbaabbbabbbbbabaaabbabbbabaabbbab\n", "12\nababababbbbb\n", "8\nacacacac\n", "66\nldldgjllllsdjgllkfljsgfgjkflakgfsklhdhhallggagdkgdgjggfshagjgkdfld\n", "74\nghhhfaddfslafhhshjflkjdgksfashhllkggllllsljlfjsjhfggkgjfalgajaldgjfghlhdsh\n", "29\nabbabbaabbbbaababbababbaabbaa\n", "5\nxabab\n", "10\nbbbbbbbaaa\n", "3\nlsl\n", "32\nbbbbaaabbaabbaabbabaaabaabaabaab\n", "16\nuuuuuuuuuuuuuuuu\n", "37\nlglfddsjhhaagkakadffkllkaagdaagdfdahg\n", "45\nbbbbbbbabababbbaabbbbbbbbbbbbabbbabbaabbbabab\n", "12\nwwvwwvwwvwwv\n", "14\naaabcabcabcabc\n", "95\nbbaaaabaababbbabaaaabababaaaaaabbababbaabbaaabbbaaaabaaaaaaababababbabbbaaaabaabaababbbbbababaa\n", "4\nttob\n", "5\ncabab\n", "79\nlsfgfhhhkhklfdffssgffaghjjfkjsssjakglkajdhfkasfdhjhlkhsgsjfgsjghglkdkalaajsfdka\n", "11\njjlkalfhdhh\n", "39\njflfashaglkahldafjasagasjghjkkjgkgffgkk\n", "54\ndgafkhlgdhjflkdafgjldjhgkjllfallhsggaaahkaggkhgjgflsdg\n", "41\nabbababbbbbabbbabaaaababaaabaabaaabbbbbbb\n", "8\nbaaaaaab\n", "36\nbabbbbababaaabbabbbaabaabbbbbbbbbbba\n", "10\nwvwlwvwwvw\n", "38\nasdsssdssjajghslfhjdfdhhdggdsdfsfajfas\n", "77\nbabbaababaabbaaaabbaababbbabaaaabbabaaaaaaaabbbaaabbabbbabaababbabaabbbbaaabb\n", "7\nmabcabc\n", "86\nssjskldajkkskhljfsfkjhskaffgjjkskgddfslgjadjjgdjsjfsdgdgfdaldffjkakhhdaggalglakhjghssg\n", "20\nccbbcbaabcccbabcbcaa\n", "8\nabababaa\n", "5\naabaa\n", "13\neabcdefabcdef\n", "28\naaaaaaaaaaaaaaibfprdokxvipsq\n", "10\nasdasdasda\n", "8\naaaabcde\n", "9\nabbbbabbb\n", "12\nababababvvvv\n", "7\naabcabc\n"], "outputs": ["5\n", "8\n", "51\n", "51\n", "100\n", "5\n", "3\n", "6\n", "7\n", "6\n", "6\n", "6\n", "9\n", "10\n", "6\n", "7\n", "9\n", "4\n", "10\n", "7\n", "9\n", "3\n", "14\n", "8\n", "7\n", "4\n", "5\n", "7\n", "51\n", "6\n", "8\n", "5\n", "1\n", "8\n", "9\n", "17\n", "17\n", "15\n", "8\n", "2\n", "5\n", "10\n", "7\n", "6\n", "6\n", "14\n", "7\n", "9\n", "9\n", "9\n", "10\n", "8\n", "6\n", "11\n", "8\n", "5\n", "7\n", "5\n", "14\n", "6\n", "8\n", "7\n", "12\n", "17\n", "9\n", "7\n", "63\n", "3\n", "13\n", "6\n", "6\n", "7\n", "46\n", "5\n", "9\n", "7\n", "8\n", "10\n", "5\n", "8\n", "8\n", "7\n", "99\n", "1\n", "87\n", "8\n", "9\n", "4\n", "8\n", "7\n", "7\n", "6\n", "7\n", "5\n", "11\n", "5\n", "5\n", "7\n", "5\n", "8\n", "79\n", "6\n", "7\n", "91\n", "9\n", "6\n", "64\n", "7\n", "34\n", "9\n", "5\n", "65\n", "74\n", "27\n", "5\n", "8\n", "3\n", "31\n", "9\n", "37\n", "43\n", "7\n", "14\n", "95\n", "4\n", "5\n", "79\n", "11\n", "39\n", "54\n", "41\n", "8\n", "36\n", "10\n", "38\n", "77\n", "7\n", "86\n", "20\n", "7\n", "5\n", "13\n", "22\n", "8\n", "7\n", "9\n", "9\n", "7\n"]}, "solutions": "[\"n = int(input())\\nst = input()\\nans = n\\nnow = ''\\nma = 0\\nfor i in range(n // 2):\\n    now += st[i]\\n    t = ''\\n    for j in range(i + 1, 2 * i + 2):\\n        t += st[j]\\n    if t == now:\\n        ma = i\\nprint(ans - ma)\\n\", \"n = int(input())\\nstrng = input().strip()\\nres = len(strng)\\nst = len(strng)//2\\nwhile st>0:\\n    if strng[:st] == strng[st:st*2]:\\n        print(res - st +1)\\n        return\\n    st -= 1\\n\\nprint(res)\\n\\n\\n\\n\", \"import getpass\\nimport sys\\nimport math\\nimport random\\nimport itertools\\nimport bisect\\nimport time\\n\\nfiles = True\\ndebug = False\\n\\nif getpass.getuser() == 'frohenk' and files:\\n    debug = True\\n    sys.stdin = open(\\\"test.in\\\")\\n    # sys.stdout = open('test.out', 'w')\\nelif files:\\n    # fname = \\\"gift\\\"\\n    # sys.stdin = open(\\\"%s.in\\\" % fname)\\n    # sys.stdout = open('%s.out' % fname, 'w')\\n    pass\\n\\n\\ndef lcm(a, b):\\n    return a * b // math.gcd(a, b)\\n\\n\\ndef ria():\\n    return [int(i) for i in input().split()]\\n\\n\\ndef range_sum(a, b):\\n    ass = (((b - a + 1) // 2) * (a + b))\\n    if (a - b) % 2 == 0:\\n        ass += (b - a + 2) // 2\\n    return ass\\n\\n\\ndef comba(n, x):\\n    return (math.factorial(n) // math.factorial(n - x)) // math.factorial(x)\\n\\n\\nn = ria()[0]\\nsuma = n\\nst = input()\\nmx = 0\\nfor i in range(1, n + 1):\\n    if i + i <= n:\\n        if st[:i] == st[i:i + i]:\\n            mx = max(mx, len(st[:i]) - 1)\\nprint(n - mx)\\n\", \"input()\\ns=input()\\nans=len(s)\\nfor i in range(len(s)//2,0,-1):\\n\\tif s[:i]==s[i:2*i]:\\n\\t\\tans=len(s)-i+1\\n\\t\\tbreak\\nprint(ans)\", \"n = int(input())\\ns = input()\\n\\nanw = n\\n\\ndef calc(pos):\\n  x = s[:pos] + s[:pos]\\n  if x == s[:pos*2]:\\n    return 1+n-pos\\n  return 1e9\\n\\nfor i in range(n):\\n  anw = min(anw, calc(i))\\n  \\nprint(anw)\", \"n = int(input())\\ns = input()\\nans = n\\nfor i in range(n):\\n    ss = s[:i]\\n    if 2*i <= n and s[:i] == s[i:2*i]:\\n        ans = min(ans, n - i +1)\\nprint(ans)\", \"n = int(input())\\ns = input()\\n\\nans = n\\nfor i in range(n // 2 + 1):\\n    if s[:i] == s[i:2 * i]:\\n        # print (s[:i])\\n        ans = min(ans, i + 1 + n - 2 * i)\\nprint(ans)\\n\", \"R = lambda : list(map(int, input().split()))\\nn = int(input())\\ns = input()\\n\\nfor i in reversed(list(range(n//2))):\\n    if s[0:i+1]==s[i+1:2*i+2]:\\n        print((n-i)); return;\\n\\nprint(n)\\n\", \"def test(k):\\n    if len(s) >= 2 * k:\\n        return s[:k] == s[k: 2 * k]\\n    return False\\n\\n\\nn = int(input())\\ns = input()\\nd = 0\\nfor i in range(len(s) + 1):\\n    if test(i):\\n        d = i\\nprint(min(len(s), len(s) - 2 * d + d + 1))\\n\", \"n=int(input())\\ns=input()\\nimp=0\\nfor i in range(n//2,0,-1):\\n    if(s[:i]==s[i:2*i]):\\n        imp=i\\n        break\\nprint(min(n,n-imp+1))\", \"n = int(input())\\ns = input()\\ncurrents = s\\nans = 0\\nwhile (len(currents)>0):\\n    if (len(currents)%2==0) and (currents[0:len(currents)//2]==currents[len(currents)//2:len(s)]):\\n            ans = ans+len(currents)//2\\n            ans+=1\\n            break\\n    else:\\n        currents = currents[0:len(currents)-1]\\n        ans = ans+1\\nprint(ans)            \\n    \\n        \\n    \\n\\n    \\n\", \"n = int(input())\\na = input()\\no = ''\\nm = 0\\nfor i in range(n//2):\\n    #print(a[:i+1],a[i+1:i+i+2])\\n    if a[:i+1] == a[i+1:i+i+2]:\\n     #   print(a[:i+1])\\n        m = i\\nprint(n-m)\\n\", \"N = int(input())\\nS = input()\\ncopied = 1\\nfor i in range(1,N//2+1):\\n    # print(i, \\\"\\\\\\\"{}\\\\\\\"\\\".format(S[:i]), \\\"\\\\\\\"{}\\\\\\\"\\\".format(S[i:2*i]))\\n    if S[:i] == S[i:2*i]:\\n        copied = i\\nprint(N-copied+1)\\n\", \"n = int(input())\\ns = input()\\nans = 1e18\\nfor c in range(n // 2 + 1):\\n    curr = c + 1 + (n - 2 * c)\\n    if c == 0:\\n        curr -= 1\\n    s1 = s[:c] * 2\\n    b = True\\n    for i in range(len(s1)):\\n        if s1[i] != s[i]:\\n            b = False\\n            break\\n    #print(c, b, curr, s1)\\n    if b:\\n        ans = min(ans, curr)\\nprint(ans)\", \"n = int(input())\\ns = input()\\nres = n\\nfor i in range(1, n//2+1):\\n\\tif s[:i] == s[i:i * 2]:\\n\\t\\tres = n-i+1\\nprint(res)\\n\", \"n = int(input())\\n\\ns = input()\\n\\nss = \\\"\\\"\\n\\ni = 0\\nlongest  = 0\\n\\nfor i in range(int(n/2)):\\n\\t#print(s[0:i+1])\\n\\t#print(s[i+1:i+i+1+1])\\n\\tif s[0:i+1] == s[i+1:i+i+1+1]:\\n\\t\\tlongest = i\\n\\nans = n-longest\\n\\nprint(ans)\\n\", \"l = int(input())\\nk = input()\\nans = 0\\nfor i in range(1, (l//2) + 1):\\n    flag = 1\\n    for j in range(0, i):\\n        if k[j] != k[i + j]:\\n            flag = 0\\n            break\\n    if flag == 1:\\n        ans = max(ans, i)\\nsu = l - (ans)\\nif ans > 0:\\n    su += 1\\nprint(su)\\n\", \"n = int(input())\\ns = str(input())\\nans = len(s)\\nfor i in range(1, n+1):\\n    if s[:i] + s[:i] == s[:2*i] and 2*i <= n:\\n        ans = min(ans, n-i+1)\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\n\\ncnt = 0\\nfor i in range(2,n//2+1):\\n\\tif s[:i] == s[i:i+i]:\\n\\t\\tcnt = i\\n\\nif cnt == 0:\\n\\tprint(n)\\nelse:\\n\\tprint(n - (cnt - 1))\\n\\n\", \"n = int(input())\\ns = input()\\nc = 0\\n\\nfor i in range(1, 1 + len(s) // 2):\\n    if s[:i] == s[i:2 * i]:\\n        c = i\\n\\nif c != 0:\\n    print(n - c + 1)\\n\\nelse:\\n    print(n)\\n\", \"n = int(input())\\nseq = input()\\ncount = n\\nfor i in range(1,n//2+1):\\n    if seq[0:i] == seq[i:min(2*i,n)]:\\n        count = n + 1 - i\\nprint(count)\", \"n=input()\\ns=input()\\nbest = 0\\nfor i in range(len(s)//2+1):\\n\\tt = s[:i]*2\\n\\t# print(t)\\n\\ttry:\\n\\t\\tif s.index(t) == 0:\\n\\t\\t\\tbest = i\\n\\texcept:\\n\\t\\tpass\\nif best > 0:\\n\\tprint(len(s) - best + 1)\\nelse:\\n\\tprint(len(s))\\t \", \"n=int(input())\\ns=input()\\ni=0\\nd=\\\"\\\"\\nls=[]\\nmx=-1\\nwhile i<n:\\n    temp=s[0:i+1]\\n    for j in range(i+1,n+1):\\n        if temp==s[i+1:j]:\\n            mx=max(mx,len(temp))\\n    i+=1\\nif mx>0:\\n    print(len(temp)-mx+1)\\nelse:\\n    print(len(temp))\", \"n = int(input())\\ns = input()\\nx = 1\\nfor i in range(1, (n >> 1) + 1):\\n    if s[:i] == s[i:2 * i]:\\n        x = i\\nprint(n - x + 1)\\n\"]", "task": "apps", "difficulty": "interview", "split": "test", "transformation_type": "vanilla"}