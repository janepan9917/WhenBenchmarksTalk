{"qid": 111, "orig_input": "You are given two integers n and k. Find k-th smallest divisor of n, or report that it doesn't exist.\n\nDivisor of n is any such natural number, that n can be divided by it without remainder.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^15, 1 \u2264 k \u2264 10^9).\n\n\n-----Output-----\n\nIf n has less than k divisors, output -1.\n\nOtherwise, output the k-th smallest divisor of n.\n\n\n-----Examples-----\nInput\n4 2\n\nOutput\n2\n\nInput\n5 3\n\nOutput\n-1\n\nInput\n12 5\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first example, number 4 has three divisors: 1, 2 and 4. The second one is 2.\n\nIn the second example, number 5 has only two divisors: 1 and 5. The third divisor doesn't exist, so the answer is -1.", "input": "You are given two integers n and k. Find k-th smallest divisor of n, or report that it doesn't exist.\n\nDivisor of n is any such natural number, that n can be divided by it without remainder.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 10^15, 1 \u2264 k \u2264 10^9).\n\n\n-----Output-----\n\nIf n has less than k divisors, output -1.\n\nOtherwise, output the k-th smallest divisor of n.\n\n\n-----Examples-----\nInput\n4 2\n\nOutput\n2\n\nInput\n5 3\n\nOutput\n-1\n\nInput\n12 5\n\nOutput\n6\n\n\n\n-----Note-----\n\nIn the first example, number 4 has three divisors: 1, 2 and 4. The second one is 2.\n\nIn the second example, number 5 has only two divisors: 1 and 5. The third divisor doesn't exist, so the answer is -1.", "test_cases": {"inputs": ["4 2\n", "5 3\n", "12 5\n", "1 1\n", "866421317361600 26880\n", "866421317361600 26881\n", "1000000000000000 1000000000\n", "1000000000000000 100\n", "1 2\n", "4 3\n", "4 4\n", "9 3\n", "21 3\n", "67280421310721 1\n", "6 3\n", "3 3\n", "16 3\n", "1 1000\n", "16 4\n", "36 8\n", "49 4\n", "9 4\n", "16 1\n", "16 6\n", "16 5\n", "25 4\n", "4010815561 2\n", "49 3\n", "36 6\n", "36 10\n", "25 3\n", "22876792454961 28\n", "1234 2\n", "179458711 2\n", "900104343024121 100000\n", "8 3\n", "100 6\n", "15500 26\n", "111111 1\n", "100000000000000 200\n", "1000000000000 100\n", "100 10\n", "1000000000039 2\n", "64 5\n", "999999961946176 33\n", "376219076689 3\n", "999999961946176 63\n", "1048576 12\n", "745 21\n", "748 6\n", "999999961946176 50\n", "10 3\n", "1099511627776 22\n", "1000000007 100010\n", "3 1\n", "100 8\n", "100 7\n", "7 2\n", "999999961946176 64\n", "20 5\n", "999999999999989 2\n", "100000000000000 114\n", "99999640000243 3\n", "999998000001 566\n", "99999820000081 2\n", "49000042000009 3\n", "151491429961 4\n", "32416190071 2\n", "1000 8\n", "1999967841 15\n", "26880 26880\n", "151491429961 3\n", "90000000000 300\n", "98765004361 10\n", "15 2\n", "16 2\n", "1996 2\n", "1997 2\n", "1999 2\n", "1998 2\n", "1998 1\n", "1998 7\n", "1998 8\n", "100000380000361 2\n", "15 1\n", "100000000000000 226\n", "844030857550613 517\n", "4567890 14\n", "123123123 123123123\n", "24 4\n", "999999993568952 17\n", "99999999994190 9\n", "999997874844049 4\n", "99999999999931 2\n", "2 3\n", "67280421310721 2\n"], "outputs": ["2\n", "-1\n", "6\n", "1\n", "866421317361600\n", "-1\n", "-1\n", "1953125\n", "-1\n", "4\n", "-1\n", "9\n", "7\n", "1\n", "3\n", "-1\n", "4\n", "-1\n", "8\n", "18\n", "-1\n", "-1\n", "1\n", "-1\n", "16\n", "-1\n", "63331\n", "49\n", "9\n", "-1\n", "25\n", "7625597484987\n", "2\n", "179458711\n", "-1\n", "4\n", "20\n", "-1\n", "1\n", "160000000000\n", "6400000\n", "-1\n", "1000000000039\n", "16\n", "63245552\n", "376219076689\n", "999999961946176\n", "2048\n", "-1\n", "22\n", "161082468097\n", "5\n", "2097152\n", "-1\n", "1\n", "50\n", "25\n", "7\n", "-1\n", "10\n", "999999999999989\n", "10240000\n", "9999991\n", "333332666667\n", "9999991\n", "49000042000009\n", "-1\n", "32416190071\n", "25\n", "1999967841\n", "-1\n", "151491429961\n", "100000000\n", "-1\n", "3\n", "2\n", "2\n", "1997\n", "1999\n", "2\n", "1\n", "27\n", "37\n", "10000019\n", "1\n", "-1\n", "-1\n", "430\n", "-1\n", "4\n", "31622777\n", "241656799\n", "-1\n", "99999999999931\n", "-1\n", "67280421310721\n"]}, "solutions": "[\"import sys\\nimport math\\n\\ndef factorization(n):\\n    res = []\\n    limit = math.ceil(math.sqrt(n))\\n    p = 2\\n    cnt = 0\\n\\n    while n % p == 0:\\n        cnt += 1\\n        n //= p\\n\\n    if cnt > 0:\\n        res.append((p, cnt))\\n\\n    cnt = 0\\n    for p in range(3, limit + 1, 2):\\n        if n % p == 0:\\n            while n % p == 0:\\n                cnt += 1\\n                n //= p\\n\\n            res.append((p, cnt))\\n        cnt = 0\\n\\n    if n > 1:\\n        res.append((n, 1))\\n\\n    return res\\n\\ndef divisor(n):\\n    res = set()\\n\\n    factor = factorization(n)\\n\\n    for p, c in factor:\\n        if res == set():\\n            for i in range(c + 1):\\n                res.add(p ** i)\\n        else:\\n            t = set()\\n            for i in range(1, c + 1):\\n                for m in res:\\n                    t.add(m * p**i)\\n            res = res | t\\n\\n    res = list(sorted(res))\\n    return res\\n\\nn, k = map(int, input().split())\\n\\n# print(factorization(n), file=sys.stderr)\\n# print(divisor(n), file=sys.stderr)\\n\\nn_div = divisor(n)\\n\\nif n == 1:\\n    if k == 1:\\n        ans = 1\\n    else:\\n        ans = -1\\nelif k > len(n_div):\\n    ans = -1\\nelse:\\n    ans = n_div[k - 1]\\n\\nprint(ans)\", \"import sys\\nfrom math import sqrt, floor\\nfrom collections import Counter\\n\\ndef factorize(n):\\n    limit = floor(sqrt(n))\\n    factor = Counter()\\n\\n    p = 2\\n    while n % p == 0:\\n        factor[p] += 1\\n        n //= p\\n\\n    for p in range(3, limit + 1, 2):\\n        while n % p == 0:\\n            factor[p] += 1\\n            n //= p\\n    if n > 1:\\n        factor[n] += 1\\n\\n    return factor\\n\\ndef make_divisors(n):\\n    result = [1]\\n\\n    for p, e in factorize(n).items():\\n        result = [x * p**i for i in range(e + 1) for x in result]\\n\\n    return sorted(result)\\n\\nn, k = map(int, input().split())\\n\\ndivisors = make_divisors(n)\\n\\nif k > len(divisors):\\n    ans = -1\\nelse:\\n    ans = divisors[k - 1]\\n\\nprint(ans)\"]", "task": "apps", "difficulty": "interview", "split": "test", "transformation_type": "vanilla"}