{"qid": 46, "orig_input": "After finishing eating her bun, Alyona came up with two integers n and m. She decided to write down two columns of integers\u00a0\u2014 the first column containing integers from 1 to n and the second containing integers from 1 to m. Now the girl wants to count how many pairs of integers she can choose, one from the first column and the other from the second column, such that their sum is divisible by 5.\n\nFormally, Alyona wants to count the number of pairs of integers (x, y) such that 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m and $(x + y) \\operatorname{mod} 5$ equals 0.\n\nAs usual, Alyona has some troubles and asks you to help.\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 \u2264 n, m \u2264 1 000 000).\n\n\n-----Output-----\n\nPrint the only integer\u00a0\u2014 the number of pairs of integers (x, y) such that 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m and (x + y) is divisible by 5.\n\n\n-----Examples-----\nInput\n6 12\n\nOutput\n14\n\nInput\n11 14\n\nOutput\n31\n\nInput\n1 5\n\nOutput\n1\n\nInput\n3 8\n\nOutput\n5\n\nInput\n5 7\n\nOutput\n7\n\nInput\n21 21\n\nOutput\n88\n\n\n\n-----Note-----\n\nFollowing pairs are suitable in the first sample case:   for x = 1 fits y equal to 4 or 9;  for x = 2 fits y equal to 3 or 8;  for x = 3 fits y equal to 2, 7 or 12;  for x = 4 fits y equal to 1, 6 or 11;  for x = 5 fits y equal to 5 or 10;  for x = 6 fits y equal to 4 or 9. \n\nOnly the pair (1, 4) is suitable in the third sample case.", "input": "Count pairs of integers (x, y) where 1 \u2264 x \u2264 n, 1 \u2264 y \u2264 m, and their sum is divisible by 5.", "test_cases": {"inputs": ["6 12\n", "11 14\n", "1 5\n", "3 8\n", "5 7\n", "21 21\n", "10 15\n", "1 1\n", "1 1000000\n", "1000000 1\n", "1000000 1000000\n", "944 844\n", "368 984\n", "792 828\n", "920 969\n", "640 325\n", "768 170\n", "896 310\n", "320 154\n", "744 999\n", "630 843\n", "54 688\n", "478 828\n", "902 184\n", "31 29\n", "751 169\n", "879 14\n", "7 858\n", "431 702\n", "855 355\n", "553 29\n", "721767 525996\n", "805191 74841\n", "888615 590981\n", "4743 139826\n", "88167 721374\n", "171591 13322\n", "287719 562167\n", "371143 78307\n", "487271 627151\n", "261436 930642\n", "377564 446782\n", "460988 28330\n", "544412 352983\n", "660540 869123\n", "743964 417967\n", "827388 966812\n", "910812 515656\n", "26940 64501\n", "110364 356449\n", "636358 355531\n", "752486 871672\n", "803206 420516\n", "919334 969361\n", "35462 261309\n", "118887 842857\n", "202311 358998\n", "285735 907842\n", "401863 456686\n", "452583 972827\n", "235473 715013\n", "318897 263858\n", "402321 812702\n", "518449 361546\n", "634577 910391\n", "685297 235043\n", "801425 751183\n", "884849 300028\n", "977 848872\n", "51697 397716\n", "834588 107199\n", "918012 688747\n", "1436 237592\n", "117564 753732\n", "200988 302576\n", "284412 818717\n", "400540 176073\n", "483964 724917\n", "567388 241058\n", "650812 789902\n", "400999 756281\n", "100 101\n", "100 102\n", "103 100\n", "100 104\n", "3 4\n", "11 23\n", "8 14\n", "23423 34234\n", "1 4\n", "999999 999999\n", "82 99\n", "21 18\n", "234 234\n", "4 4\n", "6 13\n", "3 9\n", "99999 99999\n", "34 33\n", "2 2\n", "333 1\n", "3 3\n", "8 2\n", "2179 2218\n", "1000000 999999\n", "873828 774207\n", "13 19\n", "1648 576469\n", "11 13\n", "5 8\n", "650074 943659\n", "1 3\n", "54 43\n", "14 9\n", "2 3\n", "543 534\n", "321 123\n", "21 3\n", "2 1\n", "4 3\n", "47474 74747\n", "4 9\n", "7 4\n", "9 4\n", "12414 4214\n", "2 9\n", "253 821\n", "2 4\n"], "outputs": ["14\n", "31\n", "1\n", "5\n", "7\n", "88\n", "30\n", "0\n", "200000\n", "200000\n", "200000000000\n", "159348\n", "72423\n", "131155\n", "178296\n", "41600\n", "26112\n", "55552\n", "9856\n", "148652\n", "106218\n", "7431\n", "79157\n", "33194\n", "180\n", "25384\n", "2462\n", "1201\n", "60512\n", "60705\n", "3208\n", "75929310986\n", "12052259926\n", "105030916263\n", "132638943\n", "12720276292\n", "457187060\n", "32349225415\n", "5812618980\n", "61118498984\n", "48660664382\n", "33737759810\n", "2611958008\n", "38433636199\n", "114818101284\n", "62190480238\n", "159985729411\n", "93933134534\n", "347531388\n", "7867827488\n", "45248999219\n", "131184195318\n", "67552194859\n", "178233305115\n", "1853307952\n", "20040948031\n", "14525848875\n", "51880446774\n", "36705041203\n", "88056992428\n", "33673251230\n", "16828704925\n", "65393416268\n", "37488632431\n", "115542637921\n", "32214852554\n", "120403367155\n", "53095895155\n", "165869588\n", "4112144810\n", "17893399803\n", "126455602192\n", "68236422\n", "17722349770\n", "12162829017\n", "46570587880\n", "14104855884\n", "70166746198\n", "27354683301\n", "102815540084\n", "60653584944\n", "2020\n", "2040\n", "2060\n", "2080\n", "3\n", "50\n", "23\n", "160372597\n", "1\n", "199999600001\n", "1624\n", "75\n", "10952\n", "4\n", "15\n", "6\n", "1999960001\n", "225\n", "0\n", "66\n", "2\n", "3\n", "966605\n", "199999800000\n", "135304750879\n", "50\n", "190004183\n", "28\n", "8\n", "122689636154\n", "0\n", "465\n", "26\n", "1\n", "57993\n", "7896\n", "12\n", "0\n", "3\n", "709707816\n", "8\n", "6\n", "8\n", "10462520\n", "4\n", "41542\n", "2\n"]}, "solutions": "[\"ct=0\\na, b = list(map(int, input().split(' ')))\\nx=[0]*5\\nfor i in range(1, b+1):\\n    x[i%5]+=1\\nfor i in range(1, a+1):\\n    ct+=x[(0-i)%5]\\nprint(ct)\\n\", \"#!/usr/bin/env python3\\n\\ntry:\\n    while True:\\n        n, m = list(map(int, input().split()))\\n        a = [0] * 5\\n        b = [0] * 5\\n        for i in range(1, n + 1):\\n            a[i % 5] += 1\\n        for j in range(1, m + 1):\\n            b[j % 5] += 1\\n\\n        print(a[0] * b[0] + a[1] * b[4] + a[2] * b[3] + a[3] * b[2] + a[4] * b[1])\\n\\nexcept EOFError:\\n    pass\\n\", \"n, m = [int(x) for x in input().split()]\\nn_rem = [n//5]*5\\nm_rem = [m//5]*5\\nfor i in range(n%5):\\n    n_rem[(i+1)%5] += 1\\nfor i in range(m%5):\\n    m_rem[(i+1)%5] += 1\\nprint((n_rem[0]*m_rem[0] + n_rem[1]*m_rem[4] +\\n      n_rem[2]*m_rem[3] + n_rem[3]*m_rem[2] + n_rem[4]*m_rem[1]))\\n\\n\", \"n, m = map(int, input().split())\\na = [n // 5 + (n % 5 > i) for i in range(5)]\\nb = [m // 5 + (m % 5 > i) for i in range(5)]\\nans = 0\\nfor i in range(4): ans += a[i] * b[3 - i]\\nprint(ans + a[4] * b[4])\", \"\\n\\nn,m=list(map(int,input().split()))\\n\\nnMod=[n//5]*5\\nmMod=[m//5]*5\\n\\nfor loop in range(1,n%5+1):\\n    nMod[loop]+=1\\n\\nfor loop in range(1,m%5+1):\\n    mMod[loop]+=1\\n\\nprint(nMod[0]*mMod[0]+nMod[1]*mMod[4]+nMod[4]*mMod[1]+nMod[2]*mMod[3]+nMod[3]*mMod[2])\\n\", \"n,m = list(map(int,input().split()))\\nn5 = [0]*5\\nfor i in range(1,n+1):\\n    n5[i % 5] += 1\\nm5 = [0]*5\\nfor i in range(1,m+1):\\n    m5[i % 5] += 1\\nprint(n5[0] * m5[0]+n5[1] * m5[4] + n5[2] * m5[3] + n5[3] * m5[2] + n5[4] * m5[1])\\n\", \"from collections import defaultdict, deque, Counter, OrderedDict\\n\\ndef main():\\n    n,m = map(int, input().split())\\n    n1,n2 = divmod(n,5)\\n    m1,m2 = divmod(m,5)\\n    ans = n1*5*m1 + m2*n1 + m1*n2\\n    if n2 + m2 >= 5:\\n        ans += n2 + m2 - 4\\n    print(ans)\\n\\n\\n\\n\\ndef __starting_point():\\n    \\\"\\\"\\\"sys.setrecursionlimit(400000)\\n    threading.stack_size(40960000)\\n    thread = threading.Thread(target=main)\\n    thread.start()\\\"\\\"\\\"\\n    main()\\n__starting_point()\", \"n, m = [int(x) for x in input().split()]\\nr = 0\\nfor i in range(5):\\n    r += ((n+(5-i)%5)//5) * ((m+i)//5)\\nprint(r)\", \"n, m = list(map(int, input().split()))\\nr = 0\\nfor i in range(1, n+1):\\n    x = (5 - i) % 5\\n    if x == 0:\\n        r += (m - x) // 5\\n    else:\\n        r += (m - x) // 5 + 1\\nprint(r)\\n\", \"n,m=map(int,input().split())\\nk0=(n//5)*(m//5)\\nk1=(n//5+(n%5>0))*(m//5+(m%5>3))\\nk2=(n//5+(n%5>1))*(m//5+(m%5>2))\\nk3=(n//5+(n%5>2))*(m//5+(m%5>1))\\nk4=(n//5+(n%5>3))*(m//5+(m%5>0))\\nprint(k0+k1+k2+k3+k4)\", \"n, m = list(map(int, input().split()))\\na = 5 * [n // 5]\\nfor i in range(1, n % 5 + 1):\\n    a[i] += 1\\n\\nb = 5 * [m // 5]\\nfor i in range(1, m % 5 + 1):\\n    b[i] += 1\\n\\ncnt = a[0] * b[0]\\nfor i in range(1, 5):\\n    cnt += a[i] * b[5 - i]\\n\\nprint(cnt)\\n\", \"n, m = list(map(int, input().split()))\\nn_rem = [n // 5 for _ in range(5)]\\nfor i in range(1, n % 5 + 1):\\n    n_rem[i] += 1\\nm_rem = [m // 5 for _ in range(5)]\\nfor i in range(1, m % 5 + 1):\\n    m_rem[i] += 1\\nprint(sum([n_rem[i] * m_rem[(5 - i) % 5] for i in range(5)]))\\n\", \"n,m = list(map(int,input().split()))\\nleft_first = [n//5]*5\\nleft_second = [m//5]*5\\nfor i in range(n%5):\\n    left_first[i]+=1\\n    \\nfor j in range(m%5):\\n    left_second[j]+=1\\n\\nans = left_first[-1]*left_second[-1]\\nfor i in range(4):\\n    ans+=left_first[i]*left_second[3-i]\\n    #print(ans)\\n#print(left_first,left_second)\\nprint(ans)\\n\", \"n, m = map(int, input().split())\\nA = [n//5, n//5, n//5, n//5, n//5]\\nB = [m//5, m//5, m//5, m//5, m//5]\\n\\nfor i in range(n%5):\\n    A[i]+= 1\\nfor i in range(m%5):\\n    B[i]+= 1\\nprint(A[0]*B[3] + A[3]*B[0] + A[1]*B[2] + A[2]*B[1] + A[4]*B[4])\", \"x,y = map(int,input().split())\\narx = []\\nary = []\\nxx = x//5\\narx = [xx,xx,xx,xx,xx]\\nfor i in range(x%5):\\n    arx[i] += 1\\nyy = y//5\\nary = [yy,yy,yy,yy,yy]\\nfor i in range(y%5):\\n    ary[i] += 1\\nsum = 0\\nsum += arx[0]*ary[3]\\nsum += arx[1]*ary[2]\\nsum += arx[2]*ary[1]\\nsum += arx[3]*ary[0]\\nsum += arx[4]*ary[4]\\nprint(sum)\", \"import math\\n\\nn,m = list(map(int, input().split()))\\n\\nndiv = math.floor(n/5)\\nnmod = n % 5\\n\\nmdiv = math.floor(m/5)\\nmmod = m % 5\\n\\nmods = 0\\nif nmod + mmod >= 5:\\n    mods = nmod + mmod - 4\\n\\nans = (ndiv * mdiv * 5) + nmod * mdiv + mmod * ndiv + mods\\nprint(ans)\\n\", \"n, m = map(int, input().split())\\n\\nfull_n = n // 5\\nfull_m = m // 5\\n\\nprint(full_n * full_m * 5 + full_n * (m%5) + full_m * (n%5) + sum(1 for x in range(0, n % 5 + 1) for y in range(0, m % 5 + 1) if (x + y) % 5 == 0) - 1)\", \"n, m = list(map(int, input().split()))\\ncap = m // 5\\nothers = m % 5\\n\\nresult = n * cap\\n\\ncap2 = n // 5\\n\\nresult += cap2 * others\\n\\nfor i in range(cap2 * 5 + 1, cap2 * 5 + (n % 5) + 1):\\n    for j in range(cap * 5 + 1, cap * 5 + others + 1):\\n        if (i + j) % 5 == 0:\\n            result += 1\\n\\nprint(result)\\n\", \"d=lambda a,b: (a//5)*(b//5)\\nn,m=map(int,input().split())\\nprint(d(n,m)+d(n+4,m+1)+d(n+3,m+2)+d(n+2,m+3)+d(n+1,m+4))\", \"# coding: utf-8\\n\\n\\n\\n\\n\\nimport math\\nimport string\\nimport itertools\\nimport fractions\\nimport heapq\\nimport collections\\nimport re\\nimport array\\nimport bisect\\n\\ndef array2d(d1, d2, init = None):\\n    return [[init for _ in range(d1)] for _ in range(d2)]\\n\\nn, m = list(map(int, input().split(\\\" \\\")))\\n\\ns = 0\\nfor i in range(5):\\n    t1 = n//5\\n    t2 = m//5\\n    if i != 0:\\n        t1 += 1 if n % 5 >= i else 0\\n        t2 += 1 if m % 5 >= (5-i) else 0\\n    s += t1 * t2\\nprint(s)\\n\", \"n, m = list(map(int, input().split()))\\nmod1, mod2, mod3, mod4, mod5 = n//5,n//5,n//5,n//5,n//5\\nif n%5 >= 1:\\n    mod1 += 1\\nif n%5 >= 2:\\n    mod2 += 1\\nif n%5 >= 3:\\n    mod3 += 1\\nif n%5 == 4:\\n    mod4 += 1\\n\\nm1, m2, m3, m4, m5 = m//5, m//5, m//5, m//5, m//5\\nif m%5 >= 1:\\n    m1 += 1\\nif m%5 >= 2:\\n    m2 += 1\\nif m%5 >= 3:\\n    m3 += 1\\nif m%5 == 4:\\n    m4 += 1\\n#print(mod1, mod2, mod3, mod4, mod5, m1, m2, m3, m4, m5)\\nprint(mod1*m4+mod2*m3+mod3*m2+mod4*m1+mod5*m5)\\n\", \"import sys\\n\\n\\ndef main():\\n    x = sys.stdin.readline().split()\\n    n, m = int(x[0]), int(x[1])\\n    \\n    k = int(n/5)\\n    rest = n - k*5\\n    a = [k]*5\\n    for i in range(rest):\\n        a[i+1]+=1\\n\\n    k = int(m/5)\\n    rest = m - k*5\\n    b = [k]*5\\n    for i in range(rest):\\n        b[i+1]+=1\\n\\n    r = a[0]*b[0] + a[1]*b[4] + a[2]*b[3]+ a[3]*b[2] + a[4]*b[1]\\n\\n    print(r)\\n\\nmain()\\n\", \"n, m = map(int, input().split())\\nn1 = [n // 5, (n - 1) // 5 + 1, (n - 2) // 5 + 1, (n - 3) // 5 + 1, (n - 4) // 5 + 1]\\nm1 = [m // 5, (m - 1) // 5 + 1, (m - 2) // 5 + 1, (m - 3) // 5 + 1, (m - 4) // 5 + 1]\\n#print(n1, m1)\\nprint(n1[0] * m1[0] + n1[1] * m1[4] + n1[2] * m1[3] + n1[3] * m1[2] + n1[4] * m1[1])\", \"n, m = list(map(int, input().split()))\\nnt = n // 5\\nmt = m // 5\\n\\nnf = [nt] * 5\\nmf = [mt] * 5\\n\\nfor x in range((n % 5) + 1):\\n    nf[x] += 1\\n\\nfor x in range((m % 5) + 1):\\n    mf[x] += 1\\n\\nnf[0] -= 1\\nmf[0] -= 1\\n\\nans = 0\\nfor x in range(5):\\n    y = (5 - x) % 5\\n    ans += nf[x] * mf[y]\\n\\nprint(ans)\\n\", \"n, m = map(int, input().split())\\nzer1 = n // 5\\nzer2 = m // 5\\none1 = (n - 1) // 5 + 1\\none2 = (m - 1) // 5 + 1\\ntwo1 = (n - 2) // 5 + 1\\ntwo2 = (m - 2) // 5 + 1\\nthree1 = (n - 3) // 5 + 1\\nthree2 = (m - 3) // 5 + 1\\nfour1 = (n - 4) // 5 + 1\\nfour2 = (m - 4) // 5 + 1\\nprint(zer1 * zer2 + one1 * four2 + two1 * three2 + three1 * two2 + four1 * one2)\"]", "task": "apps", "difficulty": "interview", "split": "test", "transformation_type": "plain_summary"}
