{"qid": 44, "orig_input": "Vasiliy has a car and he wants to get from home to the post office. The distance which he needs to pass equals to d kilometers.\n\nVasiliy's car is not new \u2014 it breaks after driven every k kilometers and Vasiliy needs t seconds to repair it. After repairing his car Vasiliy can drive again (but after k kilometers it will break again, and so on). In the beginning of the trip the car is just from repair station.\n\nTo drive one kilometer on car Vasiliy spends a seconds, to walk one kilometer on foot he needs b seconds (a < b).\n\nYour task is to find minimal time after which Vasiliy will be able to reach the post office. Consider that in every moment of time Vasiliy can left his car and start to go on foot.\n\n\n-----Input-----\n\nThe first line contains 5 positive integers d, k, a, b, t (1 \u2264 d \u2264 10^12; 1 \u2264 k, a, b, t \u2264 10^6; a < b), where:  d \u2014 the distance from home to the post office;  k \u2014 the distance, which car is able to drive before breaking;  a \u2014 the time, which Vasiliy spends to drive 1 kilometer on his car;  b \u2014 the time, which Vasiliy spends to walk 1 kilometer on foot;  t \u2014 the time, which Vasiliy spends to repair his car. \n\n\n-----Output-----\n\nPrint the minimal time after which Vasiliy will be able to reach the post office.\n\n\n-----Examples-----\nInput\n5 2 1 4 10\n\nOutput\n14\n\nInput\n5 2 1 4 5\n\nOutput\n13\n\n\n\n-----Note-----\n\nIn the first example Vasiliy needs to drive the first 2 kilometers on the car (in 2 seconds) and then to walk on foot 3 kilometers (in 12 seconds). So the answer equals to 14 seconds.\n\nIn the second example Vasiliy needs to drive the first 2 kilometers on the car (in 2 seconds), then repair his car (in 5 seconds) and drive 2 kilometers more on the car (in 2 seconds). After that he needs to walk on foot 1 kilometer (in 4 seconds). So the answer equals to 13 seconds.", "input": "Calculate the minimum time for Vasiliy to reach the post office by optimally combining driving, repairing, and walking, given the distance, car breakdown frequency, and time costs for each action.", "test_cases": {"inputs": ["5 2 1 4 10\n", "5 2 1 4 5\n", "1 1 1 2 1\n", "1000000000000 1000000 999999 1000000 1000000\n", "997167959139 199252 232602 952690 802746\n", "244641009859 748096 689016 889744 927808\n", "483524125987 264237 209883 668942 244358\n", "726702209411 813081 730750 893907 593611\n", "965585325539 329221 187165 817564 718673\n", "213058376259 910770 679622 814124 67926\n", "451941492387 235422 164446 207726 192988\n", "690824608515 751563 656903 733131 509537\n", "934002691939 300407 113318 885765 858791\n", "375802030518 196518 567765 737596 550121\n", "614685146646 521171 24179 943227 899375\n", "857863230070 37311 545046 657309 991732\n", "101041313494 586155 1461 22992 340986\n", "344219396918 167704 522327 941101 690239\n", "583102513046 683844 978741 986255 815301\n", "821985629174 232688 471200 927237 164554\n", "1000000000000 1 1 2 1000000\n", "1049 593 10 36 7\n", "1 100 1 5 10\n", "2 3 1 4 10\n", "10 20 5 15 50\n", "404319 964146 262266 311113 586991\n", "1000000000000 1 1 4 1\n", "1000000000000 1 1 10 1\n", "100 123 1 2 1000\n", "100 111 1 2 123456\n", "100 110 1 2 100000\n", "100 122 1 2 70505\n", "100 120 1 2 300\n", "100 125 1 2 300\n", "100 120 1 2 305\n", "10 12 3 4 5\n", "100 1000 1 10 1000\n", "5 10 1 2 5\n", "11 3 4 5 1\n", "100 121 1 2 666\n", "1 10 1 10 10\n", "100 120 1 2 567\n", "1 2 1 2 1\n", "100 120 1 2 306\n", "1 2 1 2 2\n", "100 120 1 2 307\n", "3 100 1 2 5\n", "11 12 3 4 5\n", "100 120 1 2 399\n", "1 9 54 722 945\n", "100 10 1 10 100\n", "100 120 1 2 98765\n", "100 101 1 2 3\n", "1000000000000 1 1 1000000 1\n", "1 100 2 200 900\n", "100 120 1 2 505\n", "100 120 1 2 3\n", "2 100 1 2 10\n", "5 10 1 2 10\n", "10 100 5 6 1000\n", "100 120 1 2 506\n", "5 10 1 2 500\n", "100 120 1 2 507\n", "100 123 1 2 1006\n", "100 120 1 2 509\n", "100 120 1 2 510\n", "100 120 1 2 512\n", "4 5 3 4 199\n", "100 120 1 2 513\n", "100 123 1 2 1007\n", "5 6 1 2 10000\n", "1 10 10 11 12\n", "100 120 1 2 515\n", "100 120 1 2 516\n", "5 10 1 2000 100000\n", "1000000000000 3 4 5 1\n", "100 5 20 21 50\n", "3 10 3 6 100\n", "41 18467 6334 26500 19169\n", "10 20 1 2 100\n", "4 6 1 2 100\n", "270 66 76 82 27\n", "4492 4 3 13 28\n", "28 32 37 38 180\n", "100 120 1 2 520\n", "5 10 2 3 10\n", "66 21 11 21 97\n", "549 88 81471 83555 35615\n", "100 120 1 2 1\n", "1 999999 1 2 1000000\n", "100 20 1 100 999999\n", "3 9 8 9 4\n", "100 120 1 2 600\n", "6 3 4 9 4\n", "9 1 1 2 1\n", "100 120 1 2 522\n", "501 47 789 798 250\n", "3 6 1 6 9\n", "2 5 8 9 4\n", "9 1 3 8 2\n", "17 42 22 64 14\n", "20 5 82 93 50\n", "5 6 2 3 50\n", "100 120 1 2 525\n", "6 3 7 9 1\n", "1686604166 451776 534914 885584 885904\n", "1 4 4 6 7\n", "5 67 61 68 83\n", "15 5 11 20 15\n", "15 2 9 15 13\n", "17 15 9 17 19\n", "1 17 9 10 6\n", "2 10 10 16 8\n", "18419 54 591 791 797\n", "10 2 1 2 18\n", "100 120 1 2 528\n", "5 17 2 3 8\n", "63793 358 368 369 367\n", "7 2 4 16 19\n", "3 8 3 5 19\n", "17 7 6 9 13\n", "14 3 14 16 5\n", "2000002 1000000 1 3 1000000\n", "2 1 3 8 14\n", "18 6 8 9 7\n", "10 20 10 20 7\n", "12 7 8 18 1\n", "16 1 3 20 2\n", "5 1000 1 4 10\n"], "outputs": ["14\n", "13\n", "1\n", "999999999999000000\n", "231947279018960454\n", "168561873458925288\n", "101483941282301425\n", "531038170074636443\n", "180725885278576882\n", "144799175679959130\n", "74320341137487118\n", "453805226165077316\n", "105841987132852686\n", "213368291855090933\n", "14863532910609884\n", "467597724229950776\n", "147680137840428\n", "179796501677835485\n", "570707031914457669\n", "387320209764489810\n", "1999999999999\n", "10497\n", "1\n", "2\n", "50\n", "106039126854\n", "1999999999999\n", "1999999999999\n", "100\n", "100\n", "100\n", "100\n", "100\n", "100\n", "100\n", "30\n", "100\n", "5\n", "47\n", "100\n", "1\n", "100\n", "1\n", "100\n", "1\n", "100\n", "3\n", "33\n", "100\n", "54\n", "910\n", "100\n", "100\n", "1999999999999\n", "2\n", "100\n", "100\n", "2\n", "5\n", "50\n", "100\n", "5\n", "100\n", "100\n", "100\n", "100\n", "100\n", "12\n", "100\n", "100\n", "5\n", "10\n", "100\n", "100\n", "5\n", "4333333333333\n", "2095\n", "9\n", "259694\n", "10\n", "4\n", "20628\n", "44892\n", "1036\n", "100\n", "10\n", "950\n", "44941269\n", "100\n", "1\n", "8020\n", "24\n", "100\n", "28\n", "17\n", "100\n", "397789\n", "3\n", "16\n", "43\n", "374\n", "1790\n", "10\n", "100\n", "43\n", "902191487931356\n", "4\n", "305\n", "195\n", "213\n", "169\n", "9\n", "20\n", "11157406\n", "18\n", "100\n", "10\n", "23539259\n", "78\n", "9\n", "124\n", "215\n", "3000006\n", "11\n", "156\n", "100\n", "97\n", "78\n", "5\n"]}, "solutions": "[\"d, k, a, b, t = list(map(int, input().split()))\\n\\nt1 = d * b\\nt2 = d * a + ((d - 1) // k) * t\\nt3 = max(0, d - k) * b + min(k, d) * a\\ndd = d % k\\nd1 = d - dd\\nt4 = d1 * a + max(0, (d1 // k - 1) * t) + dd * b\\n\\nprint(min([t1, t2, t3, t4]))\\n\", \"from random import randint\\nd, k, a, b, t = list(map(int, input().split()))\\ncnt = (d + k - 1) // k\\ndef get(m):\\n\\tif k * m >= d:\\n\\t\\treturn d * a + (cnt - 1) * t\\n\\treturn k * m * a + max(0, m - 1) * t + (d - k * m) * b\\ndef solvefast():\\n\\tif k >= d:\\n\\t\\treturn d * a\\n\\telse:\\n\\t\\tl = 0\\n\\t\\tr = cnt + 2\\n\\t\\twhile r - l > 2:\\n\\t\\t\\tm1 = (l + r) >> 1\\n\\t\\t\\tm2 = m1 + 1\\n\\t\\t\\tif get(m2) > get(m1): r = m2\\n\\t\\t\\telse: l = m1\\n\\t\\tmn = 10 ** 20\\n\\t\\tfor i in range(max(l - 13, 0), min(l + 13, cnt + 3)):\\n\\t\\t\\tmn = min(mn, get(i))\\n\\t\\treturn mn\\nprint(solvefast())\\n\", \"#!/usr/bin/env\\tpython\\n#-*-coding:utf-8 -*-\\nimport sys,io,os,math,copy,pickle\\nd,k,a,b,t=list(map(int,input().split()))\\nif d<=k:\\n\\tprint(a*d)\\n\\treturn\\ns=a*k\\nd-=k\\nif t+s>b*k:\\n\\tprint(s+b*d)\\n\\treturn\\ns+=d//k*(t+s)\\nd%=k\\nprint(s+min(b*d,t+a*d))\\n\", \"d,k,a,b,t = map(int,input().split())\\nif(d<=k):\\n    print(a*d)\\nelif(a*k+t>k*b):\\n    print(a*k+(d-k)*b)\\nelse:\\n    s = d%k\\n    x = d//k\\n    if(x>=1):\\n        im = (a*k)*x+t*(x-1)\\n    else:\\n        im = 0\\n    aaa = t+a*s\\n    bbb = s*b\\n    im += min(aaa,bbb)\\n    print(im)\", \"d, k, a, b, t = [int(x) for x in input().split()]\\nN = d // k\\np = d % k\\n\\nif (N == 0): T = d * a\\nif (N == 1):\\n    if (p * b < t + p * a):\\n        T = p * b + k * a\\n    else:\\n        T = t + p * a + k * a\\n        \\nif (N > 1):\\n    if (b * k < t + a * k):\\n        T = k * a + (d - k) * b\\n    else:\\n        if (b * p < t + a * p):\\n            T = (N * k) * a + (N - 1) * t + p * b\\n        else:\\n            T = (N * k) * a + N * t + p * a\\n            \\nprint(T)\\n\", \"'''\\nCreated on Jul 29, 2016\\n\\n@author: Md. Rezwanul Haque\\n'''\\nimport sys\\nd,k,a,b,t = list(map(int,input().split()))\\n\\nmn = 10000000000000\\n\\nif d<=k:\\n    print(a*d)\\n    return\\n    \\ns = a*k \\nd -= k \\n\\nif t+s>b*k:\\n    print(s+b*d)\\n    return\\n    \\ns+=d//k*(t+s)\\nd%=k\\n\\nprint(s+min(d*b, t+d*a))    \\n'''\\nwhile(d!=0):\\n    t1 = k*a\\n    mn = min(mn, t1)\\n    d-=k'''\\n    \\n\", \"d, k, a, b, t = map(int, input().split(' '))\\n\\ncyc = (d+k-1)//k\\nalldrive = d*a+t*(cyc-1)\\nallwalk = d*b\\nminn = min(alldrive, allwalk)\\nif ((d+k-1)//k <= 10):\\n    for x in range(1, (d+k-1)//k):\\n        time = (x*k*a+(x-1)*t+b*(d-x*k))\\n        minn = min(minn, time)\\nelse:\\n    for x in [1, (d+k-1)//k-1]:\\n        time = (x*k*a+(x-1)*t+b*(d-x*k))\\n        minn = min(minn, time)\\n        \\nprint(minn)\", \"d, k, a, b, t = list(map(int, input().split(' ')))\\n\\ncyc = (d+k-1)//k\\nalldrive = d*a+t*(cyc-1)\\nallwalk = d*b\\nminn = min(alldrive, allwalk)\\nif ((d+k-1)//k <= 10):\\n    for x in range(1, (d+k-1)//k):\\n        time = (x*k*a+(x-1)*t+b*(d-x*k))\\n        minn = min(minn, time)\\nelse:\\n    for x in [1, (d+k-1)//k-1]:\\n        time = (x*k*a+(x-1)*t+b*(d-x*k))\\n        minn = min(minn, time)\\n        \\nprint(minn)\\n\", \"\\n\\ndef easy(vals):\\n    d = int(vals[0])\\n    k = int(vals[1])\\n    a = int(vals[2])\\n    b = int(vals[3])\\n    t = int(vals[4])\\n    if d <= k:\\n        return d*a\\n    sofar = k*a\\n    left = d-k\\n    if b*k < a*k + t:\\n        return sofar + left*b\\n    if left > k:\\n        sofar = sofar + (left//k)*(a*k + t)\\n        left = left % k\\n    if left*b <= left*a + t:\\n        return sofar + left*b\\n    return sofar + left*a + t\\n\\n\\nvals = input().split()\\nprint(easy(vals))\\n\", \"d,k,a,b,t = map(int,input().split())\\n\\nif d <= k:\\n    print(d*a)\\nelif t + k*a > k*b:\\n    print(k*a + (d-k)*b)\\nelse:\\n    cnt = d//k\\n    s = k * a\\n    dd = d % k\\n    ans =  (cnt * s) + ((cnt - 1) * t) + min(t + (dd * a), dd * b)\\n    print(ans)\", \"d,k,a,b,t = map(int,input().split())\\n\\nif d <= k:\\n    print(d*a)\\nelif t + k*a > k*b:\\n    print(k*a + (d-k)*b)\\nelse:\\n    cnt = d//k\\n    s = k * a\\n    dd = d % k\\n    ans =  (cnt * s) + ((cnt - 1) * t) + min(t + (dd * a), dd * b)\\n    print(ans)\", \"from sys import stdin, stdout\\nd, k, a, b, t = map(int, stdin.readline().split())\\nans = 0\\nif k * b > k * a + t:\\n    if k < d:\\n        ans += (d // k - 1) * t + (d - (d % k)) * a\\n        d %= k\\n        if d * a + t < d * b:\\n            ans += d * a + t\\n        else:\\n            ans += d * b\\n    else:\\n        ans += a * d\\nelse:\\n    if k < d:\\n        ans = (d - k) * b + k * a\\n    else:\\n        ans = d * a\\n\\nstdout.write(str(ans))\", \"d, k, a, b, t = [int(x) for x in input().split()]\\nif (d <= k):\\n    print(a*d)\\n    return\\nfir = a*k + t - k*b\\nsec = d*b - k*b + a*k;\\nmaxc = d // k - 1;\\nfor x in range(maxc-10, maxc+10):\\n    if (k*(x + 1) <= d):\\n        maxc = x\\nc = maxc\\nprint(min(c*t+c*a*k+k*a+t+a*(d-c*k-k),min(sec, maxc*fir + sec)))\", \"d, k, a, b, t = list(map(int, input().split()))\\n\\n\\nif a >= b:\\n    print(b * d)\\nelif k >= d:\\n    print(a * d)\\n\\nelif a*k + t <= b * k:\\n    interval = d // k\\n    if d % k == 0:\\n        interval -= 1\\n    #print(interval, a * d + interval * t, a * (d - (d % k)) + interval * t  + (d % k) * b)\\n    print(min(a * d + interval * t, a * (d - (d % k)) + ((d // k) - 1) * t  + (d % k) * b))\\nelse:\\n    print(k * a + (d-k) *b)\\n\\n\\n\", \"d, k, a, b, t = map(int, input().split())\\n\\nif d <= k:\\n    print(a * d)\\n\\nelif t + k * a > k * b:\\n    print(k * a + (d - k) * b)\\n    \\nelse:\\n    cnt = d // k\\n    print(k * cnt * a + (cnt - 1) * t + min(t + (d % k) * a, (d % k) * b))     \", \"def main():\\n    d, k, a, b, t = list(map(int, input().split()))\\n    res = [d * b]\\n    if d // k:\\n        x = d // k * (a * k + t)\\n        res.append(x + d % k * a)\\n        res.append(x - t + d % k * b)\\n        res.append(k * a + (d - k) * b)\\n    else:\\n        res.append(d * a)\\n    print(min(res))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"D, K, A, B, T = list(map(int, input().split()))\\n\\ndef nStops(N):\\n  if (N == 0):\\n    return 0\\n  else:\\n    return (N - 1)//K\\n\\ncase1 = D * B\\ncase2 = A * D + T * nStops(D)\\nans = min(case1, case2)\\n\\n# Ignorance is the key\\nfor i in range(max(0, D - 1000000), D + 1):\\n  ans = min(ans, A * i + B * (D - i) + T * nStops(i))\\n\\nprint(ans)\\n\", \"d, k, a, b, t = [int(i) for i in input().split()]\\n\\nif k >= d :\\n    print(a * d)\\nelse :\\n    if a * k + t >= b * k :\\n        print(a * k + b * (d - k))\\n    else :\\n        if d % k == 0 :\\n            print((d // k - 1) * t + a * d)\\n        else :\\n            print(min((d // k) * t + a * d, (d // k - 1) * t + (d - d % k) * a + (d % k) * b))\\n\", \"d, k, a, b, t = list(map(int, input().split()))\\n\\ndef main():\\n    if d <= k:\\n        #print(\\\"case 0\\\")\\n        return d*a\\n    else:\\n        ans = a*k\\n        p = k\\n        if (b*k <= t + k*a):\\n            #print(\\\"case 1\\\")\\n            ans += (d - k)*b\\n        else:\\n            #print(\\\"case 2\\\")\\n            pp = (d - k)//k\\n            p += pp*k\\n            ans += pp*(t + k*a)\\n            if (d-p)*b < t + (d-p)*a:\\n                ans += (d-p)*b\\n            else:\\n                ans += t + (d-p)*a\\n        return ans\\n\\nprint(main())\\n\", \"# class Solution:\\n#     def threeSum(self, nums):\\n#         \\\"\\\"\\\"\\n#         :type nums: List[int]\\n#         :rtype: List[List[int]]\\n#         \\\"\\\"\\\"\\n\\nd, k, a, b, t = [int(x) for x in input().split()]\\n\\nif d <= k:\\n    print(d*a)\\nelse:\\n    left = 0\\n    right = (d//k) + 1\\n    if k*b-k*a-t>0:\\n        left = (d*(b - a) - ((d//k) + 1)*t) / (k*b - k*a - t)\\n    elif k*b-k*a-t<0:\\n        right = (d*(b - a) - ((d//k) + 1)*t) / (k*b - k*a - t)\\n    N = int(right)\\n    M = int(left) + 1\\n    if M >= N:\\n        print(d*a + (d//k)*t)\\n    else:\\n        if not N < right:\\n            N = N -1\\n        if N > left and M < right:\\n            A = (N-1)*t + N*k*a + (d - N*k)*b\\n            B = (M-1)*t + M*k*a + (d - M*k)*b\\n            print(min(A, B))\\n        else:\\n            if N > left:\\n                print((N-1)*t + N*k*a + (d - N*k)*b)\\n            if M < right:\\n                print((M-1)*t + M*k*a + (d - M*k)*b)\\n\", \"# class Solution:\\n#     def threeSum(self, nums):\\n#         \\\"\\\"\\\"\\n#         :type nums: List[int]\\n#         :rtype: List[List[int]]\\n#         \\\"\\\"\\\"\\n\\nd, k, a, b, t = [int(x) for x in input().split()]\\n\\nif d <= k:\\n    print(d*a)\\nelse:\\n    left = 0\\n    right = (d//k) + 1\\n    if k*b-k*a-t>0:\\n        left = (d*(b - a) - ((d//k) + 1)*t) / (k*b - k*a - t)\\n    elif k*b-k*a-t<0:\\n        right = (d*(b - a) - ((d//k) + 1)*t) / (k*b - k*a - t)\\n    N = int(right)\\n    M = int(left) + 1\\n    if M >= N:\\n        print(d*a + (d//k)*t)\\n    else:\\n        if not N < right:\\n            N = N -1\\n        if N > left and M < right:\\n            A = (N-1)*t + N*k*a + (d - N*k)*b\\n            B = (M-1)*t + M*k*a + (d - M*k)*b\\n            print(min(A, B))\\n        else:\\n            if N > left:\\n                print((N-1)*t + N*k*a + (d - N*k)*b)\\n            if M < right:\\n                print((M-1)*t + M*k*a + (d - M*k)*b)\\n\", \"d, k, a, b, t = map(int, input().split())\\nif k <= d:\\n    ans = a * k + (d // k - 1) * min((t + a * k), b * k) + min((d % k) * a + t, (d % k) * b)\\n    print(ans)\\nelse:\\n    print(d * a)\", \"#!/usr/bin/env\\tpython\\n#-*-coding:utf-8 -*-\\nd,k,a,b,t=list(map(int,input().split()))\\nif d<=k:\\n\\tprint(a*d)\\n\\treturn\\ns=a*k\\nd-=k\\nif b*k<=t+s:\\n\\tprint(s+b*d)\\n\\treturn\\ns+=d//k*(t+s)\\nd%=k\\nprint(s+min(b*d,t+a*d))\\n\", \"'''input\\n5 2 1 4 5\\n'''\\n\\nd, k, a, b, t = list(map(int, input().split()))\\n\\ndist, time = min(d, k), min(d*a, k*a)\\n\\nif dist < d:\\n    tstep = min(t+k*a, k*b)\\n    num_steps = (d-dist) // k\\n    time += num_steps * tstep\\n    dist += num_steps * k\\n\\n    remaining = d - dist\\n    time += min(t + a*remaining, b*remaining)\\nprint(time)\\n\\n\", \"d,k,a,b,t=list(map(int,input().split()))\\nT=0\\nif k>=d:\\n    print(d*a)\\n    return\\nif (t+a*k)>=b*k:\\n    print(k*a+b*(d-k))\\n    return\\nelse:\\n    if (d%k)*a+t<b*(d%k):\\n        T=(d//k)*k*a+(d%k)*a+t*(d//k)\\n    else:\\n        T=(d//k)*k*a+b*(d%k)+t*(d//k-1)\\n    print(T)\\n\"]", "task": "apps", "difficulty": "interview", "split": "test", "transformation_type": "plain_summary"}