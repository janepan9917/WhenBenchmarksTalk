{"qid": 156, "orig_input": "Today, Osama gave Fadi an integer $X$, and Fadi was wondering about the minimum possible value of $max(a, b)$ such that $LCM(a, b)$ equals $X$. Both $a$ and $b$ should be positive integers.\n\n$LCM(a, b)$ is the smallest positive integer that is divisible by both $a$ and $b$. For example, $LCM(6, 8) = 24$, $LCM(4, 12) = 12$, $LCM(2, 3) = 6$.\n\nOf course, Fadi immediately knew the answer. Can you be just like Fadi and find any such pair?\n\n\n-----Input-----\n\nThe first and only line contains an integer $X$ ($1 \\le X \\le 10^{12}$).\n\n\n-----Output-----\n\nPrint two positive integers, $a$ and $b$, such that the value of $max(a, b)$ is minimum possible and $LCM(a, b)$ equals $X$. If there are several possible such pairs, you can print any.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n1 2\n\nInput\n6\n\nOutput\n2 3\n\nInput\n4\n\nOutput\n1 4\n\nInput\n1\n\nOutput\n1 1", "input": "Find two positive integers with the smallest maximum value whose least common multiple equals the given input.", "test_cases": {"inputs": ["2\n", "6\n", "4\n", "1\n", "24\n", "200560490130\n", "999999999989\n", "1000000000000\n", "999966000289\n", "991921850317\n", "997167959139\n", "244641009859\n", "483524125987\n", "726702209411\n", "965585325539\n", "213058376259\n", "690824608515\n", "551519879446\n", "179452405440\n", "665808572289\n", "438282886646\n", "451941492387\n", "934002691939\n", "375802030518\n", "614685146646\n", "857863230070\n", "101041313494\n", "344219396918\n", "583102513046\n", "821985629174\n", "69458679894\n", "308341796022\n", "418335521569\n", "904691688417\n", "147869771841\n", "386752887969\n", "629930971393\n", "873109054817\n", "111992170945\n", "355170254369\n", "946248004555\n", "185131120683\n", "432604171403\n", "671487287531\n", "914665370955\n", "157843454379\n", "401021537803\n", "639904653932\n", "878787770060\n", "126260820780\n", "713043603670\n", "956221687094\n", "199399770518\n", "681460970070\n", "924639053494\n", "167817136918\n", "406700253046\n", "645583369174\n", "893056419894\n", "484134170081\n", "723017286209\n", "966195369633\n", "205078485761\n", "452551536481\n", "691434652609\n", "934612736033\n", "173495852161\n", "416673935585\n", "659852019009\n", "287784545004\n", "526667661132\n", "769845744556\n", "8728860684\n", "256201911404\n", "495085027532\n", "738263110956\n", "981441194380\n", "220324310508\n", "463502393932\n", "54580144118\n", "2038074743\n", "252097800623\n", "518649879439\n", "963761198400\n"], "outputs": ["1 2\n", "2 3\n", "1 4\n", "1 1\n", "8 3\n", "448630 447051\n", "1 999999999989\n", "4096 244140625\n", "1 999966000289\n", "1 991921850317\n", "1043317 955767\n", "15703 15579253\n", "1967 245818061\n", "623971 1164641\n", "163 5923836353\n", "3 71019458753\n", "45 15351657967\n", "142 3883942813\n", "429120 418187\n", "8043 82781123\n", "652531 671666\n", "427623 1056869\n", "23 40608812693\n", "438918 856201\n", "6 102447524441\n", "1040215 824698\n", "176374 572881\n", "2 172109698459\n", "2 291551256523\n", "2 410992814587\n", "6 11576446649\n", "234 1317699983\n", "119 3515424551\n", "576747 1568611\n", "314347 470403\n", "147 2630972027\n", "16938637 37189\n", "5981551 145967\n", "459005 243989\n", "7 50738607767\n", "1855 510106741\n", "213 869160191\n", "2083223 207661\n", "389527 1723853\n", "105 8711098771\n", "382083 413113\n", "583081 687763\n", "1004 637355233\n", "1274860 689321\n", "22380 5641681\n", "1056710 674777\n", "1024054 933761\n", "12662 15747889\n", "910590 748373\n", "598 1546219153\n", "94606 1773853\n", "2 203350126523\n", "7222 89391217\n", "102 8755455097\n", "1186583 408007\n", "528287 1368607\n", "39 24774240247\n", "185921 1103041\n", "11 41141048771\n", "1005947 687347\n", "89 10501266697\n", "1 173495852161\n", "309655 1345607\n", "2104677 313517\n", "482119 596916\n", "214836 2451487\n", "1229116 626341\n", "348 25082933\n", "4 64050477851\n", "53932 9179801\n", "4956 148963501\n", "438980 2235731\n", "12 18360359209\n", "2372 195405731\n", "2 27290072059\n", "1 2038074743\n", "1 252097800623\n", "1 518649879439\n", "969408 994175\n"]}, "solutions": "[\"import math\\nx = int(input())\\n\\nans = 10**13\\nab = [1, 1]\\nfor i in range(1, int(x**(1/2))+1):\\n    if x % i == 0:\\n        a = x//i\\n        b = i\\n\\n        g = math.gcd(a, b)\\n        a *= g\\n        b *= g\\n        if ans > max(a, b):\\n            ans = max(a, b)\\n            ab = [a, b]\\n\\nprint(ab[0], ab[1])\\n\", \"import math\\n\\ndef lcm(a,b):\\n    g = math.gcd(max(a,b),min(a,b))\\n    return a*b//g\\n\\ndef main():\\n    x = int(input())\\n    facts = []\\n    for i in range(1,int(x**0.5)+1):\\n        if x%i == 0:\\n            facts.append([i,x//i])\\n\\n    min_val = float('inf')\\n    a = -1\\n    b = -1\\n    for i in facts:\\n        if max(i) < min_val and lcm(i[0],i[1]) == x:\\n            min_val = max(i)\\n            a = i[0]\\n            b = i[1]\\n\\n    print(a,b)\\n\\nmain()\\n\", \"from bisect import bisect_left\\n\\n\\ndef gcd(a, b):\\n    while(b):\\n        a %= b\\n        a, b = b, a  # Swap para tener el mas chico en b\\n    return a\\n\\n\\ndef divisors(n):\\n    d = []\\n    for i in range(1, int(n**0.5)+1):\\n        if (n % i == 0):\\n            d.append(i) if(i*i == n) else d.extend([i, n//i])\\n    return list(sorted(d))\\n\\n\\ndef solve():\\n    n = int(input())\\n    if n == 1:\\n        print(1, 1)\\n        return\\n    for i in divisors(n):\\n        if i*i <= n or gcd(i, n//i) > 1:\\n            continue\\n        else:\\n            print(n//i, i)\\n            return\\n\\n\\nsolve()\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nx=int(input())\\ny=x\\nANS=x+1\\nAX=[0,0]\\n\\nimport math\\nL=int(math.sqrt(x))\\n\\nFACT=dict()\\n\\nfor i in range(2,L+2):\\n    while x%i==0:\\n        FACT[i]=FACT.get(i,0)+1\\n        x=x//i\\n\\nif x!=1:\\n    FACT[x]=FACT.get(x,0)+1\\nx=y\\nLEN=len(FACT)\\nLIST=list(FACT.keys())\\nfor i in range(1<<LEN):\\n    sc=1\\n    for j in range(LEN):\\n        if i & (1<<j) !=0:\\n            sc*=LIST[j]**FACT[LIST[j]]\\n\\n    if ANS>max(sc,x//sc):\\n        ANS=max(sc,x//sc)\\n        AX=[sc,x//sc]\\n\\nprint(*AX)\\n\", \"from math import gcd\\nx=int(input())\\nans=10**18\\nfor i in range(1,int(x**.5)+1):\\n    if x%i==0:\\n        if gcd(i,x//i)==1:\\n            if max(i,x//i)<ans:\\n                ans=max(i,x//i)\\n                w=[i,x//i]\\nprint(*w)\", \"def gcd(a, b):\\n    if(b == 0):\\n        return a\\n    else:\\n        return gcd(b, a % b)\\n\\n\\nn = int(input())\\na, b = 1, n\\nfor i in range(2, n):\\n    if i*i > n:\\n        break\\n    if n % i == 0 and gcd(i, n//i) == 1:\\n        a, b = i, n//i\\nprint(a, b)\\n\", \"from math import gcd\\n\\nx = int(input())\\nfor n in range(int(x**0.5),0,-1):\\n    if x%n == 0 and gcd(n, x//n)==1:\\n        print(n, x//n)\\n        break\\n\"]", "task": "apps", "difficulty": "interview", "split": "test", "transformation_type": "plain_summary"}