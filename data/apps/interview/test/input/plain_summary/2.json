{"qid": 2, "orig_input": "Apart from having lots of holidays throughout the year, residents of Berland also have whole lucky years. Year is considered lucky if it has no more than 1 non-zero digit in its number. So years 100, 40000, 5 are lucky and 12, 3001 and 12345 are not.\n\nYou are given current year in Berland. Your task is to find how long will residents of Berland wait till the next lucky year.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 \u2264 n \u2264 10^9) \u2014 current year in Berland.\n\n\n-----Output-----\n\nOutput amount of years from the current year to the next lucky one.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n1\n\nInput\n201\n\nOutput\n99\n\nInput\n4000\n\nOutput\n1000\n\n\n\n-----Note-----\n\nIn the first example next lucky year is 5. In the second one \u2014 300. In the third \u2014 5000.", "input": "Calculate the number of years until the next year with at most one non-zero digit, given the current year in Berland.", "test_cases": {"inputs": ["4\n", "201\n", "4000\n", "9\n", "10\n", "1\n", "100000000\n", "900000000\n", "999999999\n", "1000000000\n", "9999999\n", "100000001\n", "3660\n", "21\n", "900000001\n", "62911\n", "11\n", "940302010\n", "91\n", "101\n", "1090\n", "987654321\n", "703450474\n", "1091\n", "89\n", "109\n", "190\n", "19\n", "8\n", "482\n", "1\n", "2\n", "3\n", "4\n", "5\n", "6\n", "7\n", "8\n", "9\n", "10\n", "11\n", "12\n", "13\n", "14\n", "15\n", "16\n", "17\n", "18\n", "19\n", "20\n", "21\n", "22\n", "23\n", "24\n", "25\n", "26\n", "27\n", "28\n", "29\n", "30\n", "31\n", "32\n", "33\n", "34\n", "35\n", "36\n", "37\n", "38\n", "39\n", "40\n", "41\n", "42\n", "43\n", "44\n", "45\n", "46\n", "47\n", "48\n", "49\n", "50\n", "51\n", "52\n", "53\n", "54\n", "55\n", "56\n", "57\n", "58\n", "59\n", "60\n", "61\n", "62\n", "63\n", "64\n", "65\n", "66\n", "67\n", "68\n", "69\n", "70\n", "71\n", "72\n", "73\n", "74\n", "75\n", "76\n", "77\n", "78\n", "79\n", "80\n", "81\n", "82\n", "83\n", "84\n", "85\n", "86\n", "87\n", "88\n", "89\n", "90\n", "91\n", "92\n", "93\n", "94\n", "95\n", "96\n", "97\n", "98\n", "99\n", "100\n", "100\n", "100\n", "1000\n", "1000\n", "1000\n", "10000\n", "10000\n", "101\n", "110\n", "1001\n", "1100\n", "1010\n", "10010\n", "10100\n", "102\n", "120\n", "1002\n", "1200\n", "1020\n", "10020\n", "10200\n", "108\n", "180\n", "1008\n", "1800\n", "1080\n", "10080\n", "10800\n", "109\n", "190\n", "1009\n", "1900\n", "1090\n", "10090\n", "10900\n", "200\n", "200\n", "2000\n", "2000\n", "2000\n", "20000\n", "20000\n", "201\n", "210\n", "2001\n", "2100\n", "2010\n", "20010\n", "20100\n", "202\n", "220\n", "2002\n", "2200\n", "2020\n", "20020\n", "20200\n", "208\n", "280\n", "2008\n", "2800\n", "2080\n", "20080\n", "20800\n", "209\n", "290\n", "2009\n", "2900\n", "2090\n", "20090\n", "20900\n", "800\n", "800\n", "8000\n", "8000\n", "8000\n", "80000\n", "80000\n", "801\n", "810\n", "8001\n", "8100\n", "8010\n", "80010\n", "80100\n", "802\n", "820\n", "8002\n", "8200\n", "8020\n", "80020\n", "80200\n", "808\n", "880\n", "8008\n", "8800\n", "8080\n", "80080\n", "80800\n", "809\n", "890\n", "8009\n", "8900\n", "8090\n", "80090\n", "80900\n", "900\n", "900\n", "9000\n", "9000\n", "9000\n", "90000\n", "90000\n", "901\n", "910\n", "9001\n", "9100\n", "9010\n", "90010\n", "90100\n", "902\n", "920\n", "9002\n", "9200\n", "9020\n", "90020\n", "90200\n", "908\n", "980\n", "9008\n", "9800\n", "9080\n", "90080\n", "90800\n", "909\n", "990\n", "9009\n", "9900\n", "9090\n", "90090\n", "90900\n", "92651241\n"], "outputs": ["1\n", "99\n", "1000\n", "1\n", "10\n", "1\n", "100000000\n", "100000000\n", "1\n", "1000000000\n", "1\n", "99999999\n", "340\n", "9\n", "99999999\n", "7089\n", "9\n", "59697990\n", "9\n", "99\n", "910\n", "12345679\n", "96549526\n", "909\n", "1\n", "91\n", "10\n", "1\n", "1\n", "18\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "10\n", "9\n", "8\n", "7\n", "6\n", "5\n", "4\n", "3\n", "2\n", "1\n", "100\n", "100\n", "100\n", "1000\n", "1000\n", "1000\n", "10000\n", "10000\n", "99\n", "90\n", "999\n", "900\n", "990\n", "9990\n", "9900\n", "98\n", "80\n", "998\n", "800\n", "980\n", "9980\n", "9800\n", "92\n", "20\n", "992\n", "200\n", "920\n", "9920\n", "9200\n", "91\n", "10\n", "991\n", "100\n", "910\n", "9910\n", "9100\n", "100\n", "100\n", "1000\n", "1000\n", "1000\n", "10000\n", "10000\n", "99\n", "90\n", "999\n", "900\n", "990\n", "9990\n", "9900\n", "98\n", "80\n", "998\n", "800\n", "980\n", "9980\n", "9800\n", "92\n", "20\n", "992\n", "200\n", "920\n", "9920\n", "9200\n", "91\n", "10\n", "991\n", "100\n", "910\n", "9910\n", "9100\n", "100\n", "100\n", "1000\n", "1000\n", "1000\n", "10000\n", "10000\n", "99\n", "90\n", "999\n", "900\n", "990\n", "9990\n", "9900\n", "98\n", "80\n", "998\n", "800\n", "980\n", "9980\n", "9800\n", "92\n", "20\n", "992\n", "200\n", "920\n", "9920\n", "9200\n", "91\n", "10\n", "991\n", "100\n", "910\n", "9910\n", "9100\n", "100\n", "100\n", "1000\n", "1000\n", "1000\n", "10000\n", "10000\n", "99\n", "90\n", "999\n", "900\n", "990\n", "9990\n", "9900\n", "98\n", "80\n", "998\n", "800\n", "980\n", "9980\n", "9800\n", "92\n", "20\n", "992\n", "200\n", "920\n", "9920\n", "9200\n", "91\n", "10\n", "991\n", "100\n", "910\n", "9910\n", "9100\n", "7348759\n"]}, "solutions": "[\"def main():\\n    s = input()\\n    n = len(s)\\n    t = int(str(int(s[0]) + 1) + '0' * (n - 1))\\n\\n    print(t - int(s))\\n\\nmain()\\n\", \"s = input()\\nx = int(s)\\ny = int(str(int(s[0]) + 1) + '0' * (len(s) - 1))\\nprint(y - x)\", \"n = int(input())\\n\\nfor i in range(0,11):\\n    for j in range(1,10):\\n        m = j*10**i\\n        if (n<m) :\\n            print(m-n)\\n            return\\n\\n\\n\", \"n = int(input())\\ns = str(n)\\ns = str(int(s[0]) + 1) + '0' * (len(s) - 1)\\ns = int(s)\\nprint(s - n)\\n\", \"y = input()\\nly = len(y)\\niy = int(y)\\ntd = iy/(10**(ly-1))\\n#print(ly,iy,td)\\nif(td == 9):\\n    print(10**ly-iy)\\nelse:\\n    print((int(y[0])+1)*(10**(ly-1))-iy)\", \"N = input()\\nprint((int(N[0])+1)*(10**(len(N)-1))-int(N))\\n\", \"def solve(n):\\n    if (n<10):\\n        return 1\\n    a = str(n)\\n    b=int(a[1:])\\n    return 10**(len(a)-1)-b\\n    \\n\\n\\nn = int(input())\\nprint(solve(n))\\n\", \"n = str(int(input())+1)\\nif n.count(\\\"0\\\")+1 == len(n):\\n    print(1)\\nelse:\\n    print((int(n[0])+1)*10**(len(n)-1)-int(n)+1)\\n    \\n\", \"import sys\\nimport math\\n\\nn = int(input())\\ns = n\\nr = 1\\nwhile n // 10  != 0:\\n    n = n // 10\\n    r *= 10 \\nnext  = (s // r + 1) * r\\nprint(next - s)\", \"n=(input())\\ncur=int(n[0])\\npre=str(cur+1)\\nnext=pre+'0'*(len(n)-1)\\nprint(int(next)-int(n))\\n\", \"n = int(input())\\nans = 0\\nprev = 0\\nN = n\\nwhile n:\\n\\ta = n%10\\n\\tn //= 10\\n\\tans += 1\\n\\tprev = a\\nif ans==1:\\n\\tprint(1)\\nelse:\\n\\tprint(((prev+1)*(10**(ans-1)))-N)\\n\", \"x=input()\\nn=int(x)\\nln=len(x)\\ny=int(x[0])\\ny+=1\\ny=y*(10**(ln-1))\\nprint(y-n)\\n\", \"a=int(input())\\nb=a\\nnr=1\\nwhile b>9:\\n    nr*=10\\n    b/=10\\nprint(int(b+1)*int(nr)-int(a))\", \"t=input()\\nl=len(t)\\nprint((int(t[0:1])+1)*(10**(l-1))-int(t))\\n\\n\", \"def main():\\n    n = input()\\n    d = int(n[0])\\n    if d < 9:\\n        year = int(str(d + 1) + '0' * (len(n) - 1))\\n    else:\\n        year = int('1' + '0' * len(n))\\n\\n    print(year - int(n))\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"x = int(input())\\na = x\\nx += 1\\nif len(str(x))-str(x).count('0') <= 1:\\n    b = x;\\nelse:\\n    b = int(str(int(str(x)[0])+1)+'0'*(len(str(x))-1))\\nprint(b-a)\", \"# -*- coding: utf-8 -*-\\n\\nimport sys\\nimport os\\nimport math\\n\\n# input_text_path = __file__.replace('.py', '.txt')\\n# fd = os.open(input_text_path, os.O_RDONLY)\\n# os.dup2(fd, sys.stdin.fileno())\\n\\nn = int(input())\\n\\nif n < 10:\\n    print(1)\\nelse:\\n    s = str(n)\\n    l = len(s)\\n\\n    v = 10 ** (l-1)\\n    w = int(s[1:])\\n\\n    print(v - w)\", \"n = int(input())\\nsize = len(str(n))\\nnum = str(n)[0]\\nres = (int(num) + 1) * 10 ** (size - 1) - n\\nprint(res)\\n\", \"def main():\\n    NUMBERS = [str(i) for i in range(1, 10)]\\n    num = input()\\n    result = ''\\n    if num in NUMBERS:\\n        result = 1\\n        return result\\n    if len(num) == num.count('0') + 1:\\n        result = int(str(int(num[0]) + 1) + num[1:]) - int(num)\\n        return result\\n    result = int(str(int(num[0]) + 1) + (len(num) - 1) * '0') - int(num)\\n    return result\\nprint(main())\", \"n=input()\\ni=len(n)-1\\nt=int(n[0])+1\\nprint(10**i*t-int(n))\", \"n = int(input())\\ny = 1\\nd = 0\\nwhile y <= n:\\n    y += 10**d\\n    if y // 10**(d + 1) == 1:\\n        d += 1\\nprint(y - n)\\n\\n\", \"import math\\n\\nn = int(input())\\n\\np10 = int(math.log10(n + 1))\\np = pow(10, p10)\\nyears = (int(n / p) + 1) * p - n\\n\\nprint(years)\\n\", \"n = input()\\ny = int(n)\\n\\nif y < 10:\\n    print(1)\\nelse:\\n    l = len(n)\\n    f = int(n[0]) + 1\\n    f *= 10 ** (l - 1)\\n    print(f - y)\\n\", \"n = int(input())\\ni = 1\\ncur = n\\nx = 1\\nwhile cur > 0:\\n    a = cur % 10\\n    cur //= 10\\n    x *= 10\\nprint((a+1)*x//10 - n)\"]", "task": "apps", "difficulty": "interview", "split": "test", "transformation_type": "plain_summary"}