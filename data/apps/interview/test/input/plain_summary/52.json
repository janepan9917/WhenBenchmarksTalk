{"qid": 52, "orig_input": "Daniel is organizing a football tournament. He has come up with the following tournament format:   In the first several (possibly zero) stages, while the number of teams is even, they split in pairs and play one game for each pair. At each stage the loser of each pair is eliminated (there are no draws). Such stages are held while the number of teams is even.  Eventually there will be an odd number of teams remaining. If there is one team remaining, it will be declared the winner, and the tournament ends. Otherwise each of the remaining teams will play with each other remaining team once in round robin tournament (if there are x teams, there will be $\\frac{x \\cdot(x - 1)}{2}$ games), and the tournament ends. \n\nFor example, if there were 20 teams initially, they would begin by playing 10 games. So, 10 teams would be eliminated, and the remaining 10 would play 5 games. Then the remaining 5 teams would play 10 games in a round robin tournament. In total there would be 10+5+10=25 games.\n\nDaniel has already booked the stadium for n games. Help him to determine how many teams he should invite so that the tournament needs exactly n games. You should print all possible numbers of teams that will yield exactly n games in ascending order, or -1 if there are no such numbers.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^18), the number of games that should be played.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in \u0421++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\n\n-----Output-----\n\nPrint all possible numbers of invited teams in ascending order, one per line. If exactly n games cannot be played, output one number: -1.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n3\n4\n\nInput\n25\n\nOutput\n20\n\nInput\n2\n\nOutput\n-1", "input": "Given a number of games, determine how many teams can participate in a tournament with elimination rounds followed by a round-robin phase to yield exactly that number of games.", "test_cases": {"inputs": ["3\n", "25\n", "2\n", "1\n", "15\n", "314\n", "524800\n", "5149487579894806\n", "249999998807430810\n", "1000000000000000000\n", "4\n", "5\n", "6\n", "7\n", "8\n", "9\n", "10\n", "11\n", "12\n", "13\n", "14\n", "21\n", "28\n", "36\n", "45\n", "55\n", "78\n", "105\n", "120\n", "136\n", "171\n", "210\n", "255\n", "5460\n", "16383\n", "391170\n", "1906128\n", "576460752303423487\n", "499999999500000000\n", "250000001635857933\n", "999999998765257141\n", "321730048\n", "499999500000\n", "250000000221644371\n", "58819626242454945\n", "672900920488237864\n", "994374468178120050\n", "999971062750901550\n", "999999912498231750\n", "999999943610929003\n", "999999995936830020\n", "999999998765257141\n", "999999997351043580\n", "496\n", "3012278988753\n", "20000000100000000\n", "980000156100006216\n", "995460657326506216\n", "38927073\n", "30110278526854603\n", "6882\n", "20263965249\n", "936612417\n", "529914\n", "514948626567892275\n", "514948642805308611\n", "1459321801\n", "16358075516553\n", "1337521996548297\n", "4877709674134636\n", "487738618277701671\n", "487746708154228600\n", "520088094975\n", "32767\n", "131071\n", "1310755\n", "32775625\n", "57819024375\n", "1570397049375\n", "72315871219375\n", "5323259016854625\n", "257957076\n", "5180726200\n", "8355443183554431\n", "58687091686870911\n", "5000000250000000\n", "500000003500000003\n", "178120883702871\n", "266081813928931\n", "9005000239863810\n", "10475010\n", "943414054006932870\n", "431105316312401832\n", "686288770539583120\n", "434351073512812035\n", "305752193461383075\n", "660058820389234315\n", "838795430598031275\n", "270215977642229850\n", "576460752303423490\n", "864691128455135232\n", "402653184\n", "576460752303423487\n", "268435455\n", "530516448\n", "8539349952\n", "4095\n", "7791518261859\n", "72057594037927935\n", "288230376151711743\n", "999999999999999999\n", "4095\n", "500000002500000003\n", "605000000550000000\n", "1099511627775\n", "73687091368435455\n", "965211250482432409\n", "432345564227567616\n", "138485688541650132\n", "4979826519\n", "1125899906842623\n", "1073741823\n", "36028797018963967\n"], "outputs": ["3\n4\n", "20\n", "-1\n", "2\n", "10\n16\n", "-1\n", "1025\n", "-1\n", "1414213558\n", "-1\n", "-1\n", "-1\n", "6\n", "8\n", "-1\n", "-1\n", "5\n", "-1\n", "12\n", "-1\n", "-1\n", "7\n", "14\n", "9\n", "18\n40\n", "11\n", "13\n", "15\n", "30\n", "17\n", "19\n144\n", "21\n120\n", "136\n256\n", "105\n1456\n", "8256\n16384\n", "885\n98176\n", "1953\n121024\n", "576460752303423488\n", "1999999998\n", "2828427124\n", "2828427122\n", "-1\n", "1999998\n", "1414213562\n", "342985791\n", "-1\n", "1410230101\n", "1414193101\n", "1414213501\n", "1414213523\n", "2828427118\n", "2828427122\n", "1414213561\n", "62\n", "4908994\n", "200000001\n", "2800000222\n", "2822000222\n", "35284\n", "981595076\n", "888\n", "1610472\n", "-1\n", "8184\n", "16237416336\n", "32474832672\n", "-1\n", "5856031744\n", "105920063488\n", "-1\n", "8090864197632\n", "-1\n", "-1\n", "32768\n", "131072\n", "-1\n", "32768000\n", "52756480000\n", "1059717120000\n", "21203517440000\n", "212034912256000\n", "257949696\n", "5179965440\n", "3355443233554432\n", "53687091736870912\n", "-1\n", "4000000004\n", "178120883699712\n", "266081813921792\n", "9005000231485440\n", "2096640\n", "943413961980641280\n", "431105315111436288\n", "686288769778712576\n", "434351073436631040\n", "305752193451950080\n", "660058820386488320\n", "838795430597754880\n", "270215977642229760\n", "-1\n", "864691128455135232\n", "402653184\n", "576460752303423488\n", "134225920\n268435456\n", "130284\n16418304\n", "522732\n132779008\n", "91\n2080\n4096\n", "31580232\n1812942290944\n", "36028797153181696\n72057594037927936\n", "144115188344291328\n288230376151711744\n", "-1\n", "91\n2080\n4096\n", "1000000003\n", "1100000001\n", "549756338176\n1099511627776\n", "53687091468435456\n", "-1\n", "432345564227567616\n", "138485688541642752\n", "2368241664\n", "562949970198528\n1125899906842624\n", "536887296\n1073741824\n", "36028797018963968\n"]}, "solutions": "[\"n = int(input())\\nres = set()\\nfor r in range(100):\\n    a = 1\\n    b = 2**(r + 1) - 3\\n    c = -2 * n\\n    d = b * b - 4 * a * c\\n    if d < 0:\\n        continue\\n    le = 0\\n    ri = d\\n    while le < ri:\\n        c = (le + ri) // 2\\n        if c * c < d:\\n            le = c + 1\\n        else:\\n            ri = c\\n    if le * le == d:\\n        if (-b - le) % 4 == 2 and -b - le > 0:\\n            res.add((-b - le) // 2 * 2**r)\\n        if (-b + le) % 4 == 2 and -b + le > 0:\\n            res.add((-b + le) // 2 * 2**r)\\nfor i in sorted(list(res)):\\n    print(i)\\nif not list(res):\\n    print(-1)\\n\", \"def calc(n):\\n    res = 0\\n    while n % 2 == 0:\\n        n //= 2\\n        res += n\\n    return res + n * (n - 1) // 2\\n\\ndef check(n, q):\\n    if 2 ** q - 1 > n:\\n        return None\\n    left = 0\\n    right = 10 ** 10\\n    f = lambda k : k * (k - 1) // 2 + k * (2 ** q - 1)\\n    while left + 1 < right:\\n        mid = (left + right) // 2\\n        if f(mid) <= n:\\n            left = mid\\n        else:\\n            right = mid\\n    count = left * 2**q\\n    if calc(count) == n:\\n        return count\\n    else:\\n        return None\\n\\nn = int(input())\\n\\nans = set()\\n\\n# We want n=k*(k-1)/2 + k*(2^q-1)\\nfor q in range(0, 64):\\n    k = check(n, q)\\n    if k:\\n        ans.add(k)\\n\\nif ans:\\n    for i in sorted(ans):\\n        assert calc(i) == n, \\\"n=%d, i=%d\\\"%(n, i)\\n        print(i)\\nelse:\\n    print(-1)\\n\", \"n = int(input())\\n\\ndef f(k, p):\\n    p = 2 * p - 1\\n    return p * (2 ** k - 1) + p * (p - 1) // 2\\n\\nans = set()\\n\\nfor k in range(65):\\n    l = 0\\n    r = n + 2\\n    while l + 1 < r:\\n        m = (l + r) // 2\\n        if f(k, m) < n:\\n            l = m\\n        else:\\n            r = m\\n    if f(k, r) > n:\\n        continue\\n    while f(k, r + 1) == n:\\n        r += 1\\n    for i in range(l + 1, r + 1):\\n        ans.add(2 ** k * (2 * i - 1))\\n        \\nfor x in sorted(ans):\\n    print(x)\\n    \\nif not ans:\\n    print(-1)\\n\", \"n = int(input())*2\\ndef calc(d):\\n    mi, ma = 1, n\\n    md = 0\\n    while mi != ma:\\n        md = (mi + ma) // 2\\n        if md * (md + d) < n:\\n            mi = md+1\\n        else:\\n            ma = md\\n    return ma if ma*(ma+d) == n and ma%2 else -1\\n\\n\\nd = 1\\nli = []\\nwhile d <= n:\\n    d *= 2\\n    u = calc(d-3)\\n    if u != -1:\\n        li.append(u*d//2)\\nli.sort()\\nif (len(li)):\\n    for d in li:\\n        print(d)\\nelse:\\n    print(-1)\", \"3\\ny=int(input())\\ns=set()\\ne=1\\nfor k in range(0,70):\\n\\tb=2*e-3\\n\\tc=-2*y\\n\\td=b*b-4*c\\n\\tif d>=0:\\n\\t\\tL=0\\n\\t\\tR=d\\n\\t\\twhile True:\\n\\t\\t\\tM=(L+R+1)//2\\n\\t\\t\\tif L==R:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tMM=M*M\\n\\t\\t\\tif MM>d:\\n\\t\\t\\t\\tR=M-1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tL=M\\n\\t\\tif M*M==d:\\n\\t\\t\\tx=-b+M\\n\\t\\t\\tif x>0 and x%2==0:\\n\\t\\t\\t\\tx//=2\\n\\t\\t\\t\\tif x%2==1:\\n\\t\\t\\t\\t\\ts.add(x*e)\\n\\t\\t\\tx=-b-M\\n\\t\\t\\tif x>0 and x%2==0:\\n\\t\\t\\t\\tx//=2\\n\\t\\t\\t\\tif x%2==1:\\n\\t\\t\\t\\t\\ts.add(x*e)\\n\\te<<=1\\ny=True\\nfor x in sorted(s):\\n\\tprint(x)\\n\\ty=False\\nif y:\\n\\tprint(-1)\", \"n = int(input())\\nsucc = False;\\nfor ii in range(0, 100):\\n\\ti = 2 ** ii\\n\\tl = 1\\n\\tr = 2 ** 100\\n\\twhile l < r:\\n\\t\\tmid = (l+r)//2\\n\\t\\tx = 2 * mid - 1\\n\\t\\tv = x*((x-1)//2+i-1)\\n\\t\\tif v == n:\\n\\t\\t\\tsucc = True\\n\\t\\t\\tprint(x*i)\\n\\t\\t\\tbreak\\n\\t\\telif v < n:\\n\\t\\t\\tl = mid + 1\\n\\t\\telse:\\n\\t\\t\\tr = mid\\nif not succ:\\n\\tprint(\\\"-1\\\")\\n\", \"import math\\nfrom fractions import Decimal\\nfrom decimal import *\\ngetcontext().prec = 100\\nx=Decimal(input())\\ndef tows(n):\\n    ans=Decimal(0)\\n    while(n>0):\\n        ans+=Decimal(2**n)\\n        n-=1\\n    return ans\\nk=True\\nanswer=[]\\nfor n in range(100,-1,-1):\\n    d=tows(n)\\n    b=(d -1)\\n    ans=[]\\n    s=Decimal(Decimal(b**2)+Decimal(8*x))\\n    s=s.sqrt()\\n    h=Decimal(-b/2)\\n    ans.append(h + s/2)\\n    ans.append(h - s/2)\\n    for item in ans:\\n        if(item <1 or item%2!=1):\\n            continue\\n        answer.append(item*(2**(n)))\\n        k=False\\nif(k):\\n    print(-1)\\nanswer.sort()\\nfor item in answer:\\n    print(int(item))\\n    \\n\", \"def cc(res):\\n    l = 1\\n    r = res\\n    while l<=r:\\n        mid = l+r >>1\\n        if mid*mid==res:\\n            return mid\\n        elif mid*mid>res:\\n            r = mid-1\\n        else:\\n            l = mid+1\\n    return -1\\n\\n\\ndef solve(a,b,c):\\n    if b*b-4*a*c<0:\\n        return -1\\n    r = cc(b*b-4*a*c)\\n    \\n    if r*r!=b*b-4*a*c:\\n        return -1\\n    \\n    r = -b+r\\n    if r%(2*a)!=0:\\n        return -1\\n    return int(r/2/a)\\n\\n\\nn = int(input())\\ntmp = []\\nfor i in range(0,100):\\n    now = 1<<(i+1)\\n    ans = solve(1,now-3,-2*n)\\n    if ans!=-1 and ans%2==1:\\n        tmp.append( int(ans*now/2) )\\n\\ntmp.sort()\\npre = -1\\nfor i in tmp:\\n    if i!=pre:\\n        print(i)\\n    pre = i\\nif pre ==-1:\\n    print(-1)\\n\\n\", \"n = int(input())\\nf = 0\\n\\nfor p in range(63):\\n  N = 1 << (p+1)\\n  l = 0\\n  h = n\\n  while h >= l:\\n    m = (l+h)//2\\n    x = m*2+1\\n    res = x*(x+N-3)\\n    if res == n*2:\\n      print(x*(1 << p))\\n      f = 1\\n      break\\n    elif res > n*2:\\n      h = m-1\\n    else:\\n      l = m+1\\n\\nif f==0:\\n  print(-1)\\n\", \"f=n=int(input())\\nN=1\\nwhile N<=n*2:\\n l,h=0,n\\n while h>=l:\\n  m=(l+h)//2\\n  r=(m*2+1)*(m+N-1)\\n  if r>n:h=m-1\\n  elif r<n:l=m+1\\n  else:\\n   print(m*2*N+N)\\n   f=0\\n   break\\n N*=2\\nif f:print(-1)\", \"n = int(input())\\n\\ndef f(t, k):\\n\\treturn t*(t-1)//2 + t*((1<<k)-1)\\n\\nans = set()\\nfor k in range(60):\\n\\tl = 0\\n\\tr = n\\n\\tp = 0\\n\\twhile l <= r:\\n\\t\\tt = (l+r)//2\\n\\t\\tif f(t, k) <= n:\\n\\t\\t\\tp = t\\n\\t\\t\\tl = t+1\\n\\t\\telse:\\n\\t\\t\\tr = t-1\\n\\tif p % 2 == 1 and f(p, k) == n:\\n\\t\\tans.add(p * (1<<k))\\n\\nfor x in sorted(ans):\\n\\tprint(x)\\n\\nif not ans:\\n\\tprint(-1)\", \"def f(x, k):\\n    return x * (x - 1) // 2 + ((2 ** k) - 1) * x\\n\\nres = []\\nn = int(input())\\nfor k in range(0, 64):\\n    l = 1\\n    r = 2 ** 100\\n    while l < r:\\n        m = (l + r) // 2\\n        cur = f(m, k)\\n        if cur < n:\\n            l = m + 1\\n        else:\\n            r = m\\n    if f(l, k) != n or l % 2 == 0:\\n        continue\\n    cand = (2 ** k) * l\\n    if not (cand in res):\\n        res.append(cand)\\nif len(res) == 0:\\n    res.append(-1)\\nfor x in sorted(res):\\n    print(x)\\n\", \"N =int(input())\\n\\ne =1\\nB =False\\nwhile True:\\n\\ta =1\\n\\tb =N+1\\n\\tif a*(a-3)//2+e*a > N: break\\n\\twhile b-a > 1:\\n\\t\\tc =(b+a)//2\\n\\t\\tif e*c+c*(c-3)//2 <= N: a =c\\n\\t\\telse: b =c\\n#\\tprint(a)\\n\\tif (a%2 != 0) & (e*a+a*(a-3)//2 == N): \\n\\t\\tB =True\\n\\t\\tprint(a*e)\\n\\te *=2\\nif B == False: print(-1)\\n\", \"n = int(input()) + 1\\nb, p = 1, []\\nwhile b < n + 1:\\n    d = (2 * b - 1) ** 2 + 8 * (n - b)\\n    s = int(d ** 0.5)\\n    s += int((d // s - s) // 2)\\n    if s * s == d:\\n        a = s - (2 * b - 1)\\n        if a % 4 == 0: p.append(b * (a // 2 + 1))\\n    b *= 2\\nprint('\\\\n'.join(map(str, p)) if p else '-1')\", \"n = int(input())\\n\\ndef f(k, p):\\n    p = 2 * p - 1\\n    return p * (2 ** k - 1) + p * (p - 1) // 2\\n\\nans = set()\\n\\nfor k in range(65):\\n    l = 0\\n    r = n + 2\\n    while l + 1 < r:\\n        m = (l + r) // 2\\n        if f(k, m) < n:\\n            l = m\\n        else:\\n            r = m\\n    if f(k, r) > n:\\n        continue\\n    while f(k, r + 1) == n:\\n        r += 1\\n    for i in range(l + 1, r + 1):\\n        ans.add(2 ** k * (2 * i - 1))\\n        \\nfor x in sorted(ans):\\n    print(x)\\n    \\nif not ans:\\n    print(-1)\\n\", \"f=n=int(input())\\nN=1\\nwhile N<=n*2:\\n l,h=0,n\\n while h>=l:\\n  m=(l+h)//2\\n  r=(m*2+1)*(m+N-1)\\n  if r>n:h=m-1\\n  elif r<n:l=m+1\\n  else:\\n   print(m*2*N+N)\\n   f=0\\n   break\\n N*=2\\nif f:print(-1)\", \"f=n=int(input())\\nN=1\\nwhile N<=n*2:\\n l,h=0,n\\n while h>=l:\\n  m=(l+h)//2\\n  r=(m*2+1)*(m+N-1)\\n  if r>n:h=m-1\\n  elif r<n:l=m+1\\n  else:\\n   print(m*2*N+N)\\n   f=0\\n   break\\n N*=2\\nif f:print(-1)\", \"from decimal import *\\n\\ndef is_int(d):\\n    return d == int(d)\\n\\ngetcontext().prec=40\\nn=Decimal(input())\\nl=[]\\np2=Decimal(1)\\nfor i in range(70):\\n\\td=9+8*n+4*(p2**2)-12*p2\\n\\tx=(3-2*p2+d.sqrt())/2\\n\\tif(is_int(x)):\\n\\t\\tif(x%2==1):\\n\\t\\t\\tl.append(p2*x)#l.append((p2+(x+1)/2)*x)\\n\\tp2=p2*2\\nl.sort()\\nif len(l)==0:\\n\\tprint(-1)\\nelse:\\n\\tfor i in l:\\n\\t\\tprint(int(i))\", \"n = int(input())\\nans = []\\nfor i in range(0, 64):\\n\\ty = 2 ** i\\n\\tdeter = (y - 3) ** 2 + (4 * 2 * n)\\n\\tif deter >= 0:\\n\\t\\tsqrt = int(pow(deter, .5))\\n\\t\\twhile(sqrt * sqrt < deter):\\n\\t\\t\\tsqrt += 1\\n\\t\\twhile(sqrt * sqrt > deter):\\n\\t\\t\\tsqrt -= 1\\n\\t\\tif(sqrt * sqrt == deter):\\n\\t\\t\\tev1 = 3 - y + sqrt\\n\\t\\t\\tif(ev1 % 2 == 0):\\n\\t\\t\\t\\tev1 /= 2\\n\\t\\t\\t\\tif(ev1 > 0 and ev1 % 2 == 1):\\n\\t\\t\\t\\t\\tfor j in range(0, i):\\n\\t\\t\\t\\t\\t\\tev1 *= 2\\n\\t\\t\\t\\t\\tans.append(ev1 / 2);\\n\\n\\t\\t\\tev1 = 3 - y - sqrt\\n\\t\\t\\tif(ev1 % 2 == 0):\\n\\t\\t\\t\\tev1 /= 2\\n\\t\\t\\t\\tif(ev1 > 0 and ev1 % 2 == 1):\\n\\t\\t\\t\\t\\tfor j in range(0, i):\\n\\t\\t\\t\\t\\t\\tev1 *= 2\\n\\t\\t\\t\\t\\tans.append(ev1 / 2);\\nfor i in sorted(ans):\\n\\tprint(int(i))\\nif not len(ans):\\n\\tprint(-1)\"]", "task": "apps", "difficulty": "interview", "split": "test", "transformation_type": "plain_summary"}
