{"qid": 4045, "orig_input": "You are given two strings $s$ and $t$ both of length $2$ and both consisting only of characters 'a', 'b' and 'c'.\n\nPossible examples of strings $s$ and $t$: \"ab\", \"ca\", \"bb\".\n\nYou have to find a string $res$ consisting of $3n$ characters, $n$ characters should be 'a', $n$ characters should be 'b' and $n$ characters should be 'c' and $s$ and $t$ should not occur in $res$ as substrings.\n\nA substring of a string is a contiguous subsequence of that string. So, the strings \"ab\", \"ac\" and \"cc\" are substrings of the string \"abacc\", but the strings \"bc\", \"aa\" and \"cb\" are not substrings of the string \"abacc\".\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of characters 'a', 'b' and 'c' in the resulting string.\n\nThe second line of the input contains one string $s$ of length $2$ consisting of characters 'a', 'b' and 'c'.\n\nThe third line of the input contains one string $t$ of length $2$ consisting of characters 'a', 'b' and 'c'.\n\n\n-----Output-----\n\nIf it is impossible to find the suitable string, print \"NO\" on the first line. \n\nOtherwise print \"YES\" on the first line and string $res$ on the second line. $res$ should consist of $3n$ characters, $n$ characters should be 'a', $n$ characters should be 'b' and $n$ characters should be 'c' and $s$ and $t$ should not occur in $res$ as substrings.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n2\nab\nbc\n\nOutput\nYES\nacbbac\n\nInput\n3\naa\nbc\n\nOutput\nYES\ncacbacbab\n\nInput\n1\ncb\nac\n\nOutput\nYES\nabc", "input": "You are given two strings $s$ and $t$ both of length $2$ and both consisting only of characters 'a', 'b' and 'c'.\n\nPossible examples of strings $s$ and $t$: \"ab\", \"ca\", \"bb\".\n\nYou have to find a string $res$ consisting of $3n$ characters, $n$ characters should be 'a', $n$ characters should be 'b' and $n$ characters should be 'c' and $s$ and $t$ should not occur in $res$ as substrings.\n\nA substring of a string is a contiguous subsequence of that string. So, the strings \"ab\", \"ac\" and \"cc\" are substrings of the string \"abacc\", but the strings \"bc\", \"aa\" and \"cb\" are not substrings of the string \"abacc\".\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 10^5$) \u2014 the number of characters 'a', 'b' and 'c' in the resulting string.\n\nThe second line of the input contains one string $s$ of length $2$ consisting of characters 'a', 'b' and 'c'.\n\nThe third line of the input contains one string $t$ of length $2$ consisting of characters 'a', 'b' and 'c'.\n\n\n-----Output-----\n\nIf it is impossible to find the suitable string, print \"NO\" on the first line. \n\nOtherwise print \"YES\" on the first line and string $res$ on the second line. $res$ should consist of $3n$ characters, $n$ characters should be 'a', $n$ characters should be 'b' and $n$ characters should be 'c' and $s$ and $t$ should not occur in $res$ as substrings.\n\nIf there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n2\nab\nbc\n\nOutput\nYES\nacbbac\n\nInput\n3\naa\nbc\n\nOutput\nYES\ncacbacbab\n\nInput\n1\ncb\nac\n\nOutput\nYES\nabc", "test_cases": {"inputs": ["2\nab\nbc\n", "3\naa\nbc\n", "1\ncb\nac\n", "1\nab\ncb\n", "3\nbb\ncb\n", "4\naa\nbb\n", "4\naa\nbc\n", "4\nbc\nca\n", "10\naa\naa\n", "10\nac\nab\n", "10\nbb\nbc\n", "20\nca\nab\n", "20\ncc\nac\n", "20\nab\nbb\n", "100\nab\nac\n", "100\naa\nba\n", "100\nbc\nbb\n", "1\nca\nba\n", "2\nbc\nca\n", "1\nab\nbb\n", "2\ncb\nab\n", "1\nba\ncc\n", "2\naa\nca\n", "1\nba\nba\n", "2\nac\naa\n", "1\ncc\ncb\n", "2\nbb\nab\n", "1\nac\ncc\n", "2\ncb\naa\n", "1\nbb\nab\n", "2\nca\nbb\n", "1\nbc\nac\n", "2\naa\nbc\n", "1\ncc\nac\n", "2\nbb\nca\n", "1\nca\nca\n", "2\nba\ncb\n", "3\nac\nbc\n", "10\nac\nca\n", "5\nac\nca\n", "90\nbc\nba\n", "3\nab\nba\n"], "outputs": ["YES\nacbacb\n", "YES\nacbacbacb\n", "YES\nabc\n", "YES\nbac\n", "YES\nabcabcabc\n", "YES\nabcabcabcabc\n", "YES\nacbacbacbacb\n", "YES\nacbacbacbacb\n", "YES\nabcabcabcabcabcabcabcabcabcabc\n", "YES\nbbbbbbbbbbccccccccccaaaaaaaaaa\n", "YES\nacbacbacbacbacbacbacbacbacbacb\n", "YES\nacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n", "YES\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n", "YES\nacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n", "YES\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n", "YES\nabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n", "YES\nacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacb\n", "YES\nabc\n", "YES\nacbacb\n", "YES\nacb\n", "YES\nbbaacc\n", "YES\nabc\n", "YES\nacbacb\n", "YES\nabc\n", "YES\nabcabc\n", "YES\nabc\n", "YES\nacbacb\n", "YES\nabc\n", "YES\nabcabc\n", "YES\nacb\n", "YES\nacbacb\n", "YES\ncab\n", "YES\nacbacb\n", "YES\nabc\n", "YES\nacbacb\n", "YES\nabc\n", "YES\nabcabc\n", "YES\ncccaaabbb\n", "YES\naaaaaaaaaabbbbbbbbbbcccccccccc\n", "YES\naaaaabbbbbccccc\n", "YES\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n", "YES\naaacccbbb\n"]}, "solutions": "[\"n = int(input())\\ns = input()\\nt = input()\\n#n = 1\\n#s2 = [\\\"aa\\\", \\\"ab\\\", \\\"ac\\\", \\\"ba\\\", \\\"bb\\\", \\\"bc\\\", \\\"ca\\\", \\\"cb\\\", \\\"cc\\\"]\\nus = [\\\"abc\\\", \\\"acb\\\", \\\"bac\\\", \\\"bca\\\", \\\"cab\\\", \\\"cba\\\"]\\nflag = 0\\nfor u in us:\\n    if (s in u or t in u):\\n        continue\\n    if (n > 1 and (s in (u[2] + u[0]) or t in (u[2] + u[0]))):\\n        continue\\n    flag = 1\\n    print(\\\"YES\\\")\\n    print(u * n)\\n    return\\n\\nif (not flag):\\n    for u in us:\\n        if (s in u or t in u):\\n            continue\\n        print(\\\"YES\\\")\\n        print(u[0] * n + u[1] * n + u[2] * n)\\n        return\", \"n = int(input())\\na = input()\\nb = input()\\n\\narr = list()\\narr.append('abc' * n)\\narr.append('acb' * n)\\narr.append('a' * n + 'b' * n + 'c' * n)\\narr.append('a' * n + 'c' * n + 'b' * n)\\narr.append('b' * n + 'a' * n + 'c' * n)\\narr.append('b' * n + 'c' * n + 'a' * n)\\narr.append('c' * n + 'a' * n + 'b' * n)\\narr.append('c' * n + 'b' * n + 'a' * n)\\n\\nflag = False\\nfor s in arr:\\n    if s.find(a) == -1 and s.find(b) == -1:\\n        print(\\\"YES\\\")\\n        print(s)\\n        flag = True\\n        break\\nif not flag:\\n    print(\\\"NO\\\")\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}