{"qid": 4047, "orig_input": "You are given $n$ chips on a number line. The $i$-th chip is placed at the integer coordinate $x_i$. Some chips can have equal coordinates.\n\nYou can perform each of the two following types of moves any (possibly, zero) number of times on any chip:\n\n  Move the chip $i$ by $2$ to the left or $2$ to the right for free (i.e. replace the current coordinate $x_i$ with $x_i - 2$ or with $x_i + 2$);  move the chip $i$ by $1$ to the left or $1$ to the right and pay one coin for this move (i.e. replace the current coordinate $x_i$ with $x_i - 1$ or with $x_i + 1$). \n\nNote that it's allowed to move chips to any integer coordinate, including negative and zero.\n\nYour task is to find the minimum total number of coins required to move all $n$ chips to the same coordinate (i.e. all $x_i$ should be equal after some sequence of moves).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of chips.\n\nThe second line of the input contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^9$), where $x_i$ is the coordinate of the $i$-th chip.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum total number of coins required to move all $n$ chips to the same coordinate.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n1\n\nInput\n5\n2 2 2 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example you need to move the first chip by $2$ to the right and the second chip by $1$ to the right or move the third chip by $2$ to the left and the second chip by $1$ to the left so the answer is $1$.\n\nIn the second example you need to move two chips with coordinate $3$ by $1$ to the left so the answer is $2$.", "input": "You are given $n$ chips on a number line. The $i$-th chip is placed at the integer coordinate $x_i$. Some chips can have equal coordinates.\n\nYou can perform each of the two following types of moves any (possibly, zero) number of times on any chip:\n\n  Move the chip $i$ by $2$ to the left or $2$ to the right for free (i.e. replace the current coordinate $x_i$ with $x_i - 2$ or with $x_i + 2$);  move the chip $i$ by $1$ to the left or $1$ to the right and pay one coin for this move (i.e. replace the current coordinate $x_i$ with $x_i - 1$ or with $x_i + 1$). \n\nNote that it's allowed to move chips to any integer coordinate, including negative and zero.\n\nYour task is to find the minimum total number of coins required to move all $n$ chips to the same coordinate (i.e. all $x_i$ should be equal after some sequence of moves).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of chips.\n\nThe second line of the input contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^9$), where $x_i$ is the coordinate of the $i$-th chip.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum total number of coins required to move all $n$ chips to the same coordinate.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\n1\n\nInput\n5\n2 2 2 3 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example you need to move the first chip by $2$ to the right and the second chip by $1$ to the right or move the third chip by $2$ to the left and the second chip by $1$ to the left so the answer is $1$.\n\nIn the second example you need to move two chips with coordinate $3$ by $1$ to the left so the answer is $2$.", "test_cases": {"inputs": ["3\n1 2 3\n", "5\n2 2 2 3 3\n", "3\n2 3 3\n", "3\n1 2 2\n", "30\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n", "1\n11\n", "5\n3 3 1 2 2\n", "1\n1\n", "5\n1 2 2 2 2\n", "10\n10 3 3 1 6 2 1 10 6 6\n", "10\n6 4 7 8 2 10 2 7 9 7\n", "1\n1000000000\n", "10\n5 3 6 4 7 10 4 4 5 5\n", "10\n1 3 5 3 7 2 10 1 2 2\n", "10\n4 3 9 5 7 4 9 5 10 2\n", "8\n1 1 3 4 4 4 5 5\n", "6\n1 1 3 2 2 4\n", "10\n3 5 3 2 9 5 7 7 9 10\n", "1\n5\n", "10\n4 3 9 1 10 8 10 4 4 5\n", "7\n2 2 2 2 2 2 2\n", "7\n2 2 2 2 2 1 1\n", "24\n237531404 337946240 368396518 580132092 598284356 980126300 288588969 882864616 953826728 432441781 190431218 307028298 780298896 105187973 572137068 28148927 321443861 159804462 974759362 862879627 798856599 608157684 797758503 97033491\n", "5\n2 2 1 1 1\n", "8\n2 2 2 2 2 2 1 1\n", "66\n17474 17509 20550 10873 31311 10156 24680 28012 29609 8266 18126 20151 648 2722 13599 9467 8289 17005 1 31436 21443 265 21543 32682 11647 30228 15498 1331 8459 20026 24054 23702 15400 7243 3017 10315 451 22673 6648 30210 27673 27232 4178 13529 23071 28654 8969 23505 27681 14437 5230 21635 5033 9271 25596 32271 23202 24498 28312 23638 9661 11220 25623 18281 30228 10592\n", "1\n2\n", "2\n2 2\n", "2\n3 3\n", "2\n3 2\n", "2\n2 1\n", "1\n643\n", "1\n436\n", "1\n6436\n", "2\n1 1\n", "1\n43643\n", "1\n64366\n", "1\n6043\n", "1\n4306\n", "2\n6043 4306\n", "53\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n"], "outputs": ["1\n", "2\n", "1\n", "1\n", "15\n", "0\n", "2\n", "0\n", "1\n", "4\n", "4\n", "0\n", "5\n", "4\n", "4\n", "3\n", "3\n", "2\n", "0\n", "4\n", "0\n", "2\n", "9\n", "2\n", "2\n", "31\n", "0\n", "0\n", "0\n", "1\n", "1\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "0\n", "1\n", "0\n"]}, "solutions": "[\"n = int(input())\\nA = list(map(int, input().split()))\\nfor i in range(n):\\n    A[i] %= 2\\nprint(min(n - A.count(0), A.count(0)))\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nc = 0\\nfor i in a:\\n    c += (i % 2)\\nprint(min(c, n - c))\", \"n = int(input())\\narr = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(n):\\n    cnt += arr[i] % 2\\nprint(min(cnt, n - cnt))\", \"n = int(input())\\na = list(map(int, input().split()))\\nc = [0, 0]\\nfor i in a:\\n    c[i % 2] += 1\\nprint(min(c))\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\npair = 0\\nimpair = 0\\n\\nfor i in a:\\n    if i % 2:\\n        impair += 1\\n    else:\\n        pair += 1\\n\\nprint(min(pair, impair))\", \"n=int(input())\\nl1=list(map(int,input().split()))\\nx=0\\nfor item in l1:\\n    if item%2==0:\\n        x+=1\\nprint(min(x,n-x))\", \"n = int(input())\\na = list(map(int, input().split()))\\nc1 = 0\\nc2 = 0\\nfor i in range(n):\\n    if a[i] % 2 == 0:\\n        c1 += 1\\n    else:\\n        c2 += 1\\nprint(min(c1, c2))\\n\", \"import math\\ntst = int(input())\\na = list(map(int, input().split()))\\nx = 0\\ny = 0\\nfor c in a:\\n    if c % 2 == 0:\\n        x += 1\\n    else:\\n        y += 1\\nprint(min(x, y))\\n\", \"n = int(input())\\na, b = 0, 0\\nfor x in input().split():\\n    if int(x) % 2 == 0:\\n        a += 1\\n    else:\\n        b += 1\\n\\nprint(min(a, b))\", \"def mi():\\n        return list(map(int, input().split()))\\n'''\\n\\n'''\\nn = int(input())\\na = list(mi())\\nfor i in range(n):\\n    a[i] = a[i]%2\\no = a.count(1)\\nz = n-o\\nprint(min(o,z))\\n\", \"n = int(input())\\n\\nx = [int(i) for i in input().split()]\\n\\nodd = 0\\neven = 0\\n\\nfor i in x:\\n    if i % 2 == 0: even += 1\\n    else: odd += 1\\n        \\nprint(min([odd, even]))\", \"n = int(input())\\nodd = sum(e & 1 for e in map(int, input().split()))\\nprint(min(odd, n - odd))\", \"n = int(input())\\na = list(map(int, input().split()))\\nans_1 = 0\\nans_2 = 0\\nfor i in range(n):\\n\\tif a[i] % 2 == 0:\\n\\t\\tans_1 += 1\\n\\telse:\\n\\t\\tans_2 += 1\\n\\nprint(min(ans_1, ans_2))\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\nj=k=0\\nfor i in l:\\n    if(i%2==1):\\n        j+=1\\n    else:\\n        k+=1\\nprint(min(j,k))\", \"# cook your dish here\\nn=int(input())\\nit=list(map(int,input().split()))\\na=len([i for i in it if i%2==0])\\nb=n-a\\nif a>=b:\\n    print(b)\\nelse:\\n    print(a)\", \"n = int(input())\\na = list(map(int, input().split()))\\nx = len([q for q in a if q % 2 == 0])\\nprint(min(x, n-x))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nodd = 0\\neven = 0\\n\\nfor i in a:\\n    if i % 2 == 0:\\n        even += 1\\n    else:\\n        odd += 1\\n\\nif even > odd:\\n    print(odd)\\nelse:\\n    print(even)\", \"def inp(): return int(input())\\ndef ln(): return [int(x) for x in input().split()]\\n\\nn = inp()\\nx = ln()\\n\\nmn = 10**20\\nfor i in range(n):\\n    # here\\n    cst = 0\\n    for c in x:\\n        cst += 1 if abs(c-x[i]) % 2  == 1 else 0\\n    mn = min(mn, cst)\\nprint(mn)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nch = 0\\nnch = 0\\n\\nfor i in range(n):\\n    if a[i] % 2 == 0:\\n        ch += 1\\n    else:\\n        nch += 1\\n\\nprint(min(ch, nch))\", \"n=int(input())\\na=list(map(int,input().split()))\\ns=0\\ns1=0\\nfor i in range(n):\\n    if a[i]%2==0:\\n        s+=1\\n    else:\\n        s1+=1\\nprint(min(s,s1))\", \"MOD = 10**9 + 7\\nI = lambda:list(map(int,input().split()))\\n\\nn, = I()\\nl = I()\\nans = MOD\\nfor i in range(n):\\n\\tx = l[i]\\n\\tc = 0\\n\\tfor i in l:\\n\\t\\tc += abs(x-i)%2\\n\\tans = min(ans, c)\\nprint(ans)\", \"'''input\\n5\\n2 2 2 3 3\\n\\n'''\\nimport sys\\nfrom collections import defaultdict as dd\\nfrom itertools import  permutations as pp\\nfrom itertools import combinations as cc\\nfrom collections import Counter as ccd\\nfrom random import randint as rd\\nfrom bisect import bisect_left as bl\\nfrom  heapq import heappush as hpush\\nfrom heapq import heappop as hpop\\nmod=10**9+7\\n\\ndef ri(flag=0):\\n\\tif flag==0:\\n\\t\\treturn [int(i) for i in sys.stdin.readline().split()]\\n\\telse:\\n\\t\\treturn int(sys.stdin.readline())\\n\\n\\nn = ri(1)\\n\\na = ri()\\n\\nodd = sum([i%2 for i in a])\\neven = n-odd\\n\\nprint(min(even,odd))\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\ne=0\\no=0\\nfor i in l:\\n\\tif i%2==0:\\n\\t\\te+=1\\n\\telse:\\n\\t\\to+=1\\nprint (min(e,o))\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}