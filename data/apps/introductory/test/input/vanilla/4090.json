{"qid": 4090, "orig_input": "You are given a text consisting of $n$ space-separated words. There is exactly one space character between any pair of adjacent words. There are no spaces before the first word and no spaces after the last word. The length of text is the number of letters and spaces in it. $w_i$ is the $i$-th word of text. All words consist only of lowercase Latin letters.\n\nLet's denote a segment of words $w[i..j]$ as a sequence of words $w_i, w_{i + 1}, \\dots, w_j$. Two segments of words $w[i_1 .. j_1]$ and $w[i_2 .. j_2]$ are considered equal if $j_1 - i_1 = j_2 - i_2$, $j_1 \\ge i_1$, $j_2 \\ge i_2$, and for every $t \\in [0, j_1 - i_1]$ $w_{i_1 + t} = w_{i_2 + t}$. For example, for the text \"to be or not to be\" the segments $w[1..2]$ and $w[5..6]$ are equal, they correspond to the words \"to be\".\n\nAn abbreviation is a replacement of some segments of words with their first uppercase letters. In order to perform an abbreviation, you have to choose at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase). For example, for the text \"a ab a a b ab a a b c\" you can replace segments of words $w[2..4]$ and $w[6..8]$ with an abbreviation \"AAA\" and obtain the text \"a AAA b AAA b c\", or you can replace segments of words $w[2..5]$ and $w[6..9]$ with an abbreviation \"AAAB\" and obtain the text \"a AAAB AAAB c\".\n\nWhat is the minimum length of the text after at most one abbreviation?\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of words in the text.\n\nThe next line contains $n$ space-separated words of the text $w_1, w_2, \\dots, w_n$. Each word consists only of lowercase Latin letters.\n\nIt is guaranteed that the length of text does not exceed $10^5$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum length of the text after at most one abbreviation.\n\n\n-----Examples-----\nInput\n6\nto be or not to be\n\nOutput\n12\n\nInput\n10\na ab a a b ab a a b c\n\nOutput\n13\n\nInput\n6\naa bb aa aa bb bb\n\nOutput\n11\n\n\n\n-----Note-----\n\nIn the first example you can obtain the text \"TB or not TB\".\n\nIn the second example you can obtain the text \"a AAAB AAAB c\".\n\nIn the third example you can obtain the text \"AB aa AB bb\".", "input": "You are given a text consisting of $n$ space-separated words. There is exactly one space character between any pair of adjacent words. There are no spaces before the first word and no spaces after the last word. The length of text is the number of letters and spaces in it. $w_i$ is the $i$-th word of text. All words consist only of lowercase Latin letters.\n\nLet's denote a segment of words $w[i..j]$ as a sequence of words $w_i, w_{i + 1}, \\dots, w_j$. Two segments of words $w[i_1 .. j_1]$ and $w[i_2 .. j_2]$ are considered equal if $j_1 - i_1 = j_2 - i_2$, $j_1 \\ge i_1$, $j_2 \\ge i_2$, and for every $t \\in [0, j_1 - i_1]$ $w_{i_1 + t} = w_{i_2 + t}$. For example, for the text \"to be or not to be\" the segments $w[1..2]$ and $w[5..6]$ are equal, they correspond to the words \"to be\".\n\nAn abbreviation is a replacement of some segments of words with their first uppercase letters. In order to perform an abbreviation, you have to choose at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase). For example, for the text \"a ab a a b ab a a b c\" you can replace segments of words $w[2..4]$ and $w[6..8]$ with an abbreviation \"AAA\" and obtain the text \"a AAA b AAA b c\", or you can replace segments of words $w[2..5]$ and $w[6..9]$ with an abbreviation \"AAAB\" and obtain the text \"a AAAB AAAB c\".\n\nWhat is the minimum length of the text after at most one abbreviation?\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of words in the text.\n\nThe next line contains $n$ space-separated words of the text $w_1, w_2, \\dots, w_n$. Each word consists only of lowercase Latin letters.\n\nIt is guaranteed that the length of text does not exceed $10^5$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum length of the text after at most one abbreviation.\n\n\n-----Examples-----\nInput\n6\nto be or not to be\n\nOutput\n12\n\nInput\n10\na ab a a b ab a a b c\n\nOutput\n13\n\nInput\n6\naa bb aa aa bb bb\n\nOutput\n11\n\n\n\n-----Note-----\n\nIn the first example you can obtain the text \"TB or not TB\".\n\nIn the second example you can obtain the text \"a AAAB AAAB c\".\n\nIn the third example you can obtain the text \"AB aa AB bb\".", "test_cases": {"inputs": ["6\nto be or not to be\n", "10\na ab a a b ab a a b c\n", "6\naa bb aa aa bb bb\n", "45\nxr l pl sx c c u py sv j f x h u y w w bs u cp e ad ib b tz gy lm e s n ln kg fs rd ln v f sh t z r b j w of\n", "250\nf r s d b f f k d e k v m b t k k j t t a o m m s n d w l v g e k x d w k v a j h c a g x s d e t z z w q z d h n r i k b z k u s q l k c v o d o w w c y i a q v r i g i m l b x z h t a i j t h q u e v j o h w m o v k g r r x j a c m z z i s i r a p p i i l e i g m f f f y v k m c l p n n n j j u t t q s o y b t m x n n t z f c g s r f h w z b b d q d y h t v g y e w p l n m f v c s b r g p v w z c o h k u r c g c s v w r t w k z v t v y z i x r f o l e o u q z k x c o l e c b d j v f z y e r k\n", "1\nu\n", "1\nvpdgzvgvgbichiiqdhytvcooetcgeecyueoylqzbtzzgaqhalt\n", "1\nxdhlmtnvecsbwbycahddxnvwpsxwxgfmidfetpkpeevpjzfbgfafbjpyuevupuptoxutnketcxwrllooyxtxjzwxpzcbpiqzeiplcqvdxyyznjxgkwstpxogdihsamoqhyspbjlelxpbarzqawsgidjtmnpmmupohnslirorliapvntasudhpuuxynyoipuqxdiysbyctpmfpbxqfdlmlsmsvtbxoypkbhwrtpwbsbcdhypsbqhqpdlilquppdwsszrpavcowudreygmpwckbzlpnxxqxjdpqmtidjatvgcbxjrpqqxhhsvlpyxxkoqxutsvebrlxqeggvsnshetkpnfygpwbmnuujfvqnlgavwppufxadhxtffsrdknfmqbsjjegcwokbauzivhnldkvykkytkyrwhimmkznkkofcuioqmpbshskvdhsetyidubcgvuerbozqfbkcmaguaszaivtuswzmtnqcpoiqlvronibiqyeoqm\n", "2\nvjrvahvokiudpiocpvoqsqhukavyrckhcbctr prqxizcofrfr\n", "2\nxxwxpgalijfbdbdmluuaubobxztpkfn parzxczfzchinxdtaevbepdxlouzfzaizkinuaufhckjvydmgnkuaneqohcqocfrsbmmohgpoacnqlgspppfogdkkbrkrhdpdlnknjyeccbqssqtaqmyamtkedlhpbjmchfnmwhxepzfrfmlrxrirbvvlryzmulxqjlthclocmiudxbtqpihlnielggjxjmvqjbeozjpskenampuszybcorplicekprqbsdkidwpgwkrpvbpcsdcngawcgeyxsjimalrrwttjjualmhypzrmyauvtothnermlednvjbpgkehxbtbpxolmaapmlcuetghikbgtaspqesjkqwxtvccphjdqpuairsaypfudwvelmupbzhxwuchnfumcxmhflkpyzeppddtczbcjrookncgtojmujyvponennuudppqwwjtnwpgapokwzvbxohrdcvcckzbcrwwvfqlbnwbnmmv\n", "4\ncongratulations for being first\n", "4\njngen hype xfckaovxfckaovxfckaovxfckaovxfckaovfegkbwzxfckaovxfckaovfegkbwzfegkbwzfegkbwzxfckaovxfckaovfegkbwzfegkbwzfegkbwzxfckaovxfckaovfegkbwzfegkbwzfegkbwz fegkbwzxfckaovfegkbwzxfckaovxfckaovxfckaovfegkbwzfegkbwzxfckaovxfckaovxfckaovfegkbwzfegkbwzxfckaovxfckaovxfckaovxfckaovxfckaovxfckaovfegkbwzxfckaov\n", "4\njngen hype acpumodacpumodacpumodulhiwuoulhiwuoulhiwuoacpumodacpumodulhiwuoulhiwuoacpumodulhiwuoacpumodulhiwuoacpumodacpumodulhiwuoacpumodulhiwuoacpumod ulhiwuoulhiwuoacpumodacpumodacpumodulhiwuoulhiwuoacpumodulhiwuoacpumodacpumodacpumodacpumodacpumodulhiwuoulhiwuoulhiwuoulhiwuoacpumodulhiwuo\n", "4\nraraaraaarrraraaaaaaaaaaaaaaaaraaraararaarraarrraaarrarrraaaarrrarrrrraaraaaarrararrarraarrrararaaar arrararaararaarraaaraararraararaarrraarrrarrrrarrraaaaraaraaaaaaaraaararrarararrarrraarrarrrrraaaaar arrararaararaarraaaraararraararaarrraarrrarrrrarrraaaaraaraaaaaaaraaararrarararrarrraarrarrrrraaaaar raraaraaarrraraaaaaaaaaaaaaaaaraaraararaarraarrraaarrarrraaaarrrarrrrraaraaaarrararrarraarrrararaaar\n", "4\njngen hype wlvgjpibylpibylwlvgjpibylwlvgjwlvgjwlvgjwlvgjwlvgjpibylwlvgjwlvgjpibylpibylpibylwlvgjpibylpibyl pibylpibylpibylpibylpibylwlvgjwlvgjpibylwlvgjwlvgjpibylpibylwlvgjwlvgjwlvgjpibylwlvgjpibylwlvgj\n", "29\nqiozjl ghgehr xewbil hwovzr keodgb foobar dvorak barfoo xjjfgm wybwaz jizzzz jizzij tjdqba jiyiqj jizziz inforr icagmg jizjiz tdxtfv jhkhdw pgvlzq qvfpbx ymhmll kzaodh xccnda ugywmk jijizz lkkhfs qwerty\n", "4\naahahhhaaaaaahhaaahaaahahhhahahhhhhhahhahhhhhhahah ahaahahahaaaahahahaaahaaaahhhaaahhahaaahhaahhaaaah ahaahahahaaaahahahaaahaaaahhhaaahhahaaahhaahhaaaah aahahhhaaaaaahhaaahaaahahhhahahhhhhhahhahhhhhhahah\n", "4\naaaahaaahahhaaahaaahaahhhahhaaaaahahaahaahaahhaaha hhahhahhaaahhhhhhhhahhhhahaahhhaahhahhhhaahahhhhaa hhahhahhaaahhhhhhhhahhhhahaahhhaahhahhhhaahahhhhaa aaaahaaahahhaaahaaahaahhhahhaaaaahahaahaahaahhaaha\n", "4\njngen hype flnhgpflnhgpwdxrlvwdxrlvflnhgpwdxrlvflnhgpwdxrlvflnhgpwdxrlvflnhgpflnhgpwdxrlvflnhgpflnhgpflnhgpwdxrlvflnhgp wdxrlvwdxrlvflnhgpwdxrlvflnhgpflnhgpflnhgpwdxrlvflnhgpwdxrlvwdxrlvflnhgpflnhgpwdxrlvflnhgpflnhgpflnhgpflnhgp\n", "40\naanvs aaikp afkib abrzm abnrq aaxdo aaqxz aalhq afhrw aeets acmlb aazzc acphl aanlr abdfc aatdv adfxe abrud acare abbao aauui aacyx aannq aafwd adirh aafiz accgm aalfz aeeac abrja acfkl aabmr aayub aairn acoqw aavlo afgjf aetbp acbbx abmqy\n", "2\nrmdkgswpghuszbnq oveleebkwopbnmbr\n", "2\naisajfcrtzfmrpth fninkxwvnqzjvfdq\n", "40\naclsp aafgb abvlq aazfz aajjt aacts acbfz aawkl abozz aawlg acmre aapqu acodc aaapn aezbx abhjl adhdt aauxj afggb aafbm acbah abgbo abafl aazow acfwx ablad acifb aayly aemkr acsxa aeuzv abvqj actoq aazzc aayye aaxpo advso aanym abtls aahre\n", "4\njngen hypee acpumodacpumodacpumodulhiwuoulhiwuoulhiwuoacpumodacpumodulhiwuoulhiwuoacpumodulhiwuoacpumodulhiwuoacpumodacpumodulhiwuoacpumodulhiwuoacpumod ulhiwuoulhiwuoacpumodacpumodacpumodulhiwuoulhiwuoacpumodulhiwuoacpumodacpumodacpumodacpumodacpumodulhiwuoulhiwuoulhiwuoulhiwuoacpumodulhiwuo\n", "7\na a b a a a b\n", "13\nv w s e n g j m g v g o asdf\n", "2\nxnnlpp jpymdh\n"], "outputs": ["12\n", "13\n", "11\n", "106\n", "495\n", "1\n", "50\n", "500\n", "50\n", "500\n", "31\n", "306\n", "292\n", "205\n", "202\n", "202\n", "105\n", "105\n", "228\n", "239\n", "33\n", "33\n", "239\n", "293\n", "9\n", "28\n", "13\n"]}, "solutions": "[\"n = int(input())\\narr = input()\\nfinal = len(arr)\\narr = arr.split()\\nlens = [0 for x in range(n)]\\nvisit = [0 for x in range(n)]\\ncnt = 0\\nans = 0\\nfor i in range(n):\\n  if visit[i]:\\n    continue\\n  lens[cnt] = len(arr[i])\\n  for j in range(i+1,n):\\n    if arr[j]==arr[i]:\\n      arr[j] = cnt\\n      visit[j] = 1\\n  arr[i] = cnt\\n  cnt += 1\\nfor i in range(n):\\n  for j in range(i,n):\\n    temp = arr[i:j+1]\\n    ind = 1\\n    found = 0\\n    len2 = j-i+1\\n    cur = 0\\n    kmp = [0 for x in range(len2)]\\n    while ind < len2:\\n      if temp[ind] == temp[cur]:\\n        cur += 1\\n        kmp[ind] = cur\\n        ind += 1\\n      else:\\n        if cur != 0:\\n          cur -= 1\\n        else:\\n          kmp[ind] = 0\\n          ind += 1\\n    ind = 0\\n    cur = 0\\n    while ind < n:\\n      if arr[ind] == temp[cur]:\\n        ind += 1\\n        cur += 1\\n      if cur == len2:\\n        found += 1\\n        cur = 0\\n      elif ind < n and temp[cur] != arr[ind]:\\n        if cur != 0:\\n          cur = kmp[cur-1]\\n        else:\\n          ind += 1\\n    if found>1:\\n      res = 0\\n      for k in temp:\\n        res += (lens[k]-1)*(found)\\n      res += (len(temp)-1)*(found)\\n      ans = max(ans,res)\\nprint(final-ans)\", \"# import time\\nN = 303\\neq = []\\ndp = []\\nfor i in range(N):\\n    eq.append([False] * N)\\nfor i in range(N):\\n    dp.append([0] * N)\\nn = int(input())\\ns = input()\\n# t = time.time()\\nallsum = len(s)\\ns = s.split()\\nfor i in range(n):\\n    eq[i][i] = True\\n    for j in range(i):\\n        eq[i][j] = eq[j][i] = s[i] == s[j]\\nfor i in range(n - 1, -1, -1):\\n    for j in range(n - 1, -1, -1):\\n        if eq[i][j]:\\n            if i < n - 1 and j < n - 1:\\n                dp[i][j] = dp[i + 1][j + 1] + 1\\n            else:\\n                dp[i][j] = 1\\nans = allsum\\nfor i in range(n):\\n    su = 0\\n    for j in range(n - i):\\n        su += len(s[i + j])\\n        cnt = 1\\n        pos = i + j + 1\\n        while pos < n:\\n            if dp[i][pos] > j:\\n                cnt += 1\\n                pos += j\\n            pos += 1\\n        cur = allsum - su * cnt + (j + 1) * cnt - j * cnt\\n        if cnt > 1 and ans > cur:\\n            # print(allsum, su, cnt, j)\\n            ans = cur\\nprint(ans)\\n# print(time.time() - t)\\n\", \"# import time\\nN = 303\\neq = []\\ndp = []\\nfor i in range(N):\\n    eq.append([False] * N)\\nfor i in range(N):\\n    dp.append([0] * N)\\nn = int(input())\\ns = input()\\n# t = time.time()\\nallsum = len(s)\\ns = s.split()\\nfor i in range(n):\\n    eq[i][i] = True\\n    for j in range(i):\\n        eq[i][j] = eq[j][i] = s[i] == s[j]\\nfor i in range(n - 1, -1, -1):\\n    for j in range(n - 1, -1, -1):\\n        if eq[i][j]:\\n            if i < n - 1 and j < n - 1:\\n                dp[i][j] = dp[i + 1][j + 1] + 1\\n            else:\\n                dp[i][j] = 1\\nans = allsum\\nfor i in range(n):\\n    su = 0\\n    for j in range(1, n - i + 1):\\n        su += len(s[i + j - 1])\\n        cnt = 1\\n        pos = i + j\\n        while pos < n:\\n            if dp[i][pos] >= j:\\n                cnt += 1\\n                pos += j - 1\\n            pos += 1\\n        cur = allsum - su * cnt + cnt\\n        if cnt > 1 and ans > cur:\\n            # print(allsum, su, cnt, j)\\n            ans = cur\\nprint(ans)\\n# print(time.time() - t)\\n\", \"n = int(input())\\ns = input()\\na = list(s.split())\\neq = [[0 for i in range(n)] for j in range(n)]\\ndp = [[0 for i in range(n)] for j in range(n)]\\nfor i in range(n):\\n    eq[i][i] = 1\\n    for j in range(0, i):\\n        if a[i] == a[j]:\\n            eq[i][j] += 1\\n            eq[j][i] += 1\\nfor i in range(n - 1, -1, -1):\\n    for j in range(n - 1, -1, -1):\\n        if eq[i][j] == 1:\\n            if i < n - 1 and j < n - 1:\\n                dp[i][j] = dp[i + 1][j + 1] + 1\\n            else:\\n                dp[i][j] = 1\\nallsum = n - 1\\nfor k in a:\\n    allsum += len(k)\\nans = allsum\\nfor i in range(n):\\n    sx = 0\\n    j = 0\\n    while i + j < n:\\n        sx += len(a[i + j])\\n        cnt = 1\\n        pos = i + j + 1\\n        while pos < n:\\n            if dp[i][pos] > j:\\n                cnt += 1\\n                pos += j\\n            pos += 1\\n        cur = allsum - sx*cnt + (j + 1)*cnt - j*cnt\\n        if cnt > 1 and ans > cur:\\n            ans = cur\\n        j += 1\\nprint(ans)\", \"import sys\\ninput = sys.stdin.readline\\nn = int(input())\\ns = input()\\na = list(s.split())\\neq = [[0 for i in range(n)] for j in range(n)]\\ndp = [[0 for i in range(n)] for j in range(n)]\\nfor i in range(n):\\n    eq[i][i] = 1\\n    for j in range(0, i):\\n        if a[i] == a[j]:\\n            eq[i][j] += 1\\n            eq[j][i] += 1\\nfor i in range(n - 1, -1, -1):\\n    for j in range(n - 1, -1, -1):\\n        if eq[i][j] == 1:\\n            if i < n - 1 and j < n - 1:\\n                dp[i][j] = dp[i + 1][j + 1] + 1\\n            else:\\n                dp[i][j] = 1\\nallsum = n - 1\\nfor k in a:\\n    allsum += len(k)\\nans = allsum\\nfor i in range(n):\\n    sx = 0\\n    j = 0\\n    while i + j < n:\\n        sx += len(a[i + j])\\n        cnt = 1\\n        pos = i + j + 1\\n        while pos < n:\\n            if dp[i][pos] > j:\\n                cnt += 1\\n                pos += j\\n            pos += 1\\n        cur = allsum - sx*cnt + (j + 1)*cnt - j*cnt\\n        if cnt > 1 and ans > cur:\\n            ans = cur\\n        j += 1\\nprint(ans)\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}