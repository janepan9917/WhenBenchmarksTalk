{"qid": 4106, "orig_input": "The only difference between easy and hard versions is the constraints.\n\nVova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of $n$ consecutive pictures (with kittens, of course). Vova likes all these pictures, but some are more beautiful than the others: the $i$-th picture has beauty $a_i$.\n\nVova wants to repost exactly $x$ pictures in such a way that:   each segment of the news feed of at least $k$ consecutive pictures has at least one picture reposted by Vova;  the sum of beauty values of reposted pictures is maximum possible. \n\nFor example, if $k=1$ then Vova has to repost all the pictures in the news feed. If $k=2$ then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them.\n\nYour task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n, k$ and $x$ ($1 \\le k, x \\le n \\le 200$) \u2014 the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the beauty of the $i$-th picture.\n\n\n-----Output-----\n\nPrint -1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement.\n\nOtherwise print one integer \u2014 the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.\n\n\n-----Examples-----\nInput\n5 2 3\n5 1 3 10 1\n\nOutput\n18\n\nInput\n6 1 5\n10 30 30 70 10 10\n\nOutput\n-1\n\nInput\n4 3 1\n1 100 1 1\n\nOutput\n100", "input": "The only difference between easy and hard versions is the constraints.\n\nVova likes pictures with kittens. The news feed in the social network he uses can be represented as an array of $n$ consecutive pictures (with kittens, of course). Vova likes all these pictures, but some are more beautiful than the others: the $i$-th picture has beauty $a_i$.\n\nVova wants to repost exactly $x$ pictures in such a way that:   each segment of the news feed of at least $k$ consecutive pictures has at least one picture reposted by Vova;  the sum of beauty values of reposted pictures is maximum possible. \n\nFor example, if $k=1$ then Vova has to repost all the pictures in the news feed. If $k=2$ then Vova can skip some pictures, but between every pair of consecutive pictures Vova has to repost at least one of them.\n\nYour task is to calculate the maximum possible sum of values of reposted pictures if Vova follows conditions described above, or say that there is no way to satisfy all conditions.\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n, k$ and $x$ ($1 \\le k, x \\le n \\le 200$) \u2014 the number of pictures in the news feed, the minimum length of segment with at least one repost in it and the number of pictures Vova is ready to repost.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the beauty of the $i$-th picture.\n\n\n-----Output-----\n\nPrint -1 if there is no way to repost some pictures to satisfy all the conditions in the problem statement.\n\nOtherwise print one integer \u2014 the maximum sum of values of reposted pictures if Vova follows conditions described in the problem statement.\n\n\n-----Examples-----\nInput\n5 2 3\n5 1 3 10 1\n\nOutput\n18\n\nInput\n6 1 5\n10 30 30 70 10 10\n\nOutput\n-1\n\nInput\n4 3 1\n1 100 1 1\n\nOutput\n100", "test_cases": {"inputs": ["5 2 3\n5 1 3 10 1\n", "6 1 5\n10 30 30 70 10 10\n", "4 3 1\n1 100 1 1\n", "10 8 2\n842853295 227407393 999938308 145896203 715701127 207783929 574007784 731415993 466538642 880026774\n", "9 3 4\n397498491 235015416 20938619 357998172 883949649 813139123 596681571 716658346 444456081\n", "8 4 1\n584839998 906793888 819252576 374437512 272348000 691053795 931059413 766340324\n", "24 14 2\n243042142 323209485 118353668 909133554 81304989 766269408 777722792 656213078 605394673 636478466 773034018 174666612 668335008 93712660 700764564 707076950 645953351 853546027 905925042 741784506 228654421 434995279 452533575 513137555\n", "25 4 15\n172043124 384297369 650214870 426077944 587045971 576701397 865475689 261462255 763837593 285228401 629011531 611623799 456424430 820020943 166915939 903479811 384167579 561107351 177427070 14589838 994169358 683167027 193684940 439658261 237500762\n", "1 1 1\n474812122\n", "1 1 1\n630778266\n", "1 1 1\n204327110\n", "1 1 1\n311658179\n", "1 1 1\n624919319\n", "1 1 1\n493435459\n", "1 1 1\n300050365\n", "1 1 1\n348482537\n", "1 1 1\n922031381\n", "200 103 37\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "15 5 3\n2635829 350023769 683167149 556960496 631240845 442863824 339440671 107290942 603311337 477526861 814245665 899502451 83286624 76082776 194763926\n", "15 5 2\n529585109 776474925 944162404 531331019 502148487 753160855 314701391 764106954 382377182 490189975 434952522 988199603 440453830 51256343 532602115\n", "14 5 2\n956036265 182694371 213500222 846949061 812445518 728421576 971517403 838140094 100072999 815929535 673392778 50399513 265884293 829286020\n", "14 5 1\n777952841 904112822 619719668 821319583 273287753 183942799 391488524 199988810 174106140 533625353 704165043 288839769 328084203 509492291\n", "14 6 1\n573551956 597537712 343282887 390431752 922886146 236396791 508644487 527344545 350234981 210104471 688996046 22222733 530188006 245453392\n", "14 8 1\n314493289 279354788 200474731 673880281 517050227 341304777 187666812 331799120 407525368 853511092 663176964 634212854 784652508 127441002\n"], "outputs": ["18\n", "-1\n", "100\n", "1879965082\n", "2648762534\n", "-1\n", "1762679581\n", "9968015975\n", "474812122\n", "630778266\n", "204327110\n", "311658179\n", "624919319\n", "493435459\n", "300050365\n", "348482537\n", "922031381\n", "37\n", "2134054633\n", "-1\n", "1628375053\n", "-1\n", "-1\n", "331799120\n"]}, "solutions": "[\"import sys\\nfrom math import *\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn map(int, minp().split())\\n\\nn, k, x = mints()\\na = list(mints())\\nd = [None]*(n+1)\\np = [None]*(n+1)\\nfor i in range(0,k):\\n\\td[i] = a[i]\\nfor xx in range(2,x+1):\\n\\td,p = p,d\\n\\tfor nn in range(n):\\n\\t\\tm = None\\n\\t\\tfor i in range(max(0,nn-k),nn):\\n\\t\\t\\tif p[i] != None:\\n\\t\\t\\t\\tif m == None:\\n\\t\\t\\t\\t\\tm = p[i]\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tm = max(m, p[i])\\n\\t\\tif m != None:\\n\\t\\t\\td[nn] = m + a[nn]\\n\\t\\telse:\\n\\t\\t\\td[nn] = None\\nm = -1\\nfor i in range(n-k,n):\\n\\tif d[i] != None:\\n\\t\\tm = max(m, d[i])\\nprint(m)\", \"# -*- coding: utf-8 -*-\\n\\nimport math\\nimport collections\\nimport bisect\\nimport heapq\\nimport time\\nimport itertools\\nimport sys\\n\\n\\\"\\\"\\\"\\ncreated by shhuan at 2018/11/17 00:27\\n\\n\\n\\\"\\\"\\\"\\n\\nN, K, X = map(int, input().split())\\nA = [0] + [int(x) for x in input().split()]\\n\\ndp = [[float('-inf') for _ in range(X+1)] for _ in range(N+1)]\\ndp[0][X] = 0\\n\\nfor i in range(1, N+1):\\n    for x in range(X):\\n        for p in range(1, K+1):\\n            if i-p < 0:\\n                break\\n            if dp[i-p][x+1] < 0:\\n                continue\\n            dp[i][x] = max(dp[i][x], dp[i-p][x+1] + A[i])\\n\\nans = max([max(v) for v in dp[N-K+1:]])\\nif ans < 0:\\n    print(-1)\\nelse:\\n    print(ans)\", \"N,K,X = list(map(int,input().split()))\\narr = [0] + [int(i) for i in input().split()]\\n\\ndp = [[float('-inf') for _ in range(X+1)] for _ in range(N+1)]\\ndp[0][X] = 0\\n\\nfor i in range(1,N+1):\\n    for x in range(X):\\n        for p in range(1,K+1):\\n            if i - p < 0:\\n                break\\n            if dp[i-p][x+1] < 0:\\n                continue\\n            dp[i][x] = max(dp[i][x], dp[i-p][x+1] + arr[i])\\n\\nans = max([max(v) for v in dp[N-K+1:]])\\n\\nif ans < 0:\\n    print(-1)\\nelse:\\n    print(ans)\\n\", \"n, k, x = list(map(int, input().split()))\\na = [None] + list(map(int, input().split()))\\ndp = [[-1] * (n + 1) for i in range(x + 1)]\\ndp[0][0] = 0\\nfor i in range(1, x + 1):\\n    for j in range(1, n + 1):\\n        dp[i][j] = max(dp[i - 1][j2] for j2 in range(max(0, j - k), j))\\n        if dp[i][j] != -1: dp[i][j] += a[j]\\nans = max(dp[x][j] for j in range(n - k + 1, n + 1))\\nprint(ans)\\n\", \"n, k, x = map(int, input().split())\\na = [None] + list(map(int, input().split()))\\ndp = [[-1] * (n + 1) for i in range(x + 1)]\\ndp[0][0] = 0\\nfor i in range(1, x + 1):\\n    for j in range(1, n + 1):\\n        dp[i][j] = max(dp[i - 1][max(0, j - k):j])\\n        if dp[i][j] != -1: dp[i][j] += a[j]\\nans = max(dp[x][n - k + 1:n + 1])\\nprint(ans)\", \"from functools import lru_cache\\n\\nn, k, x = list(map(int, input().split()))\\n\\narr = list(map(int, input().split()))\\n\\n@lru_cache(maxsize=50000)\\ndef dp(i,y):\\n    if i>=0 and i<k and y==0:\\n        return 0\\n    elif i < 0 or y<= 0:\\n        return -1000000000001\\n    return max(dp(i-delta-1, y-1) + arr[i-delta-1] for delta in range(min(k,i+1)))\\n\\nprint(max(dp(n,x),-1))\\n\", \"from sys import stdin, stdout\\nimport collections\\n\\n#T = int(input())\\n#s = input()\\nN,K,X = [int(x) for x in stdin.readline().split()]\\narr = [int(x) for x in stdin.readline().split()]\\n\\nif X < N//K:\\n    print(-1)\\n    quit()\\n    \\ndp = [[0]*N for _ in range(X)]\\n\\nfor i in range(K):\\n    dp[0][i] = arr[i]\\n    \\nfor i in range(X-1):\\n    for j in range(N):\\n        if dp[i][j]!=0:\\n            for z in range(j+1,min(j+K+1,N)):\\n                #print(i,j,i+1,z)\\n                dp[i+1][z] = max(dp[i+1][z], dp[i][j] + arr[z])\\n                \\n\\nres = 0        \\nfor i in range(N-K,N):\\n    res = max(res,dp[X-1][i])\\n    \\nprint(res)\", \"import sys\\nS = sys.stdin.read()\\nS = list([list(map(int, x)) for x in list([x.split() for x in [x for x in S.split('\\\\n') if len(x) > 1]])])\\nn, k, x, B = S[0][0], S[0][1], S[0][2], S[1]\\n\\nX = [[-1 for i in range(x+1)] for i in range(n+1)]\\nX[0][0] = 0\\nfor i in range(1, n+1): \\n    for j in range(1, x+1): \\n        X[i][j] = max([X[i][j], max([-1] + [X[i-l][j-1]+B[i-1] for l in range(1, min([i, k])+1) if X[i-l][j-1] != -1])])\\nprint(max(list(map(max, X[n-k+1:n+1]))))\\n\", \"# -*- coding: utf-8 -*-\\n\\nimport sys\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\ndef ceil(x, y=1): return int(-(-x // y))\\ndef INT(): return int(input())\\ndef MAP(): return list(map(int, input().split()))\\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\\ndef Yes(): print('Yes')\\ndef No(): print('No')\\ndef YES(): print('YES')\\ndef NO(): print('NO')\\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\n\\nN, K, X = MAP()\\nA = LIST()\\n\\ndp = list2d(X+1, N+1, -1)\\ndp[0][0] = 0\\nfor i in range(X):\\n    for j in range(N):\\n        if dp[i][j] == -1:\\n            continue\\n        for k in range(j, min(j+K, N)):\\n            dp[i+1][k+1] = max(dp[i+1][k+1], dp[i][j] + A[k])\\nans = max(dp[X][-K:])\\nprint(ans)\\n\", \"# -*- coding: utf-8 -*-\\n\\nimport sys\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\ndef ceil(x, y=1): return int(-(-x // y))\\ndef INT(): return int(input())\\ndef MAP(): return list(map(int, input().split()))\\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\\ndef Yes(): print('Yes')\\ndef No(): print('No')\\ndef YES(): print('YES')\\ndef NO(): print('NO')\\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\n\\nN, K, X = MAP()\\nA = [0] + LIST()\\n\\ndp = list2d(X+1, N+1, -1)\\ndp[0][0] = 0\\nfor i in range(X):\\n    for j in range(N):\\n        if dp[i][j] == -1:\\n            continue\\n        for k in range(j+1, min(j+K+1, N+1)):\\n            dp[i+1][k] = max(dp[i+1][k], dp[i][j] + A[k])\\nans = max(dp[X][-K:])\\nprint(ans)\\n\", \"# -*- coding: utf-8 -*-\\n\\nimport sys\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\\ndef ceil(x, y=1): return int(-(-x // y))\\ndef INT(): return int(input())\\ndef MAP(): return list(map(int, input().split()))\\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\\ndef Yes(): print('Yes')\\ndef No(): print('No')\\ndef YES(): print('YES')\\ndef NO(): print('NO')\\nINF = 10 ** 18\\nMOD = 10 ** 9 + 7\\n\\nN, K, X = MAP()\\nA = [0] + LIST()\\n\\ndp = list2d(X+1, N+1, -1)\\ndp[0][0] = 0\\nfor i in range(X):\\n    for j in range(i, N):\\n        if dp[i][j] == -1:\\n            continue\\n        for k in range(j+1, min(j+K+1, N+1)):\\n            dp[i+1][k] = max(dp[i+1][k], dp[i][j] + A[k])\\nans = max(dp[X][-K:])\\nprint(ans)\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}