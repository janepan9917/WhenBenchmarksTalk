{"qid": 4004, "orig_input": "You are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\n\nYou can choose any non-negative integer $D$ (i.e. $D \\ge 0$), and for each $a_i$ you can:\n\n  add $D$ (only once), i. e. perform $a_i := a_i + D$, or  subtract $D$ (only once), i. e. perform $a_i := a_i - D$, or  leave the value of $a_i$ unchanged. \n\nIt is possible that after an operation the value $a_i$ becomes negative.\n\nYour goal is to choose such minimum non-negative integer $D$ and perform changes in such a way, that all $a_i$ are equal (i.e. $a_1=a_2=\\dots=a_n$).\n\nPrint the required $D$ or, if it is impossible to choose such value $D$, print -1.\n\nFor example, for array $[2, 8]$ the value $D=3$ is minimum possible because you can obtain the array $[5, 5]$ if you will add $D$ to $2$ and subtract $D$ from $8$. And for array $[1, 4, 7, 7]$ the value $D=3$ is also minimum possible. You can add it to $1$ and subtract it from $7$ and obtain the array $[4, 4, 4, 4]$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 the sequence $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum non-negative integer value $D$ such that if you add this value to some $a_i$, subtract this value from some $a_i$ and leave some $a_i$ without changes, all obtained values become equal.\n\nIf it is impossible to choose such value $D$, print -1.\n\n\n-----Examples-----\nInput\n6\n1 4 4 7 4 1\n\nOutput\n3\n\nInput\n5\n2 2 5 2 5\n\nOutput\n3\n\nInput\n4\n1 3 3 7\n\nOutput\n-1\n\nInput\n2\n2 8\n\nOutput\n3", "input": "You are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\n\nYou can choose any non-negative integer $D$ (i.e. $D \\ge 0$), and for each $a_i$ you can:\n\n  add $D$ (only once), i. e. perform $a_i := a_i + D$, or  subtract $D$ (only once), i. e. perform $a_i := a_i - D$, or  leave the value of $a_i$ unchanged. \n\nIt is possible that after an operation the value $a_i$ becomes negative.\n\nYour goal is to choose such minimum non-negative integer $D$ and perform changes in such a way, that all $a_i$ are equal (i.e. $a_1=a_2=\\dots=a_n$).\n\nPrint the required $D$ or, if it is impossible to choose such value $D$, print -1.\n\nFor example, for array $[2, 8]$ the value $D=3$ is minimum possible because you can obtain the array $[5, 5]$ if you will add $D$ to $2$ and subtract $D$ from $8$. And for array $[1, 4, 7, 7]$ the value $D=3$ is also minimum possible. You can add it to $1$ and subtract it from $7$ and obtain the array $[4, 4, 4, 4]$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$) \u2014 the sequence $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum non-negative integer value $D$ such that if you add this value to some $a_i$, subtract this value from some $a_i$ and leave some $a_i$ without changes, all obtained values become equal.\n\nIf it is impossible to choose such value $D$, print -1.\n\n\n-----Examples-----\nInput\n6\n1 4 4 7 4 1\n\nOutput\n3\n\nInput\n5\n2 2 5 2 5\n\nOutput\n3\n\nInput\n4\n1 3 3 7\n\nOutput\n-1\n\nInput\n2\n2 8\n\nOutput\n3", "test_cases": {"inputs": ["6\n1 4 4 7 4 1\n", "5\n2 2 5 2 5\n", "4\n1 3 3 7\n", "2\n2 8\n", "1\n100\n", "2\n1 1\n", "100\n49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100 49 49 49 100 2 100\n", "5\n1 2 2 1 1\n", "3\n1 2 4\n", "3\n1 3 4\n", "100\n1 1 1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "3\n2 6 6\n", "5\n2 4 6 8 10\n", "5\n1 1 1 1 1\n", "3\n2 3 4\n", "4\n2 3 6 9\n", "4\n4 2 6 6\n", "5\n1 2 3 4 5\n", "4\n1 4 7 10\n", "4\n2 2 10 10\n", "3\n7 5 3\n", "2\n2 7\n", "4\n2 2 12 12\n", "2\n5 8\n", "3\n52 52 54\n", "4\n1 2 3 4\n", "2\n3 1\n", "2\n2 5\n", "5\n1 5 1 5 1\n", "4\n4 4 4 4\n", "4\n4 2 2 4\n", "5\n1 4 7 10 13\n", "4\n2 2 4 4\n", "4\n1 2 3 6\n", "3\n1 5 3\n", "2\n3 8\n", "2\n2 9\n", "6\n1 3 5 1 5 5\n", "100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n", "3\n5 5 3\n", "2\n1 100\n", "3\n1 5 9\n", "2\n3 6\n", "4\n1 3 5 7\n", "2\n1 8\n", "4\n1 1 1 1\n", "3\n2 4 6\n", "3\n3 7 2\n", "2\n5 4\n", "3\n4 6 8\n", "2\n20 11\n", "5\n1 1 2 3 4\n", "3\n1 3 1\n", "2\n100 1\n", "4\n4 6 8 2\n", "2\n4 3\n", "2\n9 1\n", "2\n6 5\n", "4\n2 2 2 1\n", "2\n1 4\n", "4\n2 4 6 8\n", "3\n1 7 4\n", "3\n1 5 1\n", "3\n1 3 3\n", "2\n5 10\n", "3\n6 8 4\n", "3\n3 3 9\n", "3\n100 100 4\n", "2\n11 10\n", "3\n2 2 8\n", "2\n12 11\n", "3\n1 3 5\n", "7\n2 2 5 8 8 8 8\n", "3\n6 1 11\n", "2\n4 5\n", "2\n13 12\n", "2\n93 7\n", "2\n1 7\n", "9\n54 16 67 14 49 84 30 44 59\n", "2\n4 7\n", "4\n1 2 3 3\n", "2\n8 7\n", "5\n1 3 1 3 3\n", "3\n1 9 5\n", "2\n9 8\n", "3\n10 16 22\n", "6\n4 2 2 4 4 4\n", "10\n1 2 3 4 5 6 7 8 9 10\n", "2\n1 10\n", "4\n10 16 22 28\n", "4\n1 7 4 10\n", "4\n2 5 8 11\n", "4\n100 100 100 4\n", "4\n2 2 1 3\n", "5\n5 5 5 5 11\n", "3\n1 50 99\n", "2\n1 5\n", "2\n1 2\n", "3\n3 3 1\n", "5\n6 4 2 1 1\n", "4\n4 7 4 10\n", "4\n7 8 8 6\n", "5\n7 6 5 4 6\n", "2\n5 3\n", "3\n1 1 1\n", "3\n5 2 8\n", "3\n2 10 6\n", "4\n2 6 10 14\n", "4\n2 4 4 6\n", "4\n2 4 4 4\n", "3\n1 7 19\n", "2\n1 11\n", "11\n69 8 70 23 47 72 48 41 63 86 20\n", "9\n1 4 7 7 4 1 4 7 1\n", "3\n4 3 5\n", "5\n4 2 6 6 6\n", "2\n72 32\n", "5\n7 9 5 7 7\n", "4\n1 1 5 1\n", "4\n2 4 6 10\n", "5\n10 8 6 4 2\n", "4\n4 4 12 12\n", "8\n2 2 2 6 6 6 4 4\n", "4\n1 3 4 5\n", "2\n4 18\n", "5\n1 3 5 1 5\n", "3\n1 100 99\n", "4\n4 3 2 1\n", "8\n1 11 1 11 1 11 1 21\n", "5\n1 3 2 1 4\n", "8\n1 1 1 1 4 7 7 1\n", "2\n4 19\n", "3\n5 3 1\n", "6\n1 3 5 5 3 1\n", "10\n10 20 30 10 20 30 10 20 30 31\n", "4\n1 4 3 5\n", "3\n1 2 6\n", "10\n20 20 20 20 20 20 20 21 19 18\n", "5\n1 2 3 4 4\n", "5\n1 5 9 1 5\n", "6\n1 3 5 3 5 1\n", "2\n52 50\n", "4\n3 3 9 9\n", "9\n4 6 6 4 6 7 8 6 4\n", "9\n2 4 6 4 6 2 5 6 2\n", "100\n72 72 89 89 89 89 55 72 55 72 89 55 55 89 55 72 72 55 55 89 89 89 55 89 89 55 55 89 72 72 89 89 55 55 89 89 55 55 89 72 55 55 72 72 72 72 72 89 72 55 72 72 55 55 89 72 72 89 89 55 89 72 72 89 55 55 55 72 55 55 89 89 89 89 72 55 72 72 55 55 55 55 72 55 72 72 55 72 55 72 55 55 72 72 55 89 89 72 72 89\n", "2\n1 6\n", "4\n2 6 4 4\n", "10\n3 5 5 7 7 5 5 1 1 1\n", "6\n4 4 2 2 6 6\n", "7\n7 7 5 7 8 5 8\n", "6\n4 4 4 2 6 8\n", "2\n2 1\n", "4\n1 5 3 3\n", "4\n1 3 4 7\n"], "outputs": ["3\n", "3\n", "-1\n", "3\n", "0\n", "0\n", "-1\n", "1\n", "-1\n", "-1\n", "99\n", "2\n", "-1\n", "0\n", "1\n", "-1\n", "2\n", "-1\n", "-1\n", "4\n", "2\n", "5\n", "5\n", "3\n", "1\n", "-1\n", "1\n", "3\n", "2\n", "0\n", "1\n", "-1\n", "1\n", "-1\n", "2\n", "5\n", "7\n", "2\n", "-1\n", "1\n", "99\n", "4\n", "3\n", "-1\n", "7\n", "0\n", "2\n", "-1\n", "1\n", "2\n", "9\n", "-1\n", "1\n", "99\n", "-1\n", "1\n", "4\n", "1\n", "1\n", "3\n", "-1\n", "3\n", "2\n", "1\n", "5\n", "2\n", "3\n", "48\n", "1\n", "3\n", "1\n", "2\n", "3\n", "5\n", "1\n", "1\n", "43\n", "3\n", "-1\n", "3\n", "1\n", "1\n", "1\n", "4\n", "1\n", "6\n", "1\n", "-1\n", "9\n", "-1\n", "-1\n", "-1\n", "48\n", "1\n", "3\n", "49\n", "2\n", "1\n", "1\n", "-1\n", "3\n", "1\n", "-1\n", "1\n", "0\n", "3\n", "4\n", "-1\n", "2\n", "1\n", "-1\n", "5\n", "-1\n", "3\n", "1\n", "2\n", "20\n", "2\n", "2\n", "-1\n", "-1\n", "4\n", "2\n", "-1\n", "7\n", "2\n", "-1\n", "-1\n", "10\n", "-1\n", "3\n", "15\n", "2\n", "2\n", "-1\n", "-1\n", "-1\n", "-1\n", "-1\n", "4\n", "2\n", "1\n", "3\n", "-1\n", "-1\n", "17\n", "5\n", "2\n", "-1\n", "2\n", "-1\n", "-1\n", "1\n", "2\n", "-1\n"]}, "solutions": "[\"def main():\\n    n = int(input())\\n    a = list(sorted(set(map(int, input().split()))))\\n    if len(a) > 3:\\n        print(-1)\\n    elif len(a) == 1:\\n        print(0)\\n    elif len(a) == 2:\\n        d = a[1] - a[0]\\n        if d & 1:\\n            print(d)\\n        else:\\n            print(d >> 1)\\n    else:\\n        d = a[1] - a[0]\\n        D = a[2] - a[1]\\n        if d == D:\\n            print(d)\\n        else:\\n            print(-1)\\n    return 0\\n\\nmain()\", \"n = int(input())\\nA = list(map(int, input().split()))\\nB = list(set(A))\\nif len(B) > 3:\\n\\tprint(-1)\\nelse:\\n\\tif len(B) == 3:\\n\\t\\tB.sort()\\n\\t\\tif B[1] - B[0] == B[2] - B[1]:\\n\\t\\t\\tprint(B[1] - B[0])\\n\\t\\telse:\\n\\t\\t\\tprint(-1)\\n\\telif len(B) == 1:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tB.sort()\\n\\t\\tif ((B[1] - B[0]) % 2 == 0):\\n\\t\\t\\tprint((B[1] - B[0]) // 2)\\n\\t\\telse:\\n\\t\\t\\tprint(B[1] - B[0])\", \"n = int(input())\\na = list(map(int, input().split()))\\ns = set(a)\\nif len(s) > 3:\\n    print(-1)\\nelif len(s) == 1:\\n    print(0)\\nelif len(s) == 2:\\n    a = list(s)\\n    d = abs(a[0] - a[1])\\n    if d % 2 == 0:\\n        d //= 2\\n    print(d)\\nelse:\\n    a = sorted(list(s))\\n    if a[1] - a[0] == a[2] - a[1]:\\n        print(a[1] - a[0])\\n    else:\\n        print(-1)\\n\", \"N = int(input())\\nA = sorted(list(set([int(a) for a in input().split()])))\\nif len(A) == 1:\\n    print(0)\\nelif len(A) == 2:\\n    if (A[1]-A[0]) % 2 == 0:\\n        print((A[1]-A[0])//2)\\n    else:\\n        print(A[1]-A[0])\\nelif len(A) == 3:\\n    if A[2]+A[0] == A[1] * 2:\\n        print(A[2]-A[1])\\n    else:\\n        print(-1)\\nelse:\\n    print(-1)\\n\", \"n = int(input())\\narr = list(sorted(set(map(int, input().split()))))\\n\\nif len(arr) == 1:\\n    print(0)\\nelif len(arr) == 2:\\n    if arr[1] % 2 == arr[0] % 2:\\n        print((arr[1] - arr[0]) // 2)\\n    else:\\n        print(arr[1] - arr[0])\\nelif len(arr) == 3:\\n    if arr[2] - arr[1] == arr[1] - arr[0]:\\n        print(arr[2] - arr[1])\\n    else:\\n        print(-1)\\nelse:\\n    print(-1)\\n\", \"input()\\nn = list({int(x) for x in input().split()})\\nif len(n) == 1:\\n    print('0')\\nelif len(n) > 3:\\n    print('-1')\\nelif len(n) == 2:\\n    if abs(n[0] - n[1]) % 2 == 0:\\n        print(abs(n[0] - n[1]) // 2)\\n    else:\\n        print(abs(n[0] - n[1]))\\nelse:\\n    n = sorted(n)\\n    if n[2] - n[1] == n[1] - n[0]:\\n        print(n[2] - n[1])\\n    else:\\n        print('-1')\\n\", \"n=int(input())\\nA=list(map(int,input().split()))\\nA=sorted(set(A))\\n\\nif len(A)>3:\\n    print(-1)\\n\\nelif len(A)==3:\\n    if A[1]-A[0]==A[2]-A[1]:\\n        print(A[1]-A[0])\\n    else:\\n        print(-1)\\n\\nelif len(A)==2:\\n    if (A[1]-A[0])%2==1:\\n        print(A[1]-A[0])\\n    else:\\n        print((A[1]-A[0])//2)\\n\\nelif len(A)==1:\\n    print(0)\\n    \\n\\n\", \"n=int(input())\\nit=list(map(int,input().split()))\\nkk=set(it)\\nif len(kk)>3:\\n    print(-1)\\nif len(kk)==1:\\n    print(0)\\nif len(kk)==2:\\n    kk=list(kk)\\n    kk.sort()\\n    if (kk[0]-kk[1])%2==0:\\n        print((kk[1]-kk[0])//2)\\n    else:\\n        print(kk[1]-kk[0])\\nif len(kk)==3:\\n    kk=list(kk)\\n    kk.sort()\\n    if kk[0]-kk[1]==kk[1]-kk[2]:\\n        print(kk[1]-kk[0])\\n    else:\\n        print(-1)\\n\", \"input()\\n\\ns = set(map(int, input().split()))\\n\\nif len(s) == 1:\\n\\tD = 0\\n\\nelif len(s) == 2:\\n\\tD = max(s) - min(s)\\n\\n\\tif D % 2 == 0:\\n\\t\\tD = D // 2\\n\\nelif len(s) == 3:\\n\\tlst = list(s)\\n\\tlst.sort()\\n\\n\\tif lst[2] - lst[1] == lst[1] - lst[0]:\\n\\t\\tD = lst[2] - lst[1]\\n\\n\\telse:\\n\\t\\tD = -1\\n\\nelse:\\n\\tD = -1\\n\\nprint(D)\", \"n=int(input())\\na=[int(x) for x in input().split()]\\nb=set(a)\\nc=sorted(list(b))\\nif len(b)==3:    \\n    if c[1]-c[0]==c[2]-c[1]:\\n        print(c[1]-c[0])\\n    else:\\n        print(-1)\\nelif len(b)==2:\\n    if (c[1]-c[0])%2==0:\\n              print((c[1]-c[0])//2)\\n    else:\\n              print(c[1]-c[0])\\nelif len(b)==1:\\n              print(0)\\nelse:\\n              print(-1)\\n        \\n\", \"IN = input\\nrint = lambda: int(IN())\\nrmint = lambda: list(map(int, IN().split()))\\nrlist = lambda: list(rmint())\\n\\nn = rint()\\na = rlist()\\nb = list(set(a))\\nb.sort()\\nif len(b) > 3:\\n    print(-1)\\nelif len(b) == 1:\\n    print(0)\\nelif len(b) == 2:\\n    p = b[1] - b[0]\\n    if p&1:\\n        print(p)\\n    else:\\n        print(p//2)\\nelse:\\n    if b[1]-b[0] == b[-1]-b[1]:\\n        print(b[1]-b[0])\\n    else:\\n        print(-1)\\n\", \"n = int(input())\\na = [int(e) for e in input().split()]\\nst = set()\\nfor i in a:\\n    st.add(i)\\nb = sorted(list(st))\\nif len(st) > 3:\\n    print(-1)\\nelif len(st) == 3:\\n    if b[0] + b[2] == b[1] * 2:\\n        print(b[1] - b[0])\\n    else:\\n        print(-1)\\nelif len(st) == 2:\\n    if (b[1] - b[0]) % 2 == 0:\\n        print((b[1] - b[0]) // 2)\\n    else:\\n        print(b[1] - b[0])\\nelse:\\n    print(0)\\n\", \"n = int(input())\\nl = [*map(int, input().split())]\\ndef check(x):\\n    return [abs(e - x) for e in l if e != x]\\nres = float('inf')\\nfor x in range(1, 101):\\n    c = check(x)\\n    if len(set(c)) == 1:\\n        res = min(res, c[0])\\n    elif not c:\\n        res = 0\\n        break\\nif res > 100:\\n    print(-1)\\nelse:\\n    print(res)\", \"n = int(input())\\na = [int(t) for t in input().split()]\\n\\nif len(set(a)) > 3:\\n    print(-1)\\n    return\\n    \\nif len(set(a)) == 1:\\n    print(0)\\n    return\\n    \\nif len(set(a)) == 2:\\n    c = abs(list(set(a))[0] - list(set(a))[1])\\n    if c % 2 == 0:\\n        print(c // 2)\\n    else:\\n        print(c)\\n    return\\n    \\na, b, c = sorted(list(set(a)))\\n\\nif c - b != b - a:\\n    print(-1)\\nelse:\\n    print(c - b)\\n\\n\", \"n=int(input())\\nl=list(map(int, input().split()))\\nl.sort()\\nfinal=[]\\nfor i in l:\\n\\tif i not in final:\\n\\t\\tfinal+=[i]\\nif(len(final)==1):\\n\\tprint(0)\\nelif(len(final)==2):\\n\\tif((final[1]-final[0])%2==0):\\n\\t\\tprint((final[1]-final[0])//2)\\n\\telse:\\n\\t\\tprint(final[1]-final[0])\\nelif(len(final)==3):\\n\\tif((final[1]-final[0])==(final[2]-final[1])):\\n\\t\\tprint(final[2]-final[1])\\n\\telse:\\n\\t\\tprint(-1)\\nelse:\\n\\tprint(-1)\", \"from collections import Counter\\nn = int(input())\\na = list(map(int,input().split()))\\na.sort()\\nmn = a[0]\\nmx = a[-1]\\nc = Counter(a)\\nmed = -1\\nfor i in c:\\n    if mn < i < mx:\\n        med = i\\nif len(c) > 3:\\n    print(-1)\\nelif len(c) == 3:\\n    if med-mn == mx-med:\\n        print(med-mn)\\n    else:\\n        print(-1)\\nelif len(c) == 2:\\n    print((mx-mn)//2 if (mx-mn)%2 == 0 else mx-mn)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\na = sorted(set(map(int, input().split())))\\nif len(a) > 3:\\n  print(-1)\\nelif len(a) == 3:\\n  print(-1 if 3 * a[1] != sum(a) else a[2] - a[1])\\nelif len(a) == 2:\\n  print(a[1] - a[0] if (a[1] - a[0]) % 2 else (a[1] - a[0]) // 2)\\nelse:\\n  print(0)\\n\", \"n = int(input())\\na = [int(item) for item in input().split()]\\n\\ns = set(a)\\nl = list(s)\\nif len(s) > 3:\\n    print(-1)\\nelif len(s) == 3:\\n    l.sort()\\n    if l[1] - l[0] != l[2] - l[1]:\\n        print(-1)\\n    else:\\n        print(l[1] - l[0])\\nelif len(s) == 2:\\n    if abs(l[0] - l[1]) % 2:\\n        print(abs(l[0] - l[1]))\\n    else:\\n        print(abs(l[0] - l[1]) // 2)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\nu = list(map(int, input().split()))\\nu.sort()\\np = [u[0]]\\nfor i in range(1, n):\\n    if u[i] != u[i - 1]:\\n        p.append(u[i])\\n        if len(p) == 4:\\n            print(-1)\\n            return\\nif len(p) == 1:\\n    print(0)\\nelif len(p) == 2:\\n    if abs(p[1] - p[0]) % 2 == 0:\\n        print(abs(p[1] - p[0]) // 2)\\n    else:\\n        print(abs(p[1] - p[0]))\\nelse:\\n    if p[1] - p[0] == p[2] - p[1]:\\n        print(p[2] - p[1])\\n    else:\\n        print(-1)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nb = sorted(set(a))\\n\\nif len(b) == 1:\\n    print(0)\\nelif len(b) == 2:\\n    b.sort()\\n    if sum(b) % 2 == 0:\\n        print((b[1] - b[0])//2)\\n    else:\\n        print(b[1] - b[0])\\nelif len(b) == 3:\\n    b.sort()\\n    if b[0] + b[2] == 2*b[1]:\\n        print(b[1] - b[0])\\n    else:\\n        print(-1)\\nelse:\\n    print(-1)\", \"import collections\\n\\ndef solve():\\n    n=int(input())\\n    A=list(map(int,input().split()))\\n    c=collections.Counter(A)\\n    ck=list(c.keys())\\n    ck.sort()\\n    ck_len=len(ck)\\n    if ck_len>=4:\\n        return -1\\n    elif ck_len==3:\\n        if ck[2]-ck[1]==ck[1]-ck[0]:\\n            return ck[2]-ck[1]\\n        else:\\n            return -1\\n    elif ck_len==2:\\n        if (ck[1]-ck[0])%2==0:\\n            return (ck[1]-ck[0])//2\\n        else:\\n            return ck[1]-ck[0]\\n    else:\\n        return 0\\n\\nprint(solve())\\n\", \"\\nn = int(input())\\n\\narr = list(map(int,input().strip().split()))\\n\\narr = sorted(arr)\\n\\nans = 10000000000\\n\\nfor k in range(200):\\n    d = -1\\n    fl = 0\\n    #print(\\\"->\\\",k)\\n    for i in range(n):\\n        c = abs(arr[i]-k)\\n        #print(c)\\n        if d==-1:\\n            d = c\\n        else:\\n            if d!=c and c>0:\\n                fl= 1\\n    if fl==0:\\n        ans = min(ans,d)\\nif ans==10000000000:\\n    print(-1)\\nelse:\\n    print(ans)\\n\", \"def main():\\n\\n    n = int(input())\\n    ints = list(map(int, input().split()))\\n\\n    ints = sorted(list(set(ints)))\\n\\n    if len(ints) > 3:\\n        print(-1)\\n        return\\n    if len(ints) == 3:\\n        if (ints[1] - ints[0]) == (ints[2] - ints[1]):\\n            print(ints[1] - ints[0])\\n        else:\\n            print(-1)\\n        return\\n    if len(ints) == 2:\\n        if (ints[0] + ints[1]) % 2 == 0:\\n            print((ints[0] + ints[1]) // 2 - ints[0])\\n        else:\\n            print(ints[1] - ints[0])\\n        return\\n    print(0)\\n    return\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}