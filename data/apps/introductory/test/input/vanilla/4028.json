{"qid": 4028, "orig_input": "You are given a bracket sequence $s$ (not necessarily a regular one). A bracket sequence is a string containing only characters '(' and ')'.\n\nA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example, bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"), and \")(\", \"(\" and \")\" are not.\n\nYour problem is to calculate the number of regular bracket sequences of length $2n$ containing the given bracket sequence $s$ as a substring (consecutive sequence of characters) modulo $10^9+7$ ($1000000007$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the half-length of the resulting regular bracket sequences (the resulting sequences must have length equal to $2n$).\n\nThe second line of the input contains one string $s$ ($1 \\le |s| \\le 200$) \u2014 the string $s$ that should be a substring in each of the resulting regular bracket sequences ($|s|$ is the length of $s$).\n\n\n-----Output-----\n\nPrint only one integer \u2014 the number of regular bracket sequences containing the given bracket sequence $s$ as a substring. Since this number can be huge, print it modulo $10^9+7$ ($1000000007$).\n\n\n-----Examples-----\nInput\n5\n()))()\n\nOutput\n5\n\nInput\n3\n(()\n\nOutput\n4\n\nInput\n2\n(((\n\nOutput\n0\n\n\n\n-----Note-----\n\nAll regular bracket sequences satisfying the conditions above for the first example:   \"(((()))())\";  \"((()()))()\";  \"((()))()()\";  \"(()(()))()\";  \"()((()))()\". \n\nAll regular bracket sequences satisfying the conditions above for the second example:   \"((()))\";  \"(()())\";  \"(())()\";  \"()(())\". \n\nAnd there is no regular bracket sequences of length $4$ containing \"(((\" as a substring in the third example.", "input": "You are given a bracket sequence $s$ (not necessarily a regular one). A bracket sequence is a string containing only characters '(' and ')'.\n\nA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters '1' and '+' between the original characters of the sequence. For example, bracket sequences \"()()\" and \"(())\" are regular (the resulting expressions are: \"(1)+(1)\" and \"((1+1)+1)\"), and \")(\", \"(\" and \")\" are not.\n\nYour problem is to calculate the number of regular bracket sequences of length $2n$ containing the given bracket sequence $s$ as a substring (consecutive sequence of characters) modulo $10^9+7$ ($1000000007$).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 100$) \u2014 the half-length of the resulting regular bracket sequences (the resulting sequences must have length equal to $2n$).\n\nThe second line of the input contains one string $s$ ($1 \\le |s| \\le 200$) \u2014 the string $s$ that should be a substring in each of the resulting regular bracket sequences ($|s|$ is the length of $s$).\n\n\n-----Output-----\n\nPrint only one integer \u2014 the number of regular bracket sequences containing the given bracket sequence $s$ as a substring. Since this number can be huge, print it modulo $10^9+7$ ($1000000007$).\n\n\n-----Examples-----\nInput\n5\n()))()\n\nOutput\n5\n\nInput\n3\n(()\n\nOutput\n4\n\nInput\n2\n(((\n\nOutput\n0\n\n\n\n-----Note-----\n\nAll regular bracket sequences satisfying the conditions above for the first example:   \"(((()))())\";  \"((()()))()\";  \"((()))()()\";  \"(()(()))()\";  \"()((()))()\". \n\nAll regular bracket sequences satisfying the conditions above for the second example:   \"((()))\";  \"(()())\";  \"(())()\";  \"()(())\". \n\nAnd there is no regular bracket sequences of length $4$ containing \"(((\" as a substring in the third example.", "test_cases": {"inputs": ["5\n()))()\n", "3\n(()\n", "2\n(((\n", "100\n()(()))))(()((((()())()))(()))()()))(((()))))))))(\n", "100\n()(()(()((()(()(()()()(()((()))())())))()))())()()\n", "100\n(()))(()())()()((())(()((()()))(())()(((((()(((()()))())))))(())((((()()()()()))(()))(())(())(()))((\n", "100\n(()(()()()()(()(()()(((()((()(((()(((()(()()((()())))))()()()))))()()())))()()))()))()()()()())()())\n", "100\n(()))()())((())))((((())()((())(()(())))(()()(((()()())())()()(())))())((((()())(())())((((()((()((()()(())))(())))))()(()))))())()()))))()(()(()())((\n", "100\n()()()(((((()(()((((()((((((()()()((()()(()()()(((()()((()()((()()()))()()()))()))))())()())()()()())()()()())())())))())()())())))())()))))()()()()()\n", "100\n()()))(()()))))((()()))))(()()(()())()))))()())()()((((()(()()((())))((()()())())(())((()((()))(((()(()))))))())))((((()())))(()(()(())))(()))()()())((())()((())(()(((()((())))())))()()()((()))()()())\n", "100\n(()(()()()((()((((((()(()()((((()()((((()((()()((()((()()(()(((()((()()()()(()((()()(((()()(()((()()))())()))())()()()()())))())())()))()))()()))))()))()))))))())())()())))())))())))()()()())()())()()\n", "100\n()\n", "100\n()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n", "100\n(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "100\n()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()\n", "100\n((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n", "100\n)\n", "100\n))\n", "100\n))())())()))()())())()(((((((()()))())()())()(((()()))(())()((((()()()())()((()()()())()(((((()()()(()(()()((((()())))()))()(())(())))))))))((()((()())())(()((())((())()(()(()\n", "100\n()())(((()((())))((())((()(())))(((((((()))))))()(()((()()(((())))())()((((())()(())))(((((()))())(()))))((()))((())()(((())((()())(()(()))((()()()())())())))(()()()))()))))())))))))()(\n", "100\n()(()())()(())))()())()(())((()(()()((()((((((())()))(()(()()))(()()())((()())))())())))())))(())(()()))(((())))(((((())(())(()))((())(())))())))()))()((())()()())()))(()())(()(()))(()(())))\n", "12\n()()()\n", "20\n()(()()())\n", "32\n()((()()()())())\n", "50\n(\n", "10\n)()))())))())(())(()(((())(()))))))(()())))))))(((\n", "20\n))()))(()()))(())()))()(((((((((()((())((((((())(())(()())))(()()((())(()()()()(()())()()))))))())((\n", "1\n(\n", "2\n)\n", "3\n)\n", "4\n(\n", "5\n(\n", "6\n)\n", "7\n)\n", "8\n(\n", "9\n(\n", "10\n)\n", "11\n(\n", "12\n(\n", "13\n)\n", "14\n)\n", "15\n(\n", "16\n(\n", "17\n)\n", "18\n)\n", "19\n(\n", "20\n)\n", "21\n(\n", "22\n(\n", "23\n)\n", "1\n(((\n", "100\n((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\n"], "outputs": ["5\n", "4\n", "0\n", "979898526\n", "711757760\n", "599470552\n", "812513651\n", "657505568\n", "264738339\n", "0\n", "1\n", "558488487\n", "1\n", "1\n", "2\n", "3\n", "558488487\n", "558488486\n", "325\n", "1820\n", "1\n", "62316\n", "296672330\n", "468509380\n", "265470434\n", "0\n", "0\n", "1\n", "2\n", "5\n", "14\n", "42\n", "132\n", "429\n", "1430\n", "4862\n", "16796\n", "58786\n", "208012\n", "742900\n", "2674440\n", "9694845\n", "35357670\n", "129644790\n", "477638700\n", "767263183\n", "564120378\n", "466266852\n", "482563003\n", "59611249\n", "0\n", "0\n"]}, "solutions": "[\"MOD=10**9+7\\nn=int(input())\\ns=[c=='(' for c in input()]\\nm=len(s)\\nz=[[0,0]]\\nfor v in s:\\n a=z[-1][v]\\n z[-1][v]=len(z)\\n z.append(z[a][:])\\nz[m][0]=z[m][1]=m\\ndp=[[0 for _ in range(m+1)] for _ in range(n+1)]\\ndp[0][0]=1\\nfor _ in range(2*n):\\n ndp=[[0 for _ in range(m+1)] for _ in range(n+1)]\\n for i in range(n+1):\\n  for j in range(m+1):\\n   if dp[i][j]<1:continue\\n   if i>0:ndp[i-1][z[j][0]]=(ndp[i-1][z[j][0]]+dp[i][j])%MOD\\n   if i<n:ndp[i+1][z[j][1]]=(ndp[i+1][z[j][1]]+dp[i][j])%MOD\\n dp=ndp\\nprint(dp[0][m])\", \"MOD=10**9+7\\nn=int(input())\\ns=[c=='(' for c in input()]\\nm=len(s)\\nz=[[0,0]]\\nfor v in s:\\n a=z[-1][v]\\n z[-1][v]=len(z)\\n z.append(z[a][:])\\nz[m][0]=z[m][1]=m\\ndp=[[0 for _ in range(m+1)] for _ in range(n+1)]\\ndp[0][0]=1\\nfor _ in range(2*n):\\n ndp=[[0 for _ in range(m+1)] for _ in range(n+1)]\\n for i in range(n+1):\\n  for j in range(m+1):\\n   if i>0:ndp[i-1][z[j][0]]=(ndp[i-1][z[j][0]]+dp[i][j])%MOD\\n   if i<n:ndp[i+1][z[j][1]]=(ndp[i+1][z[j][1]]+dp[i][j])%MOD\\n dp=ndp\\nprint(dp[0][m])\", \"M=10**9+7\\nn=int(input())\\ns=[c=='(' for c in input()]\\nm=len(s)\\nz=[[0,0]]\\nfor v in s:\\n a=z[-1][v]\\n z[-1][v]=len(z)\\n z+=[z[a][:]]\\nz[m]=[m,m]\\ndp=[[0]*(m+1) for _ in range(n+1)]\\ndp[0][0]=1\\nfor _ in range(2*n):\\n ndp=[[0]*(m+1) for _ in range(n+1)]\\n for i in range(n+1):\\n  for j in range(m+1):\\n   if i>0:ndp[i-1][z[j][0]]=(ndp[i-1][z[j][0]]+dp[i][j])%M\\n   if i<n:ndp[i+1][z[j][1]]=(ndp[i+1][z[j][1]]+dp[i][j])%M\\n dp=ndp\\nprint(dp[0][m])\", \"M=10**9+7\\nn=int(input())\\ns=[c=='(' for c in input()]\\nm=len(s)\\nz=[[0,0]]\\nfor v in s:\\n a=z[-1][v]\\n z[-1][v]=len(z)\\n z+=[z[a][:]]\\nz[m]=[m,m]\\ndp=[[0]*(m+1) for _ in range(n+1)]\\ndp[0][0]=1\\nfor _ in range(2*n):\\n ndp=[[0]*(m+1) for _ in range(n+1)]\\n for i in range(n+1):\\n  for j in range(m+1):\\n   if i>0:ndp[i-1][z[j][0]]=(ndp[i-1][z[j][0]]+dp[i][j])%M\\n   if i<n:ndp[i+1][z[j][1]]=(ndp[i+1][z[j][1]]+dp[i][j])%M\\n dp=ndp\\n \\nprint(dp[0][m])\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}