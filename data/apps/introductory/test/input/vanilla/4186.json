{"qid": 4186, "orig_input": "There are $n$ students in a university. The number of students is even. The $i$-th student has programming skill equal to $a_i$. \n\nThe coach wants to form $\\frac{n}{2}$ teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal (otherwise they cannot understand each other and cannot form a team).\n\nStudents can solve problems to increase their skill. One solved problem increases the skill by one.\n\nThe coach wants to know the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams (i.e. each pair of students should form a team). Your task is to find this number.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 100$) \u2014 the number of students. It is guaranteed that $n$ is even.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the skill of the $i$-th student.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams.\n\n\n-----Examples-----\nInput\n6\n5 10 2 3 14 5\n\nOutput\n5\n\nInput\n2\n1 100\n\nOutput\n99\n\n\n\n-----Note-----\n\nIn the first example the optimal teams will be: $(3, 4)$, $(1, 6)$ and $(2, 5)$, where numbers in brackets are indices of students. Then, to form the first team the third student should solve $1$ problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve $4$ problems so the answer is $1 + 4 = 5$.\n\nIn the second example the first student should solve $99$ problems to form a team with the second one.", "input": "There are $n$ students in a university. The number of students is even. The $i$-th student has programming skill equal to $a_i$. \n\nThe coach wants to form $\\frac{n}{2}$ teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal (otherwise they cannot understand each other and cannot form a team).\n\nStudents can solve problems to increase their skill. One solved problem increases the skill by one.\n\nThe coach wants to know the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams (i.e. each pair of students should form a team). Your task is to find this number.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 100$) \u2014 the number of students. It is guaranteed that $n$ is even.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the skill of the $i$-th student.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams.\n\n\n-----Examples-----\nInput\n6\n5 10 2 3 14 5\n\nOutput\n5\n\nInput\n2\n1 100\n\nOutput\n99\n\n\n\n-----Note-----\n\nIn the first example the optimal teams will be: $(3, 4)$, $(1, 6)$ and $(2, 5)$, where numbers in brackets are indices of students. Then, to form the first team the third student should solve $1$ problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve $4$ problems so the answer is $1 + 4 = 5$.\n\nIn the second example the first student should solve $99$ problems to form a team with the second one.", "test_cases": {"inputs": ["6\n5 10 2 3 14 5\n", "2\n1 100\n", "100\n15 14 32 65 28 96 33 93 48 28 57 20 32 20 90 42 57 53 18 58 94 21 27 29 37 22 94 45 67 60 83 23 20 23 35 93 3 42 6 46 68 46 34 25 17 16 50 5 49 91 23 76 69 100 58 68 81 32 88 41 64 29 37 13 95 25 6 59 74 58 31 35 16 80 13 80 10 59 85 18 16 70 51 40 44 28 8 76 8 87 53 86 28 100 2 73 14 100 52 9\n", "100\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n", "100\n45 59 59 59 45 45 45 59 45 59 45 45 59 59 45 45 45 59 45 45 45 59 45 59 59 59 45 45 45 59 45 59 59 45 45 59 59 59 59 45 59 59 45 45 45 45 59 45 59 59 59 45 45 45 59 45 45 59 59 45 45 59 45 59 59 59 59 59 59 45 45 59 45 59 59 45 45 59 59 45 59 59 45 59 59 59 45 59 45 45 59 45 59 59 45 59 59 59 59 59\n", "100\n89 51 37 17 13 97 78 26 44 82 36 75 39 76 96 34 88 69 27 28 93 31 53 14 93 78 71 95 44 12 34 96 97 88 37 36 16 78 13 87 41 27 44 38 17 72 93 31 27 51 12 53 12 23 14 9 39 87 76 97 28 39 27 81 93 15 1 71 78 26 75 82 89 39 9 81 53 1 26 26 12 38 38 72 99 44 1 1 16 23 27 53 15 97 41 38 27 95 99 69\n", "100\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\n", "100\n32 32 32 3 32 3 32 32 3 32 32 3 32 3 32 32 32 32 32 32 3 3 3 3 3 32 32 3 32 3 32 3 32 32 32 32 32 3 3 3 3 3 3 32 3 3 3 3 32 32 32 32 32 3 3 3 3 32 32 32 32 32 3 32 32 32 3 3 32 32 32 3 3 32 32 32 3 3 33 32 3 32 3 32 32 3 3 3 32 3 3 32 32 32 32 32 32 32 3 32\n", "100\n31 76 76 31 31 31 31 31 31 76 31 31 76 31 31 76 31 76 31 76 31 76 76 31 31 76 76 76 31 31 31 31 31 76 31 76 31 31 31 76 76 76 76 31 76 76 31 76 76 31 76 31 31 76 31 76 31 76 31 31 76 31 31 31 31 31 76 31 31 31 31 76 31 31 31 76 76 31 31 31 76 31 76 31 76 32 77 76 76 31 76 31 31 31 76 31 31 31 76 31\n", "100\n1 1 100 100 1 100 1 1 1 1 1 1 100 1 100 100 100 1 1 100 100 100 100 100 1 100 1 100 1 1 1 100 1 1 100 1 100 1 1 1 100 100 1 1 1 100 100 100 100 100 1 100 100 1 1 1 1 100 1 1 100 1 1 1 1 100 100 100 1 100 1 100 100 100 1 1 100 100 100 100 1 100 1 100 100 1 100 1 100 100 100 100 100 100 1 1 1 100 100 1\n", "100\n55 2 69 13 65 71 65 8 9 87 57 43 64 53 3 74 55 31 87 5 79 47 9 29 5 31 59 1 79 97 48 91 36 40 92 37 76 73 21 44 98 55 47 1 96 63 37 83 35 8 50 54 84 100 62 98 88 1 78 57 48 46 55 49 30 100 11 39 27 61 38 55 67 16 95 25 76 67 20 46 91 91 50 33 65 64 82 30 31 42 85 78 42 29 2 69 12 50 54 79\n", "2\n1 1\n", "66\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "4\n3 2 99 99\n", "2\n1 70\n", "2\n1 71\n"], "outputs": ["5\n", "99\n", "60\n", "0\n", "0\n", "0\n", "50\n", "1\n", "2\n", "99\n", "47\n", "0\n", "0\n", "1\n", "69\n", "70\n"]}, "solutions": "[\"def solve():\\n    n = int(input())\\n    A = [int(k) for k in input().split()]\\n    \\n    A.sort()\\n    \\n    ans = 0\\n    \\n    for i in range(0,n,2):\\n        ans += (A[i+1] - A[i])\\n        \\n    print (ans)\\n    \\nsolve()\", \"input()\\nl = list(map(int,input().split()))\\nl.sort()\\nn = 0\\nfor x in range(len(l)//2):\\n    n += l[x*2+1]-l[x*2]\\nprint(n)\", \"import math, sys\\nfrom fractions import *\\n\\ndef mp():\\n    return list(map(int, input().split()))\\n\\ndef main():\\n    n = int(input())\\n    a = sorted(mp())\\n    i = 0\\n    ans = 0 \\n    while i < n:\\n        ans += a[i + 1] - a[i]\\n        i += 2\\n    print(ans)\\n        \\ndeb = 0\\nif deb:\\n    file = open('input.txt', 'w')\\nelse:\\n    input = sys.stdin.readline\\n    \\nmain()\", \"n = int(input())\\na = [int(x) for x in input().split()]\\na = sorted(a)\\n#print(a)\\nc = 0\\nfor i in range(1,n,2):\\n    c = c + a[i] - a[i-1]\\nprint(c)\", \"#JMD\\n#Nagendra Jha-4096\\n\\n \\nimport sys\\nimport math\\n\\n#import fractions\\n#import numpy\\n \\n###File Operations###\\nfileoperation=0\\nif(fileoperation):\\n    orig_stdout = sys.stdout\\n    orig_stdin = sys.stdin\\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\\n    sys.stdin = inputfile\\n    sys.stdout = outputfile\\n\\n###Defines...###\\nmod=1000000007\\n \\n###FUF's...###\\ndef nospace(l):\\n    ans=''.join(str(i) for i in l)\\n    return ans\\n \\n \\n \\n##### Main ####\\nt=1\\nfor tt in range(t):\\n    n=int(input())\\n    a=list(map(int,sys.stdin.readline().split(' ')))\\n    ans=0\\n\\n    a.sort()\\n    for i in range(0,n-1,2):\\n    \\tans+=abs(a[i]-a[i+1])\\n    print(ans)\\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\\n    \\n    \\n#####File Operations#####\\nif(fileoperation):\\n    sys.stdout = orig_stdout\\n    sys.stdin = orig_stdin\\n    inputfile.close()\\n    outputfile.close()\", \"def mi():\\n\\treturn list(map(int, input().split()))\\n'''\\n\\n'''\\n\\nn = int(input())\\na = list(mi())\\n\\na.sort()\\ns = 0\\nfor i in range(n):\\n\\tif i%2:\\n\\t\\tcontinue\\n\\ts+=abs(a[i+1]-a[i])\\nprint (s)\\n\", \"MOD = 10**9 + 7\\nI = lambda:list(map(int,input().split()))\\n\\nn, = I()\\nl = I()\\nl.sort()\\ncount = 0\\nfor i in range(0, n, 2):\\n    count += abs(l[i] - l[i+1])\\nprint(count)\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nans = 0\\nfor i in range(n // 2):\\n    ans += a[2 * i] - a[2 * i + 1]\\nprint(-ans)\", \"from sys import stdin\\nn=int(stdin.readline().strip())\\ns=list(map(int,stdin.readline().strip().split()))\\ns.sort()\\nans=0\\nfor i in range(0,n,2):\\n    ans+=s[i+1]-s[i]\\nprint(ans)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nans = 0\\nfor i in range(0, n, 2):\\n    ans += a[i + 1] - a[i]\\nprint(ans)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nc = 0\\nfor i in range(0, n, 2):\\n    c += a[i + 1] - a[i]\\nprint(c)\\n\", \"from bisect import bisect_right as br\\nfrom bisect import bisect_left as bl\\nfrom collections import defaultdict\\nfrom itertools import combinations\\nimport sys\\nimport math\\nMAX = sys.maxsize\\nMAXN = 10**6+10\\nMOD = 998244353\\ndef isprime(n):\\n    n = abs(int(n))\\n    if n < 2:\\n        return False\\n    if n == 2: \\n        return True    \\n    if not n & 1: \\n        return False\\n    for x in range(3, int(n**0.5) + 1, 2):\\n        if n % x == 0:\\n            return False\\n    return True\\n\\ndef mhd(a,b,x,y):\\n    return abs(a-x)+abs(b-y)\\n\\ndef numIN():\\n    return(list(map(int,sys.stdin.readline().strip().split())))\\n\\ndef charIN():\\n    return(sys.stdin.readline().strip().split())\\n\\nt = [(-1,-1)]*1000010\\n\\ndef create(a):\\n\\tnonlocal t,n\\n\\tfor i in range(n,2*n):\\n\\t\\tt[i] = (a[i-n],i-n)\\n\\tfor i in range(n-1,0,-1):\\n\\t\\tx = [t[2*i],t[2*i+1]]\\n\\t\\tx.sort(key = lambda x:x[0])\\n\\t\\tt[i] = x[1]\\n\\ndef update(idx,value):\\n\\tnonlocal t,n\\n\\tidx = idx+n\\n\\tt[idx] = value\\n\\n\\twhile(idx>1):\\n\\t\\tidx = idx//2\\n\\t\\tx = [t[2*idx],t[2*idx+1]]\\n\\t\\tx.sort(key = lambda x:x[0])\\n\\t\\tt[idx] = x[1]\\n\\n\\ndef dis(a,b,k):\\n\\tans = 0\\n\\tfor i in range(k):\\n\\t\\tans+=abs(a[i]-b[i])\\n\\treturn ans\\n\\n\\ndef cal(n,k):\\n\\tres = 1\\n\\tc = [0]*(k+1)\\n\\tc[0]=1\\n\\tfor i in range(1,n+1):\\n\\t    for j in range(min(i,k),0,-1):\\n\\t        c[j] = (c[j]+c[j-1])%MOD\\n\\treturn c[k]\\n\\n\\nn = int(input())\\nl = list(numIN())\\nl.sort()\\nans = 0\\nfor i in range(1,n,2):\\n\\tans+=l[i]-l[i-1]\\nprint(ans)\\n\\n\\n\\n\\n\", \"n=int(input())\\nA=list(map(int,input().split()))\\n\\nA.sort()\\nANS=0\\nfor i in range(n//2):\\n    ANS+=A[2*i+1]-A[2*i]\\n\\nprint(ANS)\\n\", \"n = int(input())\\n\\nseq = sorted(list(map(int, input().split())))\\n\\nans = 0\\nfor i in range(0, n, 2):\\n\\tans += seq[i+1] - seq[i]\\nprint(ans)\\n\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return list(map(int, input().split()))\\ndef li():\\n    return list(mi())\\n\\nn = ii()\\na = li()\\na.sort()\\nans = sum(a[i + 1] - a[i] for i in range(0, n, 2))\\nprint(ans)\\n\", \"n = int(input())\\na = sorted(list(map(int, input().split())))\\nanswer = 0\\nfor q in range(0, n, 2):\\n    answer += a[q+1]-a[q]\\nprint(answer)\\n\", \"n = int(input())\\na = sorted(list(map(int, input().split())))\\ncnt = 0\\nfor i in range(0, n, 2):\\n    cnt += a[i + 1] - a[i]\\nprint(cnt)\", \"n = int(input())\\na = sorted([int(i) for i in input().split()])\\n\\n\\ns = 0\\nfor i in range(0,n,2):\\n\\ts += abs(a[i+1]-a[i])\\n\\nprint(s)\\n\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\ns = 0\\nfor i in range(n // 2):\\n\\ts += a[2 * i + 1] - a[2 * i]\\nprint(s)\\n\\n\", \"n = int(input())\\nmass = list(map(int, input().split()))\\nmass.sort()\\ncnt = 0\\nfor i in range(0, n, 2):\\n    cnt += mass[i+1] - mass[i]\\nprint(cnt)\", \"#codeforces _10892B_live\\ngi = lambda : list(map(int,input().split()))\\nn, = gi()\\nl = gi()\\nans = 0\\nl.sort()\\nfor k in range(0,n,2):\\n\\tans += l[k+1] - l[k]\\nprint(ans)\", \"# alpha = \\\"abcdefghijklmnopqrstuvwxyz\\\"\\nt = 1#int(input())\\nfor test in range(t):\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    a.sort()\\n    ans = [-a[2*i]+a[2*i+1] for i in range(n//2)]\\n    print(sum(ans))\\n\", \"n=int(input())\\narr=list(map(int,input().split()))\\nans=0\\narr.sort()\\nfor i in range(0,n,2):\\n    ans+=arr[i+1]-arr[i]\\nprint(ans)\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\ns = 0\\nfor i in range(n//2):\\n  s += a[2*i+1]-a[2*i]\\nprint(s)\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}