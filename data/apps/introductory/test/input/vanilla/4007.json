{"qid": 4007, "orig_input": "There are $n$ friends who want to give gifts for the New Year to each other. Each friend should give exactly one gift and receive exactly one gift. The friend cannot give the gift to himself.\n\nFor each friend the value $f_i$ is known: it is either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$.\n\nYou want to fill in the unknown values ($f_i = 0$) in such a way that each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself. It is guaranteed that the initial information isn't contradictory.\n\nIf there are several answers, you can print any.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of friends.\n\nThe second line of the input contains $n$ integers $f_1, f_2, \\dots, f_n$ ($0 \\le f_i \\le n$, $f_i \\ne i$, all $f_i \\ne 0$ are distinct), where $f_i$ is the either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$. It is also guaranteed that there is at least two values $f_i = 0$.\n\n\n-----Output-----\n\nPrint $n$ integers $nf_1, nf_2, \\dots, nf_n$, where $nf_i$ should be equal to $f_i$ if $f_i \\ne 0$ or the number of friend whom the $i$-th friend wants to give the gift to. All values $nf_i$ should be distinct, $nf_i$ cannot be equal to $i$. Each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself.\n\nIf there are several answers, you can print any.\n\n\n-----Examples-----\nInput\n5\n5 0 0 2 4\n\nOutput\n5 3 1 2 4 \n\nInput\n7\n7 0 0 1 4 0 6\n\nOutput\n7 3 2 1 4 5 6 \n\nInput\n7\n7 4 0 3 0 5 1\n\nOutput\n7 4 2 3 6 5 1 \n\nInput\n5\n2 1 0 0 0\n\nOutput\n2 1 4 5 3", "input": "There are $n$ friends who want to give gifts for the New Year to each other. Each friend should give exactly one gift and receive exactly one gift. The friend cannot give the gift to himself.\n\nFor each friend the value $f_i$ is known: it is either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$.\n\nYou want to fill in the unknown values ($f_i = 0$) in such a way that each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself. It is guaranteed that the initial information isn't contradictory.\n\nIf there are several answers, you can print any.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of friends.\n\nThe second line of the input contains $n$ integers $f_1, f_2, \\dots, f_n$ ($0 \\le f_i \\le n$, $f_i \\ne i$, all $f_i \\ne 0$ are distinct), where $f_i$ is the either $f_i = 0$ if the $i$-th friend doesn't know whom he wants to give the gift to or $1 \\le f_i \\le n$ if the $i$-th friend wants to give the gift to the friend $f_i$. It is also guaranteed that there is at least two values $f_i = 0$.\n\n\n-----Output-----\n\nPrint $n$ integers $nf_1, nf_2, \\dots, nf_n$, where $nf_i$ should be equal to $f_i$ if $f_i \\ne 0$ or the number of friend whom the $i$-th friend wants to give the gift to. All values $nf_i$ should be distinct, $nf_i$ cannot be equal to $i$. Each friend gives exactly one gift and receives exactly one gift and there is no friend who gives the gift to himself.\n\nIf there are several answers, you can print any.\n\n\n-----Examples-----\nInput\n5\n5 0 0 2 4\n\nOutput\n5 3 1 2 4 \n\nInput\n7\n7 0 0 1 4 0 6\n\nOutput\n7 3 2 1 4 5 6 \n\nInput\n7\n7 4 0 3 0 5 1\n\nOutput\n7 4 2 3 6 5 1 \n\nInput\n5\n2 1 0 0 0\n\nOutput\n2 1 4 5 3", "test_cases": {"inputs": ["5\n5 0 0 2 4\n", "7\n7 0 0 1 4 0 6\n", "7\n7 4 0 3 0 5 1\n", "5\n2 1 0 0 0\n", "2\n0 0\n", "3\n3 0 0\n", "3\n0 0 1\n", "5\n2 0 1 0 3\n", "5\n0 4 0 2 1\n", "7\n0 1 2 3 0 4 6\n", "5\n0 0 5 3 1\n", "5\n0 0 0 1 2\n", "4\n0 1 0 2\n", "10\n6 3 0 0 0 5 0 4 2 1\n", "5\n4 5 0 0 0\n", "5\n5 0 0 2 1\n", "5\n5 4 0 0 0\n", "4\n0 0 0 0\n", "5\n5 1 2 0 0\n", "4\n3 0 0 0\n", "6\n2 0 1 5 3 0\n", "4\n2 0 0 1\n", "5\n5 0 0 1 2\n", "5\n5 0 4 0 0\n", "10\n0 3 0 0 1 5 6 9 2 8\n", "5\n5 0 4 3 0\n", "5\n0 4 0 2 0\n", "5\n2 0 0 5 1\n", "3\n0 1 0\n", "5\n0 1 0 2 4\n", "3\n2 0 0\n", "4\n0 0 4 1\n", "4\n0 0 1 0\n", "5\n5 0 1 0 2\n", "3\n0 0 2\n", "5\n0 0 4 5 3\n", "5\n0 5 1 2 0\n", "5\n2 0 0 1 4\n", "5\n4 0 0 1 2\n", "5\n5 0 0 1 4\n", "5\n0 0 0 2 1\n", "5\n0 0 1 5 4\n", "6\n5 4 0 0 1 2\n", "5\n4 0 2 1 0\n", "7\n7 6 5 0 0 0 0\n", "7\n0 4 0 0 6 7 3\n", "45\n32 3 19 7 20 16 34 6 8 41 25 21 27 13 24 5 30 36 40 22 37 23 15 28 35 42 26 4 11 44 14 31 0 12 38 0 0 17 29 9 39 0 1 45 43\n", "6\n0 6 0 2 0 4\n", "5\n0 0 4 5 1\n", "5\n3 0 1 0 2\n", "10\n6 3 0 0 0 0 0 0 2 1\n", "5\n0 5 0 1 4\n", "5\n2 3 0 0 1\n", "5\n4 0 0 2 1\n", "6\n3 1 2 0 0 4\n", "6\n5 1 6 0 0 0\n", "5\n5 0 0 3 4\n", "6\n2 1 0 0 3 5\n", "27\n12 5 17 0 24 0 11 6 19 1 14 0 15 7 21 22 8 25 20 16 0 13 2 27 26 9 0\n", "7\n0 0 0 0 0 1 0\n", "5\n0 4 0 1 2\n", "10\n6 3 0 8 9 5 0 4 2 1\n", "5\n0 1 2 0 3\n", "9\n8 0 1 6 0 4 2 7 3\n", "5\n0 4 0 5 0\n", "6\n6 0 0 3 4 5\n", "5\n4 1 0 0 2\n", "5\n3 0 0 5 4\n", "5\n2 1 5 0 0\n", "4\n0 4 0 1\n", "8\n2 0 0 3 0 4 1 7\n", "4\n0 3 0 2\n", "6\n0 0 0 2 1 5\n", "75\n0 0 25 7 33 0 65 0 54 22 0 6 1 55 43 0 0 17 0 53 69 35 0 0 67 0 0 64 51 0 0 42 73 0 20 0 39 0 32 0 34 0 0 0 0 24 0 0 71 0 68 0 0 0 26 0 0 0 18 70 0 9 41 29 48 0 56 0 38 72 0 61 0 0 58\n", "5\n5 4 0 2 0\n", "44\n0 16 36 17 0 20 0 38 26 0 23 30 42 0 0 0 0 24 0 0 0 2 9 0 0 39 18 0 0 0 28 37 7 0 0 0 0 0 41 6 0 44 8 32\n", "12\n10 9 0 8 1 0 0 2 0 4 7 11\n", "6\n2 3 4 1 0 0\n", "51\n27 45 0 0 24 39 0 2 41 0 0 0 0 0 17 0 9 38 29 16 37 0 8 0 0 20 46 22 6 0 0 4 49 13 0 0 0 7 0 0 0 14 51 12 36 0 40 0 0 0 0\n", "10\n0 3 8 6 4 0 0 0 10 2\n", "117\n0 26 37 74 0 73 0 0 0 36 0 0 0 0 0 0 0 0 0 86 116 0 114 0 0 33 96 0 0 0 0 0 0 0 59 0 41 0 91 43 0 0 89 0 15 0 19 9 54 0 0 82 0 56 0 93 18 85 117 55 0 0 6 0 0 63 0 0 0 0 0 0 115 46 28 0 8 0 0 76 20 25 12 90 0 0 40 0 7 38 0 0 0 112 0 0 0 0 0 0 0 0 0 51 0 62 0 0 0 0 81 0 0 0 68 65 99\n", "11\n0 8 0 11 0 0 4 2 10 3 0\n", "5\n2 1 0 0 3\n", "10\n2 3 4 5 6 7 8 9 0 0\n", "9\n8 0 5 6 3 4 9 7 0\n", "6\n3 6 0 0 1 2\n", "5\n0 3 2 0 1\n", "93\n0 71 54 56 8 73 33 82 26 79 57 15 24 89 85 69 62 9 39 12 77 28 64 65 20 93 34 53 10 47 68 52 35 43 19 18 84 49 88 7 31 74 29 38 50 51 83 2 32 4 6 36 40 11 46 87 41 42 86 23 45 44 92 1 90 55 70 30 91 21 37 14 48 66 60 72 61 25 5 27 0 13 75 76 59 16 80 58 3 17 63 78 22\n", "104\n24 0 77 92 89 16 0 81 46 0 12 0 0 0 0 0 74 0 0 88 0 21 20 55 6 0 33 5 0 76 8 68 17 0 0 7 0 0 0 35 0 87 32 14 102 59 49 0 0 11 0 0 0 23 57 31 22 99 63 38 0 0 0 90 0 25 0 0 19 0 50 0 0 0 60 48 0 0 0 0 0 0 0 0 42 0 0 0 98 97 10 65 86 95 0 4 0 45 0 0 75 82 0 78\n", "6\n0 0 0 2 1 0\n", "7\n2 1 0 0 0 3 4\n", "9\n0 6 0 0 7 1 5 3 0\n", "7\n2 0 0 0 0 0 0\n", "46\n16 34 13 0 42 14 25 29 11 7 38 26 0 1 0 0 22 0 27 19 35 31 32 46 24 10 6 8 40 5 9 33 43 17 41 45 0 20 37 0 18 44 0 12 3 15\n", "5\n3 1 0 2 0\n", "12\n2 3 4 5 12 1 0 10 8 11 9 0\n", "4\n3 0 2 0\n", "10\n6 3 0 0 0 0 0 2 1 0\n", "4\n4 1 0 0\n", "19\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "5\n5 3 2 0 0\n", "9\n3 1 2 9 0 0 8 7 6\n", "9\n2 0 1 3 4 5 6 0 7\n", "5\n0 0 0 0 1\n", "7\n0 0 1 0 3 2 0\n", "5\n0 0 0 2 4\n", "5\n0 3 0 1 0\n", "11\n7 11 10 9 8 0 0 0 0 0 0\n", "9\n0 1 2 3 4 5 6 7 0\n", "116\n37 0 0 50 0 29 73 0 97 53 0 0 24 1 2 30 0 0 0 68 107 7 0 0 104 85 0 103 111 0 25 0 0 100 36 0 19 82 88 0 0 92 0 62 64 13 0 83 3 0 0 0 0 0 38 101 105 18 6 0 48 0 70 0 116 0 0 0 32 108 0 8 16 0 0 0 75 0 78 0 56 0 110 63 0 0 0 0 15 23 0 0 40 42 0 90 0 94 59 67 0 0 28 34 0 11 21 0 0 33 0 35 57 14 0 10\n", "6\n0 1 5 3 2 0\n", "7\n7 6 1 0 3 0 5\n", "4\n0 1 0 0\n", "148\n0 110 76 0 0 106 56 107 0 115 0 0 8 0 0 0 0 74 15 58 108 78 0 0 0 29 28 0 103 25 0 0 0 13 0 0 0 126 0 0 0 0 124 12 0 10 0 0 141 19 135 0 84 30 0 100 86 118 95 0 0 134 0 0 0 0 101 0 128 7 5 0 91 0 138 57 112 43 9 0 52 0 0 0 16 0 11 0 0 63 109 0 0 142 53 99 0 0 129 148 21 0 1 0 0 88 31 0 0 0 0 48 0 37 146 145 62 23 0 82 0 70 0 0 0 113 54 0 26 64 0 0 136 114 0 0 0 47 0 83 92 0 0 69 123 0 0 81\n", "32\n0 20 17 31 0 0 18 22 0 0 0 0 0 0 0 13 12 0 0 8 15 0 5 0 0 0 16 32 0 0 14 0\n", "48\n0 38 9 45 48 0 41 30 21 44 0 0 5 0 47 18 35 0 43 0 15 24 0 4 0 0 13 11 32 0 0 33 0 25 39 16 0 0 0 20 7 6 0 3 31 36 0 0\n", "5\n5 1 0 0 0\n", "5\n5 0 2 0 1\n", "6\n0 4 2 0 1 0\n", "5\n5 0 0 3 1\n", "12\n10 0 12 11 0 0 6 0 7 4 5 8\n", "115\n109 0 65 0 0 54 37 33 0 0 74 0 0 10 93 0 0 39 87 0 67 68 0 41 44 0 35 0 0 0 82 64 0 52 31 0 0 0 13 0 0 0 0 59 0 43 53 0 0 0 0 29 0 38 0 42 92 47 102 98 3 0 0 1 81 45 9 17 26 80 5 0 104 91 18 36 0 0 8 0 0 0 25 0 72 4 21 0 0 0 78 77 97 56 0 0 0 0 0 88 22 83 105 0 6 0 0 73 0 40 0 108 50 19 28\n", "143\n0 0 0 76 121 0 9 0 0 0 0 0 83 53 0 0 0 15 0 102 0 3 0 0 0 0 28 0 99 115 60 0 55 0 5 70 0 0 78 0 0 48 33 0 0 139 0 0 0 111 2 0 0 0 0 0 0 80 0 52 0 0 116 0 0 0 10 0 75 0 86 107 0 0 7 0 50 0 47 141 123 0 1 85 0 71 128 0 73 0 0 131 0 62 114 0 0 0 0 66 77 74 0 14 61 0 103 0 0 0 134 11 98 0 0 117 0 89 0 129 58 0 0 138 35 0 142 135 0 0 0 20 118 125 0 21 59 0 90 72 0 112 0\n", "95\n0 10 12 2 0 58 0 0 17 83 59 33 23 0 0 0 11 92 24 0 5 0 52 16 40 90 62 50 66 72 0 71 0 55 0 0 0 48 0 0 0 44 32 45 69 56 0 41 0 86 54 21 0 0 95 65 64 0 0 0 85 0 39 30 0 0 81 0 28 4 0 20 34 80 89 0 0 19 31 0 0 0 0 0 0 70 36 38 87 0 93 0 0 68 60\n", "13\n0 3 13 10 8 0 5 0 4 0 0 0 0\n", "6\n2 0 5 1 3 0\n", "6\n3 0 5 1 2 0\n", "4\n0 0 1 3\n", "4\n2 0 1 0\n"], "outputs": ["5 3 1 2 4 \n", "7 3 2 1 4 5 6 \n", "7 4 2 3 6 5 1 \n", "2 1 4 5 3 \n", "2 1 \n", "3 1 2 \n", "2 3 1 \n", "2 4 1 5 3 \n", "3 4 5 2 1 \n", "5 1 2 3 7 4 6 \n", "2 4 5 3 1 \n", "3 5 4 1 2 \n", "3 1 4 2 \n", "6 3 7 9 10 5 8 4 2 1 \n", "4 5 1 2 3 \n", "5 3 4 2 1 \n", "5 4 1 2 3 \n", "2 3 4 1 \n", "5 1 2 3 4 \n", "3 4 1 2 \n", "2 6 1 5 3 4 \n", "2 3 4 1 \n", "5 3 4 1 2 \n", "5 1 4 2 3 \n", "4 3 10 7 1 5 6 9 2 8 \n", "5 1 4 3 2 \n", "3 4 5 2 1 \n", "2 3 4 5 1 \n", "3 1 2 \n", "3 1 5 2 4 \n", "2 3 1 \n", "2 3 4 1 \n", "3 4 1 2 \n", "5 4 1 3 2 \n", "3 1 2 \n", "2 1 4 5 3 \n", "3 5 1 2 4 \n", "2 3 5 1 4 \n", "4 3 5 1 2 \n", "5 3 2 1 4 \n", "3 5 4 2 1 \n", "2 3 1 5 4 \n", "5 4 6 3 1 2 \n", "4 5 2 1 3 \n", "7 6 5 1 2 3 4 \n", "2 4 1 5 6 7 3 \n", "32 3 19 7 20 16 34 6 8 41 25 21 27 13 24 5 30 36 40 22 37 23 15 28 35 42 26 4 11 44 14 31 2 12 38 10 18 17 29 9 39 33 1 45 43 \n", "3 6 5 2 1 4 \n", "2 3 4 5 1 \n", "3 4 1 5 2 \n", "6 3 9 5 7 10 8 4 2 1 \n", "3 5 2 1 4 \n", "2 3 4 5 1 \n", "4 3 5 2 1 \n", "3 1 2 5 6 4 \n", "5 1 6 2 3 4 \n", "5 1 2 3 4 \n", "2 1 4 6 3 5 \n", "12 5 17 3 24 4 11 6 19 1 14 10 15 7 21 22 8 25 20 16 18 13 2 27 26 9 23 \n", "6 3 4 5 7 1 2 \n", "3 4 5 1 2 \n", "6 3 7 8 9 5 10 4 2 1 \n", "4 1 2 5 3 \n", "8 5 1 6 9 4 2 7 3 \n", "3 4 1 5 2 \n", "6 1 2 3 4 5 \n", "4 1 5 3 2 \n", "3 1 2 5 4 \n", "2 1 5 3 4 \n", "3 4 2 1 \n", "2 5 8 3 6 4 1 7 \n", "4 3 1 2 \n", "3 6 4 2 1 5 \n", "3 8 25 7 33 4 65 11 54 22 16 6 1 55 43 19 5 17 23 53 69 35 27 10 67 12 30 64 51 31 36 42 73 13 20 40 39 14 32 44 34 15 21 45 47 24 50 28 71 52 68 57 37 46 26 49 66 59 18 70 60 9 41 29 48 74 56 62 38 72 63 61 75 2 58 \n", "5 4 1 2 3 \n", "5 16 36 17 10 20 3 38 26 14 23 30 42 15 19 4 11 24 21 12 25 2 9 13 29 39 18 22 34 27 28 37 7 35 1 31 33 40 41 6 43 44 8 32 \n", "10 9 6 8 1 3 5 2 12 4 7 11 \n", "2 3 4 1 6 5 \n", "27 45 10 1 24 39 5 2 41 11 25 15 18 19 17 21 9 38 29 16 37 23 8 26 30 20 46 22 6 31 35 4 49 13 48 28 32 7 33 34 42 14 51 12 36 43 40 50 44 3 47 \n", "7 3 8 6 4 5 1 9 10 2 \n", "5 26 37 74 11 73 2 3 4 36 13 10 14 16 21 17 22 23 27 86 116 24 114 29 35 33 96 39 30 31 32 34 45 42 59 47 41 48 91 43 49 44 89 50 15 52 19 9 54 53 57 82 61 56 58 93 18 85 117 55 64 60 6 67 66 63 69 75 70 71 72 78 115 46 28 77 8 79 88 76 20 25 12 90 80 83 40 92 7 38 84 95 87 112 97 94 98 100 104 101 102 103 105 51 107 62 108 109 110 113 81 106 1 111 68 65 99 \n", "5 8 7 11 6 1 4 2 10 3 9 \n", "2 1 4 5 3 \n", "2 3 4 5 6 7 8 9 10 1 \n", "8 1 5 6 3 4 9 7 2 \n", "3 6 4 5 1 2 \n", "4 3 2 5 1 \n", "81 71 54 56 8 73 33 82 26 79 57 15 24 89 85 69 62 9 39 12 77 28 64 65 20 93 34 53 10 47 68 52 35 43 19 18 84 49 88 7 31 74 29 38 50 51 83 2 32 4 6 36 40 11 46 87 41 42 86 23 45 44 92 1 90 55 70 30 91 21 37 14 48 66 60 72 61 25 5 27 67 13 75 76 59 16 80 58 3 17 63 78 22 \n", "24 13 77 92 89 16 1 81 46 3 12 9 15 27 18 28 74 26 30 88 36 21 20 55 6 29 33 5 34 76 8 68 17 37 40 7 39 43 41 35 51 87 32 14 102 59 49 44 47 11 52 53 61 23 57 31 22 99 63 38 62 67 54 90 56 25 70 58 19 72 50 73 79 64 60 48 66 69 80 83 71 85 84 100 42 91 93 94 98 97 10 65 86 95 96 4 101 45 104 103 75 82 2 78 \n", "4 5 6 2 1 3 \n", "2 1 5 7 6 3 4 \n", "2 6 8 9 7 1 5 3 4 \n", "2 1 4 5 6 7 3 \n", "16 34 13 2 42 14 25 29 11 7 38 26 4 1 21 23 22 28 27 19 35 31 32 46 24 10 6 8 40 5 9 33 43 17 41 45 30 20 37 36 18 44 39 12 3 15 \n", "3 1 5 2 4 \n", "2 3 4 5 12 1 6 10 8 11 9 7 \n", "3 4 2 1 \n", "6 3 8 5 7 9 10 2 1 4 \n", "4 1 2 3 \n", "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 1 \n", "5 3 2 1 4 \n", "3 1 2 9 4 5 8 7 6 \n", "2 8 1 3 4 5 6 9 7 \n", "5 3 4 2 1 \n", "5 6 1 7 3 2 4 \n", "3 5 1 2 4 \n", "4 3 5 1 2 \n", "7 11 10 9 8 1 2 3 4 5 6 \n", "9 1 2 3 4 5 6 7 8 \n", "37 4 9 50 12 29 73 20 97 53 22 17 24 1 2 30 27 26 31 68 107 7 39 44 104 85 41 103 111 45 25 46 49 100 36 55 19 82 88 58 43 92 47 62 64 13 51 83 3 61 52 54 65 60 38 101 105 18 6 66 48 69 70 72 116 71 77 79 32 108 74 8 16 76 81 80 75 84 78 86 56 89 110 63 93 87 91 96 15 23 95 98 40 42 102 90 99 94 59 67 106 109 28 34 112 11 21 113 115 33 114 35 57 14 5 10 \n", "6 1 5 3 2 4 \n", "7 6 1 2 3 4 5 \n", "2 1 4 3 \n", "2 110 76 14 3 106 56 107 6 115 18 20 8 17 22 27 24 74 15 58 108 78 34 32 38 29 28 44 103 25 46 33 35 13 36 39 49 126 40 41 42 45 124 12 55 10 50 51 141 19 135 59 84 30 60 100 86 118 95 61 65 134 67 71 66 68 101 72 128 7 5 80 91 73 138 57 112 43 9 89 52 75 77 79 16 85 11 87 93 63 109 90 97 142 53 99 98 102 129 148 21 104 1 105 111 88 31 94 96 116 119 48 117 37 146 145 62 23 121 82 125 70 120 122 131 113 54 127 26 64 132 137 136 114 130 133 139 47 143 83 92 140 147 69 123 144 4 81 \n", "6 20 17 31 2 9 18 22 10 11 19 3 4 7 21 13 12 23 24 8 15 27 5 25 26 29 16 32 30 1 14 28 \n", "12 38 9 45 48 2 41 30 21 44 8 14 5 23 47 18 35 10 43 17 15 24 26 4 19 37 13 11 32 22 27 33 28 25 39 16 1 29 34 20 7 6 40 3 31 36 42 46 \n", "5 1 4 3 2 \n", "5 4 2 3 1 \n", "5 4 2 6 1 3 \n", "5 4 2 3 1 \n", "10 1 12 11 2 3 6 9 7 4 5 8 \n", "109 12 65 7 11 54 37 33 14 15 74 16 24 10 93 20 27 39 87 23 67 68 30 41 44 32 35 34 46 48 82 64 57 52 31 58 60 61 13 66 69 70 71 59 75 43 53 49 51 76 55 29 79 38 62 42 92 47 102 98 3 63 84 1 81 45 9 17 26 80 5 85 104 91 18 36 86 94 8 100 101 103 25 89 72 4 21 110 90 95 78 77 97 56 96 99 112 113 106 88 22 83 105 114 6 107 111 73 115 40 2 108 50 19 28 \n", "4 13 18 76 121 8 9 12 22 27 29 16 83 53 30 17 19 15 23 102 31 3 24 25 26 32 28 36 99 115 60 34 55 37 5 70 38 40 78 41 44 48 33 45 49 139 39 42 54 111 2 43 46 56 51 57 64 80 63 52 67 69 116 65 68 79 10 82 75 81 86 107 84 87 7 92 50 94 47 141 123 88 1 85 95 71 128 91 73 100 93 131 96 62 114 97 106 101 104 66 77 74 105 14 61 108 103 109 110 119 134 11 98 113 120 117 124 89 122 129 58 126 127 138 35 130 142 135 132 143 133 20 118 125 136 21 59 137 90 72 140 112 6 \n", "7 10 12 2 3 58 8 14 17 83 59 33 23 15 22 6 11 92 24 9 5 35 52 16 40 90 62 50 66 72 13 71 18 55 37 25 47 48 26 27 29 44 32 45 69 56 49 41 53 86 54 21 76 42 95 65 64 43 46 51 85 57 39 30 61 63 81 67 28 4 73 20 34 80 89 77 82 19 31 74 75 84 78 1 79 70 36 38 87 88 93 91 94 68 60 \n", "6 3 13 10 8 11 5 2 4 7 12 1 9 \n", "2 6 5 1 3 4 \n", "3 6 5 1 2 4 \n", "2 4 1 3 \n", "2 4 1 3 \n"]}, "solutions": "[\"import sys\\ninput = sys.stdin.readline\\n\\nn=int(input())\\nF=list(map(int,input().split()))\\n\\nUSE=[0]*(n+1)\\n\\nB=[]\\nfor i in range(n):\\n    USE[F[i]]=1\\n    if F[i]==0:\\n        B.append(i+1)\\n\\nA=[]\\nfor i in range(1,n+1):\\n    if USE[i]==0:\\n        A.append(i)\\n        \\nfor i in range(len(A)-1):\\n    if A[i]==B[i]:\\n        A[i],A[i+1]=A[i+1],A[i]\\n\\nif A[-1]==B[-1]:\\n    A[-1],A[-2]=A[-2],A[-1]\\n\\nind=0\\n\\nfor i in range(n):\\n    if F[i]==0:\\n        F[i]=A[ind]\\n        ind+=1\\n\\nprint(*F)\\n\", \"n = int(input())\\nls = list(map(int, input().split()))\\n\\nnogive = set(list(range(1,n+1)))\\nnoget = set(list(range(1,n+1)))\\nfor i,e in enumerate(ls):\\n    if e != 0:\\n        nogive.remove(i+1)\\n        noget.remove(e)\\n\\nprio = nogive.intersection(noget)\\n\\nwhile len(nogive):\\n    if len(prio):\\n        giver = prio.pop()\\n        nogive.remove(giver)\\n    else:\\n        giver = nogive.pop()\\n\\n    if len(prio):\\n        getter = prio.pop()\\n        noget.remove(getter)\\n    else:\\n        getter = noget.pop()\\n        if getter == giver:\\n            getter2 = noget.pop()\\n            noget.add(getter)\\n            getter = getter2\\n    ls[giver-1] = getter\\n\\nfor e in ls:\\n    print(e, end=' ')\\n\\n\\n    \\n\", \"N = int(input())\\n\\narr = list(map(int, input().split()))\\n\\nuniq = set(arr)\\nuniq.remove(0)\\n\\nnot_found = [x for x in range(1,N+1) if x not in uniq]\\n\\nimport random\\nwhile True:\\n  random.shuffle(not_found)\\n  arr2 = arr.copy()\\n  idx = 0\\n  for i in range(N):\\n    if arr2[i] == 0:\\n      arr2[i] = not_found[idx]\\n      idx += 1\\n  if not any(i+1==x for i,x in enumerate(arr2)):\\n    print(' '.join(map(str, arr2)))\\n    break\\n\\n\", \"n = int(input())\\nmas = list(map(int, input().split()))\\ncou = []\\nfor i in range(n + 1):\\n\\tcou.append(0)\\nx = -1\\nfor i in range(n):\\n\\tif mas[i] == 0:\\n\\t\\tif x == -1:\\n\\t\\t\\tx = i\\n\\t\\telse:\\n\\t\\t\\ty = i\\nfor i in range(n):\\n\\tcou[mas[i]] = 1\\nnum = n\\nfor i in range (1, n + 1):\\n\\tif cou[i] != 1:\\n\\t\\tcou[i] = 1\\n\\t\\twhile True:\\n\\t\\t\\tnum -= 1\\n\\t\\t\\tif mas[num] == 0:\\n\\t\\t\\t\\tmas[num] = i\\n\\t\\t\\t\\tbreak\\nfor i in range(n):\\n\\tif mas[i] == i + 1:\\n\\t\\tif i == x:\\n\\t\\t\\tmas[i], mas[y] = mas[y], mas[i]\\n\\t\\telse:\\n\\t\\t\\tmas[i], mas[x] = mas[x], mas[i]\\nprint(*mas)\\n\", \"from sys import stdin,stdout\\nn=int(stdin.readline().strip())\\ns=list(map(int,stdin.readline().strip().split()))\\n\\nvis=[False for i in range(n+10)]\\nfor i in s:\\n    vis[i]=True\\nnu=[]\\nnu1=[]\\nfor i in range(1,n+1):\\n    if not vis[i]:\\n        if s[i-1]==0:\\n            nu.append(i)\\n        else:\\n            nu1.append(i)\\nnu.sort()\\nwhile len(nu)>=2:\\n    if len(nu)%2!=0:\\n        s[nu[-3]-1]=nu[-1]\\n        s[nu[-1]-1]=nu[-2]\\n        s[nu[-2]-1]=nu[-3]\\n        nu.pop()\\n        nu.pop()\\n        nu.pop()\\n        continue\\n    s[nu[-1]-1]=nu[-2]\\n    s[nu[-2]-1]=nu[-1]\\n    nu.pop()\\n    nu.pop()\\n\\n\\nif len(nu)==1:\\n    s[nu[-1]-1]=nu1[-1]\\n    nu1.pop()\\n    nu1.append(nu[-1])\\nfor i in range(n):\\n    if s[i]==0:\\n        s[i]=nu1[-1]\\n        nu1.pop()\\nprint(*s)\\n\\n    \\n\", \"n = int(input())\\nl = list(map(int,input().split()))\\ndostal = [0] * (n+1)\\nfor i in range(n):\\n\\tdostal[l[i]] = 1\\ndo_dania = []\\nind = []\\nfor i in range(n):\\n\\tif l[i] == 0:\\n\\t\\tind.append(i)\\nfor i in range(1, n+1):\\n\\tif dostal[i] == 0:\\n\\t\\tdo_dania.append(i)\\n#print(do_dania)\\nj = 0\\nfor i in range(n):\\n\\tif l[i] == 0:\\n\\t\\tl[i] = do_dania[j]\\n\\t\\tj += 1\\nfor i in range(len(ind) - 1):\\n\\tif l[ind[i]] == ind[i] + 1:\\n\\t\\tkk = l[ind[i]]\\n\\t\\tl[ind[i]] = l[ind[i+1]]\\n\\t\\tl[ind[i+1]] = kk\\nif l[ind[-1]] == ind[-1] + 1:\\n\\tkk = l[ind[-1]]\\n\\tl[ind[-1]] = l[ind[0]]\\n\\tl[ind[0]] = kk\\nprint(*l)\", \"\\nN = int(input())\\n\\na = list(map(int,input().split()))\\n\\nend = [False] * N\\ngive = []\\n\\nfor i in range(N):\\n\\n    if a[i] != 0:\\n        end[a[i] - 1] = True\\n\\n    else:\\n        give.append(i)\\n\\nwant = []\\n\\nfor i in range(N):\\n    if not end[i]:\\n        want.append(i)\\n\\n#print (give)\\n#print (want)\\n\\nfor i in range(len(give) - 1):\\n\\n    if give[i] == want[i]:\\n        t = want[i+1]\\n        want[i+1] = want[i]\\n        want[i] = t\\n\\nif give[-1] == want[-1]:\\n    t = want[-1]\\n    want[-1] = want[-2]\\n    want[-2] = t\\n\\nfor i in range(len(give)):\\n\\n    a[give[i]] = want[i] + 1\\n\\nprint(\\\" \\\".join(map(str,a)))\\n\", \"q=int(input())\\nw=list(map(int,input().split()))\\ne=[0]*q\\nr=[]\\nt=[]\\nfor i in range(q):\\n    if w[i]==0:r.append(i)\\n    else:e[w[i]-1]=1\\nfor i in range(q):\\n    if e[i]==0:t.append(i)\\nfor i in range(len(r)):\\n    if r[i]==t[i]:\\n        if i==0:t[i],t[1]=t[1],t[i]\\n        else:t[i],t[0]=t[0],t[i]\\nfor i in range(len(r)):\\n    w[r[i]]=t[i]+1\\nprint(*w)\", \"import random\\nn = int(input())\\na = [int(x) for x in input().split()]\\nj = 1\\nb = [0] * (n+1)\\nfor i in a:\\n  b[i] = 1\\nc = []\\nfor i,j in enumerate(b):\\n  if j == 0:\\n    c.append(i)\\nc = set(c)\\nfor i in range(1,n+1):\\n  i = i - 1\\n  if a[i] == 0:\\n    if i + 1 in c:\\n      for k in c:\\n        if k!=i+1:\\n          a[i] = k\\n          c.remove(k)\\n          break\\nfor i in range(1,n+1):\\n  i = i - 1\\n  if a[i] == 0:\\n    for k in c:\\n      if k!=i+1:\\n        a[i] = k\\n        c.remove(k)\\n        break\\nfor i in a:\\n  print(i,end=\\\" \\\")\", \"n=int(input())\\na=list(map(int,input().split()))\\nvis=[False for i in range(n+1)]\\nc={}\\nfor i in range(n):\\n    if a[i] is not 0:\\n        vis[a[i]]=True\\n    else:\\n        c[i]=True\\nd={}\\nfor i in range(1,n+1):\\n    if vis[i]==False:\\n        d[i]=True\\ndelete=[]\\nfor i in c:\\n    if i+1 in d:\\n        k=0\\n        for j in d:\\n            if j is not i+1:\\n                a[i]=j\\n                k=j\\n                break\\n        d.pop(k)\\n        delete.append(i)\\nfor i in delete:\\n    c.pop(i)\\np=[i for i in c]\\nq=[i for i in d]\\nfor i in range(len(p)):\\n    a[p[i]]=q[i]\\nprint(\\\" \\\".join(map(str,a)))\", \"import sys\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int, minp().split()))\\n\\ndef solve():\\n\\tn = mint()\\n\\tf = list(mints())\\n\\tw = [False]*(n+1)\\n\\tp = [False]*(n+1)\\n\\tfor i in f:\\n\\t\\tp[i] = True\\n\\tq = []\\n\\tfor i in range(1, n+1):\\n\\t\\tif w[i] or p[i]:\\n\\t\\t\\tcontinue\\n\\t\\ts = i\\n\\t\\te = i\\n\\t\\tw[i] = True\\n\\t\\tok = True\\n\\t\\twhile f[e-1] != 0:\\n\\t\\t\\te = f[e-1]\\n\\t\\t\\tif e == s:\\n\\t\\t\\t\\tok = False\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tw[e] = True\\n\\t\\tif ok:\\n\\t\\t\\tq.append((s,e))\\n\\tfor i in range(len(q)-1):\\n\\t\\tf[q[i][1]-1] = q[i+1][0]\\n\\tf[q[-1][1]-1] = q[0][0]\\n\\t#print(q)\\n\\tprint(' '.join(map(str,f)))\\n\\n#for i in range(mint()):\\nsolve()\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\nnew=[-1]*n\\nfor i in l:\\n\\tif i!=0:\\n\\t\\tnew[i-1]=0\\nd=[]\\nfor i in range(n):\\n\\tif new[i]==-1:\\n\\t\\td.append(i+1)\\nloc=0\\nans=[]\\nindex=[]\\nflag=0\\nfor i in range(n):\\n\\tif l[i]!=0:\\n\\t\\tans.append(l[i])\\n\\telse:\\n\\t\\tif d[loc]!=i+1 and flag==0:\\n\\t\\t\\tans.append(d[loc])\\n\\t\\t\\tif len(index)==0:\\n\\t\\t\\t\\tindex.append(i)\\n\\t\\telse:\\n\\t\\t\\tif len(index)!=0:\\n\\t\\t\\t\\tans.append(d[loc])\\n\\t\\t\\t\\tans[-1],ans[index[-1]]=ans[index[-1]],ans[-1]\\n\\t\\t\\t\\tflag=0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tflag=1\\n\\t\\t\\t\\tans.append(d[loc])\\n\\t\\t\\t\\tif len(index)==0:\\n\\t\\t\\t\\t\\tindex.append(i)\\n\\t\\tloc+=1\\nprint (*ans)\", \"n = int(input())\\na = list(map(int, input().split()))\\nsend = []\\nrecv = []\\nvis = [0] * n\\nfor i in range(n):\\n    if a[i] == 0:\\n        send.append(i+1)\\n    else:\\n        vis[a[i]-1] = 1\\nfor i in range(n):\\n    if vis[i] == 0:\\n        recv.append(i+1)\\nsend.sort()\\nrecv.sort()\\nrecv = list(set(send) & set(recv)) + list(set(recv) - set(send))\\np = 0\\nfor i in range(len(send)):\\n    while recv[p] == -1:\\n        p = (p+1) % len(recv)\\n    if send[i] == recv[p]:\\n            p = (p+1) % len(recv)\\n            while recv[p] == -1:\\n                p = (p+1) % len(recv)\\n    a[send[i]-1] = recv[p]\\n    recv[p] = -1\\n    p = (p+1) % len(recv)\\nprint(*a)        \\n\", \"import sys\\n\\nn, *f = map(int, sys.stdin.read().split())\\nf = [None] + f\\n\\ndef main():\\n    no_receieve = set(range(1, n+1)) - set(f[1:])\\n    if not no_receieve:\\n        return f[1:]\\n    \\n    no_send = []\\n    for i in range(1, n+1):\\n        if f[i] == 0:\\n            no_send.append(i)\\n    \\n    no_send.sort()\\n    no_receieve = sorted(no_receieve, reverse=True)\\n\\n    for i in range(len(no_send)):\\n        if no_send[i] == no_receieve[i]:\\n            if i >= 1:\\n                no_send[i], no_send[i-1] = no_send[i-1], no_send[i]\\n            else:\\n                no_send[0], no_send[1] = no_send[1], no_send[0]\\n    \\n    for i in range(len(no_send)):\\n        f[no_send[i]] = no_receieve[i]\\n    \\n    return f[1:]\\n\\ndef __starting_point():\\n    ans = main()\\n    print(*ans, sep=' ')\\n__starting_point()\", \"from sys import stdin\\nfrom collections import deque\\nmod = 10**9 + 7\\nimport sys\\n# def rl():\\n#     return [int(w) for w in stdin.readline().split()]\\nfrom bisect import bisect_right\\nfrom bisect import bisect_left\\nfrom collections import defaultdict\\nfrom math import sqrt,factorial,gcd,log2,inf,ceil\\n# map(int,input().split())\\n# # l = list(map(int,input().split()))\\n# from itertools import permutations\\nimport heapq\\n\\n# n,k = map(int,input().split())\\n# x = int(input())\\n# s = str(x)\\n#\\n# ans = ['0']*n\\n#\\n# flag = 0\\n#\\n# for i in range(n):\\n#   if i-k>=0:\\n#       ans[i] = ans[i-k]\\n#       if ans[i]<s[i]:\\n#           flag = 1\\n#           break\\n#   else:\\n#       ans[i] = s[i]\\n# s1 = ''.join(ans)\\n# if not flag:\\n#     print(n)\\n#     print(s1)\\n#     return\\n# flag = 0\\n# ans = ['0']*n\\n#\\n# for i in range(k-1,-1,-1):\\n#     if s[i] == '9':\\n#         continue\\n#     else:\\n#         ans[i] = str(int(s[i]) + 1)\\n#         flag = 1\\n#\\n#         for j in range(i+1,k-1):\\n#             ans[j] = '0'\\n#         for j in range(i):\\n#             ans[j] = s[j]\\n#         break\\n# if flag:\\n#\\n#  for i in range(k,n):\\n#    if i-k<0:\\n#      continue\\n#\\n#    else:\\n#        ans[i] = ans[i-k]\\n#\\n#\\n#  print(len(ans))\\n#  print(''.join(ans))\\n#\\n# else:\\n#\\n#     if s[0] != '9':\\n#         for i in range(n):\\n#             if i-k<0:\\n#               if i == 0:\\n#                  ans[i] = str(int(s[i]) + 1)\\n#               else:\\n#                   ans[i] = '0'\\n#             else:\\n#                 ans[i] = ans[i-k]\\n#         print(len(ans))\\n#         print(''.join(ans))\\n#     else:\\n#         # print(ans)\\n#         ans+=['0']\\n#         for i in range(n+1):\\n#             if i-k<0:\\n#                 if i == 0:\\n#                     ans[i] = '1'\\n#                 else:\\n#                     ans[i] = '0'\\n#             else:\\n#                 ans[i] = ans[i-k]\\n#         print(len(ans))\\n#         print(''.join(ans))\\n#\\n#\\n\\n\\n\\n\\n#\\n# t = int(input())\\n#\\n# for _ in range(t):\\n#\\n#     n,s = map(int,input().split())\\n#     l = list(map(int,input().split()))\\n#     pa = []\\n#     ans = 0\\n#     if sum(l)<=s:\\n#         print(0)\\n#         continue\\n#     for i in range(n-1):\\n#\\n#         if l[i]>l[i+1]:\\n#             if pa == []:\\n#               pa.append(l[i])\\n#               ans = i+1\\n#             else:\\n#                if pa[0]<l[i] and s-pa[0]>=0:\\n#\\n#                    s-=pa[0]\\n#                    pa.pop()\\n#                    pa.append(l[i])\\n#                    ans = i+1\\n#                    if s == 0:\\n#                        break\\n#                else:\\n#                    if s>=l[i]:\\n#                        s-=l[i]\\n#                    else:\\n#                        break\\n#\\n#         else:\\n#             if s>=l[i]:\\n#                 s-=l[i]\\n#             else:\\n#                 break\\n#\\n#     print(ans)\\n\\n\\n\\n\\n\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n#\\n# t = int(input())\\n#\\n# for _ in range(t):\\n#\\n#     n,m = map(int,input().split())\\n#     l1 = list(map(int,input().split()))\\n#     l2 = list(map(int,input().split()))\\n#     hash = defaultdict(int)\\n#\\n#     seti = set(l2)\\n#     for i in range(n):\\n#         if l1[i] in seti:\\n#             hash[l1[i]] = i\\n#     st = []\\n#     ans = 0\\n#     s = set(l1)\\n#     for i in range(m):\\n#           if l2[i] in s:\\n#              if st == []:\\n#                  z = hash[l2[i]]\\n#                  st.append(z)\\n#                  ans+=2*z + 1\\n#              else:\\n#                  z = hash[l2[i]]\\n#                  # print(i,z)\\n#                  if st[0]>z:\\n#                      ans+=1\\n#                  else:\\n#                      ans+=2*(z-1)+1\\n#                      st.pop()\\n#                      st.append(z-1)\\n#\\n#     print(ans)\\n#\\n#\\n#\\n\\n\\n\\nn = int(input())\\nl = list(map(int,input().split()))\\nla = [i+1 for i in range(n)]\\ns = set(la)\\nyo = set()\\nfor i in l:\\n  if i is not 0:\\n    s.remove(i)\\n    yo.add(i)\\nk = list(s)\\nk.sort()\\nfor i in range(n):\\n    if l[i] == 0:\\n        z = k.pop()\\n        l[i] = z\\n\\nfor i in range(n):\\n    if l[i] == i+1:\\n\\n        for j in range(n):\\n          if l[j] not in yo:\\n            if l[j] == j+1 and i!=j:\\n                l[i],l[j] = l[j],l[i]\\n                break\\n            else:\\n                if l[j]!=i+1 and l[i]!=j+1:\\n                    l[i],l[j] = l[j],l[i]\\n                    break\\n\\n\\n\\n\\n        break\\n\\nprint(*l)\\n\\n\\n\", \"n = int(input())\\nl = list(map(int, input().strip().split()))\\nrecieved = [False for i in range(n+1)]\\nrecieved[0] = True\\nfor i in range(len(l)):\\n    recieved[l[i]] = True\\nrecievedNotGiven = []\\ngivenNotRecieved = []\\nboth = []\\nfor i in range(1,n+1):\\n    if l[i-1] == 0 and recieved[i] == False:\\n        both.append(i)\\n    elif l[i-1] == 0:\\n        recievedNotGiven.append(i)\\n    elif recieved[i] == False:\\n        givenNotRecieved.append(i)\\nif len(both) != 1:\\n    for i in range(len(recievedNotGiven)):\\n        l[recievedNotGiven[i]-1] = givenNotRecieved[i]\\n    for i in range(len(both)):\\n        if i < len(both)-1:\\n            l[both[i]-1] = both[i+1]\\n        else:\\n            l[both[i]-1] = both[0]\\nelse:\\n    l[both[0]-1] = givenNotRecieved[0]\\n    l[recievedNotGiven[0]-1] = both[0]\\n    for i in range(1,len(givenNotRecieved)):\\n        l[recievedNotGiven[i]-1] = givenNotRecieved[i]\\nfor i in range(len(l)):\\n    print(l[i], end = \\\" \\\")\", \"n = int(input())\\nf = list(map(int, input().split()))\\ngive = set(i for i in range(n))\\nget = set(i for i in range(n))\\nfor i in range(n):\\n    if f[i] > 0:\\n        give.remove(i)\\n        get.remove(f[i]-1)\\ngivel = list(give)\\nfor x in givel:\\n    if x in get:\\n        give.remove(x)\\n        for j in get:\\n            if j == x:\\n                continue\\n            f[x] = j+1\\n            break\\n        get.remove(j)\\ngivel = list(give)\\nfor x in give:\\n    for j in get:\\n        f[x] = j+1\\n        break\\n    get.remove(j)\\nprint(' '.join(map(str, f)))\", \"n = int(input())\\na = list(map(int, input().split()))\\na = [-1] + a\\n\\nz = []\\ns = []\\nf = []\\nr = [0] * (n + 1)\\ng = [0] * (n + 1)\\nfor i in range(1, n+1):\\n    if a[i] != 0:\\n        g[i] = 1\\n        r[a[i]] = 1\\nfor i in range(1, n + 1):\\n    if g[i] == 1 and r[i] == 0:\\n        s.append(i)\\n    elif g[i] == 0 and r[i] == 1:\\n        f.append(i)\\n    elif g[i] ==0 and r[i] == 0:\\n        z.append(i)\\nzp = 0\\ni = 1\\n# print(f)\\n# print(s)\\nfor i in range(len(f)):\\n    # if i < len(f):\\n    fin = f[i]\\n    st = s[i]\\n    if (i == len(f) - 1) and len(z) == 1:\\n        a[z[0]] = st\\n        a[fin] = z[0]\\n        z.pop()\\n    else:\\n        a[fin] = st\\n\\nif len(z) > 0:\\n    st = z[0]\\n    for i in range(len(z)):\\n        ze = z[i]\\n        if i < len(z) - 1:\\n            a[ze] = z[i + 1]\\n        else:\\n            a[ze] = st\\nprint(*a[1:])\\n\\n\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nfrds = list(range(1, n + 1))\\nremain = set(frds) - set(arr)\\nslots = set()\\nfor i in range(len(arr)):\\n    if arr[i] == 0:\\n        slots.add(i + 1)\\nsame = slots & remain\\nfor i in same:\\n    x = remain.pop()\\n    if x-1 != i-1:\\n        arr[i-1] = x\\n    else:\\n        y = remain.pop()\\n        arr[i-1] = y\\n        remain.add(x)\\nfor i in range(len(arr)):\\n    if arr[i] == 0:\\n        arr[i] = remain.pop()\\nprint(*arr, sep=\\\" \\\")\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}