{"qid": 4009, "orig_input": "You are given a huge decimal number consisting of $n$ digits. It is guaranteed that this number has no leading zeros. Each digit of this number is either 0 or 1.\n\nYou may perform several (possibly zero) operations with this number. During each operation you are allowed to change any digit of your number; you may change 0 to 1 or 1 to 0. It is possible that after some operation you can obtain a number with leading zeroes, but it does not matter for this problem.\n\nYou are also given two integers $0 \\le y < x < n$. Your task is to calculate the minimum number of operations you should perform to obtain the number that has remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n, x, y$ ($0 \\le y < x < n \\le 2 \\cdot 10^5$) \u2014 the length of the number and the integers $x$ and $y$, respectively.\n\nThe second line of the input contains one decimal number consisting of $n$ digits, each digit of this number is either 0 or 1. It is guaranteed that the first digit of the number is 1.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum number of operations you should perform to obtain the number having remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n\n\n-----Examples-----\nInput\n11 5 2\n11010100101\n\nOutput\n1\n\nInput\n11 5 1\n11010100101\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example the number will be $11010100100$ after performing one operation. It has remainder $100$ modulo $100000$.\n\nIn the second example the number will be $11010100010$ after performing three operations. It has remainder $10$ modulo $100000$.", "input": "You are given a huge decimal number consisting of $n$ digits. It is guaranteed that this number has no leading zeros. Each digit of this number is either 0 or 1.\n\nYou may perform several (possibly zero) operations with this number. During each operation you are allowed to change any digit of your number; you may change 0 to 1 or 1 to 0. It is possible that after some operation you can obtain a number with leading zeroes, but it does not matter for this problem.\n\nYou are also given two integers $0 \\le y < x < n$. Your task is to calculate the minimum number of operations you should perform to obtain the number that has remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n\n\n-----Input-----\n\nThe first line of the input contains three integers $n, x, y$ ($0 \\le y < x < n \\le 2 \\cdot 10^5$) \u2014 the length of the number and the integers $x$ and $y$, respectively.\n\nThe second line of the input contains one decimal number consisting of $n$ digits, each digit of this number is either 0 or 1. It is guaranteed that the first digit of the number is 1.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum number of operations you should perform to obtain the number having remainder $10^y$ modulo $10^x$. In other words, the obtained number should have remainder $10^y$ when divided by $10^x$.\n\n\n-----Examples-----\nInput\n11 5 2\n11010100101\n\nOutput\n1\n\nInput\n11 5 1\n11010100101\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example the number will be $11010100100$ after performing one operation. It has remainder $100$ modulo $100000$.\n\nIn the second example the number will be $11010100010$ after performing three operations. It has remainder $10$ modulo $100000$.", "test_cases": {"inputs": ["11 5 2\n11010100101\n", "11 5 1\n11010100101\n", "2 1 0\n10\n", "11 5 2\n11010000101\n", "11 5 0\n11010011001\n", "7 3 0\n1100101\n", "7 5 2\n1000100\n", "4 2 1\n1011\n", "100 89 33\n1011000100000110011111000100001000000000010110100111101110111011010001010110110011010110101101111101\n", "3 1 0\n100\n", "5 1 0\n10001\n", "11 5 2\n10000000000\n", "5 3 2\n10100\n", "13 10 0\n1000001101100\n", "8 5 2\n10000010\n", "9 3 2\n100010101\n", "8 3 1\n10000000\n", "5 3 2\n10111\n", "12 5 2\n100000000100\n", "5 3 0\n10000\n", "5 3 2\n10010\n", "5 2 1\n11010\n", "5 3 2\n10000\n", "5 1 0\n11101\n", "4 2 0\n1000\n", "6 4 2\n100010\n", "11 5 0\n11010100100\n", "6 2 1\n111000\n", "50 14 6\n10110010000100111011111111000010001011100010100110\n", "5 3 2\n10011\n", "5 2 0\n10000\n", "5 3 1\n10001\n", "60 17 15\n111101011111000010000001011000000001010011001000011100110100\n", "20 11 9\n11110000010011101010\n", "7 5 3\n1011000\n", "8 6 5\n10100000\n", "39 15 0\n101101100000000000110001011011111010011\n", "46 16 10\n1001011011100010100000101001001010001110111101\n", "5 2 1\n10000\n", "96 25 9\n101110000001101011011001000111010111110011010010100111111100101111010000100001111100101001101011\n", "8 5 2\n10000100\n", "11 5 2\n11110000101\n", "8 5 2\n10011110\n", "81 24 18\n111010110101010001111101100001101000000100111111111001100101011110001000001000110\n", "7 4 2\n1000100\n", "5 3 0\n10111\n", "16 2 0\n1101011000011000\n", "5 1 0\n10000\n", "5 3 0\n10001\n", "11 5 1\n11010000101\n", "5 2 0\n11011\n", "10 5 3\n1000000000\n", "74 45 35\n10110111111000011110111110000101000110000000100010101010001110010111100101\n", "10 5 2\n1101000100\n", "4 1 0\n1000\n", "46 15 12\n1000111101111100001010001100000001000101010100\n", "74 43 12\n10001011100000010110110111000101110100000000001100100100110110111101001011\n", "6 3 2\n100000\n", "51 44 21\n111011011001100110101011100110010010011111111101000\n", "213 5 3\n111001111110111001101011111100010010011001000001111010110110011000100000101010111110010001111110001010011001101000000011111110101001101100100100110100000111111100010100011010010001011100111011000001110000111000101\n", "64 40 14\n1010011100101100101011000001000011110111011011000111011011000100\n", "40 7 0\n1101010110000100101110101100100101001000\n", "10 5 3\n1111000100\n", "6 3 1\n100010\n", "12 4 3\n110011100111\n", "78 7 5\n101001001101100101110111111110010011101100010100100001111011110110111100011101\n", "10 7 3\n1101111111\n", "5 2 1\n10010\n", "28 25 19\n1000011111100000111101010101\n", "15 6 1\n100000000100100\n", "7 5 2\n1010100\n", "49 15 14\n1011110111101100110101010110110100001100011011010\n", "6 3 1\n110110\n", "6 4 2\n100100\n", "4 1 0\n1101\n", "7 5 2\n1000000\n", "4 2 1\n1000\n", "11 5 2\n11010000001\n", "6 1 0\n100000\n", "107 5 3\n11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "7 5 4\n1010100\n", "11 5 4\n10101010101\n", "7 5 2\n1000101\n", "8 5 1\n10000000\n", "6 3 0\n110011\n", "5 3 1\n10111\n", "103 5 2\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "102 5 2\n111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "5 1 0\n10101\n", "7 1 0\n1111001\n", "10 1 0\n1000000000\n", "10 1 0\n1010000100\n", "10 5 3\n1111001111\n", "11 5 2\n11110000100\n", "11 1 0\n11010100101\n", "11 5 1\n11111000010\n", "52 43 29\n1111010100110101101000010110101110011101110111101001\n", "4 2 0\n1001\n", "5 4 0\n11001\n"], "outputs": ["1\n", "3\n", "1\n", "1\n", "2\n", "1\n", "0\n", "1\n", "47\n", "1\n", "0\n", "1\n", "0\n", "5\n", "2\n", "1\n", "1\n", "2\n", "0\n", "1\n", "2\n", "0\n", "1\n", "0\n", "1\n", "2\n", "2\n", "1\n", "8\n", "3\n", "1\n", "2\n", "6\n", "7\n", "1\n", "0\n", "9\n", "11\n", "1\n", "12\n", "0\n", "1\n", "3\n", "9\n", "0\n", "2\n", "1\n", "1\n", "0\n", "3\n", "1\n", "1\n", "20\n", "0\n", "1\n", "4\n", "21\n", "1\n", "26\n", "3\n", "19\n", "3\n", "2\n", "0\n", "4\n", "5\n", "6\n", "0\n", "13\n", "3\n", "1\n", "8\n", "1\n", "0\n", "0\n", "1\n", "1\n", "2\n", "1\n", "4\n", "1\n", "2\n", "1\n", "1\n", "1\n", "2\n", "4\n", "4\n", "0\n", "0\n", "1\n", "1\n", "3\n", "0\n", "0\n", "0\n", "26\n", "0\n", "1\n"]}, "solutions": "[\"n, x, y = map(int, input().split())\\ns = input()[-x:]\\nres = s.count('1')\\nif s[-y - 1] == '1': res -= 1\\nelse: res += 1\\n# print(s)\\nprint(res)\", \"n, x, y = map(int, input().split())\\ns = input()\\ncnt = 0\\nfor i in range(n - x, n):\\n    if s[i] == '1':\\n        if i != n - y - 1: cnt += 1\\n    elif i == n - y - 1: cnt += 1\\nprint(cnt)\", \"n, x, y = list(map(int, input().split()))\\ns = input()\\ns = s[::-1]\\nans = 0\\nfor i in range(x):\\n    if i == y:\\n        if s[i] == \\\"0\\\":\\n            ans += 1\\n    else:\\n        if s[i] == \\\"1\\\":\\n            ans += 1\\nprint(ans)\\n\", \"n, x, y = list(map(int, input().split()))\\ns = input()\\nans = 0\\nfor i in range(n - x, n):\\n\\tif i < n - y - 1:\\n\\t\\tif s[i] == '1':\\n\\t\\t\\tans += 1\\n\\telse:\\n\\t\\tif i == n - y - 1:\\n\\t\\t\\tif s[i] == '0':\\n\\t\\t\\t\\tans += 1\\n\\t\\telse:\\n\\t\\t\\tif (s[i] == '1'):\\n\\t\\t\\t\\tans += 1\\nprint(ans)\\n\", \"n, x, y = map(int, input().split())\\ns = input()\\ns = s[-x:]\\ncnt = 0\\nfor i in range(len(s)):\\n    if i == x - y - 1 and s[i] == '0':\\n        cnt += 1\\n    elif s[i] == '1' and i != x - y - 1:\\n        cnt += 1\\nprint(cnt)\", \"n, x, y = list(map(int, input().split()))\\ns = input().strip()\\nans = 0\\nfor i in range(x):\\n    if i == y:\\n        ans += s[n - 1 - i] == '0'\\n    else:\\n        ans += s[n - 1 - i] == '1'\\nprint(ans)\\n\", \"def main():\\n    n, x, y = map(int, input().split())\\n    s = input()\\n    ans = 0\\n    for i in range(-1, -x - 1, -1):\\n        if i == -(y + 1):\\n            ans += s[i] != '1'\\n            continue\\n        ans += s[i] == '1'\\n    print(int(ans))\\n    return 0\\n\\nmain()\", \"import math\\nimport bisect\\nimport heapq\\nfrom collections import defaultdict\\n\\n\\ndef egcd(a, b):\\n    if a == 0:\\n        return (b, 0, 1)\\n    else:\\n        g, x, y = egcd(b % a, a)\\n        return (g, y - (b // a) * x, x)\\n\\n\\ndef mulinv(b, n):\\n    g, x, _ = egcd(b, n)\\n    if g == 1:\\n        return x % n\\n\\n\\n\\ndef isprime(n):\\n    for d in range(2, int(math.sqrt(n))+1):\\n        if n % d == 0:\\n            return False\\n    return True\\n\\n\\ndef argsort(ls):\\n    return sorted(range(len(ls)), key=ls.__getitem__)\\n\\n\\ndef f(p=0):\\n    if p == 1:\\n        return map(int, input().split())\\n    elif p == 2:\\n        return list(map(int, input().split()))\\n    elif p == 3:\\n        return list(input())\\n    else:\\n        return int(input())\\n\\nn, x, y = f(1)\\ns = f(3)\\n\\ncount = 0\\n\\nfor i in range(n-x, n):\\n    if (s[i]=='1' and i!=n-1-y) or (s[i]=='0' and i==n-1-y):\\n        count+=1\\n\\nprint(count)\", \"# AC\\nimport sys\\n\\n\\nclass Main:\\n    def __init__(self):\\n        self.buff = None\\n        self.index = 0\\n\\n    def __next__(self):\\n        if self.buff is None or self.index == len(self.buff):\\n            self.buff = self.next_line()\\n            self.index = 0\\n        val = self.buff[self.index]\\n        self.index += 1\\n        return val\\n\\n    def next_line(self):\\n        return sys.stdin.readline().split()\\n\\n    def next_ints(self):\\n        return [int(x) for x in sys.stdin.readline().split()]\\n\\n    def next_int(self):\\n        return int(next(self))\\n\\n    def solve(self):\\n        n, x, y = self.next_ints()\\n        xx = next(self)\\n        stp = 0\\n        for i in range(0, x):\\n            if i == y:\\n                if xx[- 1 - i] != '1':\\n                    stp += 1\\n            elif xx[-1 - i] != '0':\\n                stp += 1\\n        print(stp)\\n\\n\\ndef __starting_point():\\n    Main().solve()\\n\\n__starting_point()\", \"n, x, y = list(map(int, input().split()))\\ns = input()\\nans = 0\\nfor i in range(n - x, n):\\n    if i == n - y - 1:\\n        if (s[i] == '0'):\\n            ans += 1\\n    else:\\n        if (s[i] == '1'):\\n            ans += 1\\nprint(ans)\\n\", \"n, x, y = map(int, input().split())\\ns = input()\\ncount = 0\\nfor i in range(n - x, n):\\n    if s[i] == \\\"1\\\" and i != n - y - 1:\\n        count += 1\\n    if s[i] == \\\"0\\\" and i == n - y - 1:\\n        count += 1\\nprint(count)\", \"n,x,y = list(map(int, input().split()))\\nnum = input()\\nans=0\\nfor i in range(x):\\n    if i==y:\\n        if num[n-1-i]!=\\\"1\\\":\\n            ans+=1\\n    else:\\n        if num[n-1-i]!=\\\"0\\\":\\n            ans+=1\\nprint(ans)\\n#r = list(map(int, input().split()))\\n\", \"n,x,y=[int(x) for x in input().split()]\\na=[int(x) for x in list(input())]\\ncounter=0\\nfor i in range(n-x,n):\\n    if i==n-y-1:\\n        if a[i]==0:\\n            counter+=1\\n    else:\\n        if a[i]==1:\\n            counter+=1\\nprint(counter)\\n\", \"def main():\\n    from sys import stdin, stdout\\n\\n    def read():\\n        return stdin.readline().rstrip('\\\\n')\\n\\n    def read_array(sep=None, maxsplit=-1):\\n        return read().split(sep, maxsplit)\\n\\n    def read_int():\\n        return int(read())\\n\\n    def read_int_array(sep=None, maxsplit=-1):\\n        return [int(a) for a in read_array(sep, maxsplit)]\\n\\n    def write(*args, **kwargs):\\n        sep = kwargs.get('sep', ' ')\\n        end = kwargs.get('end', '\\\\n')\\n        stdout.write(sep.join(str(a) for a in args) + end)\\n\\n    def write_array(array, **kwargs):\\n        sep = kwargs.get('sep', ' ')\\n        end = kwargs.get('end', '\\\\n')\\n        stdout.write(sep.join(str(a) for a in array) + end)\\n\\n    n, x, y = read_int_array()\\n    s = read()\\n    out = 0\\n    for i in range(x):\\n        if i != y and s[-1-i] == '1':\\n            out += 1\\n        elif i == y and s[-1-i] == '0':\\n            out += 1\\n    write(out)\\n\\nmain()\\n\", \"l = list(map(int,input().split()))\\nn = l[0]\\nx = l[1]\\ny = l[2]\\ns = input()\\nstring = s[::-1]\\ncount = 0\\nfor i in range(y):\\n\\tif(string[i]==\\\"1\\\"):\\n\\t\\tcount+=1\\nif(string[y]==\\\"0\\\"):\\n\\tcount+=1\\nfor i in range(y+1,x):\\n\\tif(string[i]==\\\"1\\\"):\\n\\t\\tcount+=1\\nprint(count)\", \"n,x,y = list(map(int,input().split()))\\ns = input()\\n\\nprint(s[-x:].count('1') - (1 if s[-y-1]=='1' else -1))\\n#print(s[-x:],s[-x:].count('1'),1 if s[-y-1]=='1' else 0)\\n\\n\", \"n,x,y=input().split()\\nans=0\\ns=input()\\ns=s[::-1]\\ns=s[:int(x)]\\nfor i in range(0,len(s)):\\n    if i==int(y):\\n        if s[i]=='0':\\n            ans+=1\\n    else :\\n        if s[i]=='1':\\n            ans+=1\\n            \\nprint(ans)\\n\", \"IN = input\\nrint = lambda: int(IN())\\nrmint = lambda: map(int, IN().split())\\nrlist = lambda: list(rmint())\\n\\nn, x, y = rmint()\\nt = list(map(int,list(IN())))\\nt.reverse()\\nt = t[:x]\\nt[y] = 1 - t[y]\\nprint(sum(t))\", \"n, x, y = map( int, input().split() )\\n\\ns = input()\\n\\nans = 0\\n\\nfor i in range( x ):\\n    if s[ -(i + 1) ] != ( '1' if i == y else '0' ) :\\n        ans += 1\\n\\nprint( ans )\", \"[n, x, y] = [int(i) for i in input().split()]\\ns = input()\\nt = \\\"\\\"\\nfor i in range(x):\\n\\tt += s[len(s) - 1 - i]\\nans = 0\\nfor i in range(x):\\n\\tif y == i:\\n\\t\\tans += int(t[i] != '1')\\n\\telse:\\n\\t\\tans += int(t[i] != '0')\\nprint (ans)\", \"n,x,y=list(map(int,input().split()))\\nA=input()[-x:]\\nB=str(10**y).zfill(x)\\n\\nANS=0\\nfor i in range(x):\\n    if A[i]!=B[i]:\\n        ANS+=1\\n\\nprint(ANS)\\n\", \"n, x, y = list(map(int,input().split()))\\nl = input()\\nwyn = 0\\nfor i in range(n):\\n\\tj = n - 1 - i\\n\\tif i == x:\\n\\t\\tbreak\\n\\tif i < y:\\n\\t\\tif l[j] == '1':\\n\\t\\t\\twyn += 1\\n\\tif i == y:\\n\\t\\tif l[j] == '0':\\n\\t\\t\\twyn += 1\\n\\tif i > y:\\n\\t\\tif l[j] == '1':\\n\\t\\t\\twyn += 1\\nprint(wyn)\", \"n,x,y=map(int,input().split())\\na=input()\\ncount=0\\na=a[::-1]\\nfor i in range(y):\\n    if a[i]=='1':\\n        count+=1\\nif a[y]=='0':\\n    count+=1\\nfor i in range(y+1,x):\\n    if a[i]=='1':\\n        count+=1\\nprint(count)\", \"l=(input().split())\\nn=int(l[0])\\nx=int(l[1])\\ny=int(l[2])\\nnum=input()\\ncount=0\\nfor i in range(n-1,n-x-1,-1):\\n\\tif i==(n-1-y):\\n\\t\\tif num[i]==\\\"0\\\":\\n\\t\\t\\tcount+=1\\n\\telse:\\n\\t\\tif num[i]==\\\"1\\\":\\n\\t\\t\\tcount+=1\\nprint (count)\", \"# stdin=open('input.txt')\\nfrom sys import stdin\\n\\ndef input():\\n\\treturn stdin.readline()[:-1]\\n\\n\\n# # stdout=open('output.txt',mode='w+')\\n\\n# # def print(x, end='\\\\n'):\\n# # \\tstdout.write(str(x) +end)\\n\\n\\n# # a, b = map(int, input().split())\\n\\n# # l = list(map(int, input().split()))\\n\\n\\n\\n\\n\\n\\n\\n# CODE BEGINS HERE.................\\n\\n\\nn, x, y = list(map(int, input().split()))\\ns = input()\\nones = s[-1*x:].count('1') - (s[-1 * y - 1] == '1') + (s[-1 * y - 1] == '0')\\n\\nprint(ones)\\n\\n\\n#CODE ENDS HERE....................\\n\\n#stdout.close()\\n\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}