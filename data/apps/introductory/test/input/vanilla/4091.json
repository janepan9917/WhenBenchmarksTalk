{"qid": 4091, "orig_input": "Polycarp is practicing his problem solving skill. He has a list of $n$ problems with difficulties $a_1, a_2, \\dots, a_n$, respectively. His plan is to practice for exactly $k$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $n$ problems in exactly $k$ days.\n\nThus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $k$ days he will solve all the $n$ problems.\n\nThe profit of the $j$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $j$-th day (i.e. if he solves problems with indices from $l$ to $r$ during a day, then the profit of the day is $\\max\\limits_{l \\le i \\le r}a_i$). The total profit of his practice is the sum of the profits over all $k$ days of his practice.\n\nYou want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $n$ problems between $k$ days satisfying the conditions above in such a way, that the total profit is maximum.\n\nFor example, if $n = 8, k = 3$ and $a = [5, 4, 2, 6, 5, 1, 9, 2]$, one of the possible distributions with maximum total profit is: $[5, 4, 2], [6, 5], [1, 9, 2]$. Here the total profit equals $5 + 6 + 9 = 20$.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2000$) \u2014 the number of problems and the number of days, respectively.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2000$) \u2014 difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n\n-----Output-----\n\nIn the first line of the output print the maximum possible total profit.\n\nIn the second line print exactly $k$ positive integers $t_1, t_2, \\dots, t_k$ ($t_1 + t_2 + \\dots + t_k$ must equal $n$), where $t_j$ means the number of problems Polycarp will solve during the $j$-th day in order to achieve the maximum possible total profit of his practice.\n\nIf there are many possible answers, you may print any of them.\n\n\n-----Examples-----\nInput\n8 3\n5 4 2 6 5 1 9 2\n\nOutput\n20\n3 2 3\nInput\n5 1\n1 1 1 1 1\n\nOutput\n1\n5\n\nInput\n4 2\n1 2000 2000 2\n\nOutput\n4000\n2 2\n\n\n\n-----Note-----\n\nThe first example is described in the problem statement.\n\nIn the second example there is only one possible distribution.\n\nIn the third example the best answer is to distribute problems in the following way: $[1, 2000], [2000, 2]$. The total profit of this distribution is $2000 + 2000 = 4000$.", "input": "Polycarp is practicing his problem solving skill. He has a list of $n$ problems with difficulties $a_1, a_2, \\dots, a_n$, respectively. His plan is to practice for exactly $k$ days. Each day he has to solve at least one problem from his list. Polycarp solves the problems in the order they are given in his list, he cannot skip any problem from his list. He has to solve all $n$ problems in exactly $k$ days.\n\nThus, each day Polycarp solves a contiguous sequence of (consecutive) problems from the start of the list. He can't skip problems or solve them multiple times. As a result, in $k$ days he will solve all the $n$ problems.\n\nThe profit of the $j$-th day of Polycarp's practice is the maximum among all the difficulties of problems Polycarp solves during the $j$-th day (i.e. if he solves problems with indices from $l$ to $r$ during a day, then the profit of the day is $\\max\\limits_{l \\le i \\le r}a_i$). The total profit of his practice is the sum of the profits over all $k$ days of his practice.\n\nYou want to help Polycarp to get the maximum possible total profit over all valid ways to solve problems. Your task is to distribute all $n$ problems between $k$ days satisfying the conditions above in such a way, that the total profit is maximum.\n\nFor example, if $n = 8, k = 3$ and $a = [5, 4, 2, 6, 5, 1, 9, 2]$, one of the possible distributions with maximum total profit is: $[5, 4, 2], [6, 5], [1, 9, 2]$. Here the total profit equals $5 + 6 + 9 = 20$.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2000$) \u2014 the number of problems and the number of days, respectively.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 2000$) \u2014 difficulties of problems in Polycarp's list, in the order they are placed in the list (i.e. in the order Polycarp will solve them).\n\n\n-----Output-----\n\nIn the first line of the output print the maximum possible total profit.\n\nIn the second line print exactly $k$ positive integers $t_1, t_2, \\dots, t_k$ ($t_1 + t_2 + \\dots + t_k$ must equal $n$), where $t_j$ means the number of problems Polycarp will solve during the $j$-th day in order to achieve the maximum possible total profit of his practice.\n\nIf there are many possible answers, you may print any of them.\n\n\n-----Examples-----\nInput\n8 3\n5 4 2 6 5 1 9 2\n\nOutput\n20\n3 2 3\nInput\n5 1\n1 1 1 1 1\n\nOutput\n1\n5\n\nInput\n4 2\n1 2000 2000 2\n\nOutput\n4000\n2 2\n\n\n\n-----Note-----\n\nThe first example is described in the problem statement.\n\nIn the second example there is only one possible distribution.\n\nIn the third example the best answer is to distribute problems in the following way: $[1, 2000], [2000, 2]$. The total profit of this distribution is $2000 + 2000 = 4000$.", "test_cases": {"inputs": ["8 3\n5 4 2 6 5 1 9 2\n", "5 1\n1 1 1 1 1\n", "4 2\n1 2000 2000 2\n", "1 1\n2000\n", "1 1\n1234\n", "3 2\n1 1 1\n", "4 2\n3 5 1 1\n", "5 3\n5 5 6 7 1\n", "6 4\n1 1 1 1 2 2\n", "5 3\n5 5 6 6 4\n", "16 15\n14 4 9 12 17 1 1 8 12 13 6 9 17 2 18 12\n", "1 1\n1996\n", "5 3\n5 5 5 9 10\n", "18 15\n18 2 13 1 18 3 2 18 18 20 9 2 20 20 4 20 9 12\n", "5 3\n1 20 20 50 50\n", "8 3\n15 14 11 19 17 14 14 8\n", "5 2\n15 20 6 19 6\n", "6 3\n5 5 5 5 6 9\n", "5 3\n2 2 2 3 3\n", "7 3\n2 2 2 2 2 3 3\n", "6 5\n1 1 6 6 6 6\n", "8 4\n1 2 2 2 2 3 4 5\n", "6 4\n1 1 1 5 5 5\n", "6 3\n1 2 2 2 4 5\n", "18 6\n17 17 19 14 10 20 18 16 6 7 2 15 14 16 13 6 12 11\n", "6 3\n1 1 2 2 3 4\n", "8 3\n5 4 2 5 6 1 9 2\n"], "outputs": ["20\n4 1 3\n", "1\n5\n", "4000\n2 2\n", "2000\n1\n", "1234\n1\n", "2\n2 1\n", "8\n1 3\n", "18\n2 1 2\n", "6\n3 1 1 1\n", "17\n2 1 2\n", "154\n1 1 1 1 1 2 1 1 1 1 1 1 1 1 1\n", "1996\n1\n", "24\n3 1 1\n", "204\n1 2 2 1 2 1 1 1 1 1 1 1 1 1 1\n", "120\n3 1 1\n", "51\n1 3 4\n", "39\n2 3\n", "20\n4 1 1\n", "8\n3 1 1\n", "8\n5 1 1\n", "25\n2 1 1 1 1\n", "14\n5 1 1 1\n", "16\n3 1 1 1\n", "11\n4 1 1\n", "107\n1 1 1 3 1 11\n", "9\n4 1 1\n", "20\n4 1 3\n"]}, "solutions": "[\"\\ndef mi():\\n\\treturn map(int, input().split())\\n\\nn, k = mi()\\na = list(mi())\\nfor i in range(n):\\n\\ta[i] = [a[i],i]\\n\\na.sort(reverse= True)\\n\\na = a[:k]\\ns = 0\\nind = []\\nfor i in a:\\n\\ts+=i[0]\\n\\tind.append(i[1])\\nind.sort()\\nfor i in range(k):\\n\\tind[i]+=1\\nind1 = ind.copy()\\nfor i in range(1,len(ind)):\\n\\tind[i]-=ind1[i-1]\\nind[-1] = n-sum(ind[:k-1])\\nprint (s)\\nfor i in ind:\\n\\tprint (i, end = ' ')\", \"n,k = map(int,input().split())\\nl = list(map(int,input().split()))\\n\\nl = sorted([(x,i) for i,x in enumerate(l)],key = lambda x: (x[0],x[1]))\\nused = l[-k:]\\n\\ns = sum(x[0] for x in used)\\ndays = sorted(x[1] for x in used)\\nprint (s)\\n\\nd = []\\nt = 0\\nfor x in days[:-1]:\\n    d.append(x-t + 1)\\n    t = x + 1\\nd.append(n-t)\\nprint (*d)\", \"import sys\\nimport io\\n\\nstream_enable = 0\\n\\ninpstream = \\\"\\\"\\\"\\n\\n\\\"\\\"\\\"\\n\\nif stream_enable:\\n    sys.stdin = io.StringIO(inpstream)\\n    input()\\n\\ndef inpmap():\\n    return list(map(int, input().split()))\\n\\nn, k = inpmap()\\narr = inpmap()\\nar = arr[:]\\nar.sort()\\nb = ar[-k:]\\nprint(sum(b))\\nm = 0\\nr = []\\nfor i, x in enumerate(arr):\\n    if x in b:\\n        b.remove(x)\\n        r.append(i - m + 1)\\n        m = i + 1\\nr[-1] += n - m\\nprint(*r)\\n\", \"n, k = map(int, input().split())\\na=sorted(enumerate(map(int, input().split())), key=lambda x:-x[1])[:k]\\ns=0\\nfor i in a:\\n    s+=i[1]\\na.sort(key=lambda x:x[0])\\nprint(s)\\nprev=-1\\nfor i in a[:-1]:\\n    print(i[0]-prev, end=' ')\\n    prev=i[0]\\nprint(n-prev-1)\\n\", \"import heapq\\n\\nn,k = map(int, input().split())\\na = list(enumerate(map(int, input().split()), 1))\\ns = heapq.nlargest(k, a, key = lambda x: x[1])\\nsu = sum([si[1] for si in s])\\ns = sorted([si[0] for si in s])\\ns[-1] = n\\nfor i in range(len(s)-1, 0, -1):\\n    s[i] -= s[i-1]\\n\\nprint(su)\\nprint(*s)\", \"problems, days = list(map(int, input().split(\\\" \\\")))\\ndifficulties = list(map(int, input().split(\\\" \\\")))\\n\\ncopyDifficulties = difficulties.copy()\\ncopyDifficulties.sort()\\nmaxValues = {}\\n\\nfor i in range(days):\\n    if copyDifficulties[problems - 1 - i] in maxValues:\\n        maxValues[copyDifficulties[problems - i - 1]] += 1\\n    else:\\n        maxValues[copyDifficulties[problems - i - 1]] = 1\\n\\ngained = 0\\nsolved = []\\nsolvedDay = 0\\nfor i in range(problems):\\n    solvedDay += 1\\n    if difficulties[i] in maxValues and maxValues.get(difficulties[i]) >= 1:\\n        gained += difficulties[i]\\n        maxValues[difficulties[i]] -= 1\\n        solved.append(solvedDay)\\n        solvedDay = 0\\nsolved[len(solved) - 1] += problems - sum(solved)\\nprint(gained)\\nres = \\\" \\\"\\nfor i in solved:\\n    res += str(i) + \\\" \\\"\\nprint(res.strip())\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\nb = [0] * 3000\\n\\nfor i in range(n):\\n    a[i] = (i, a[i])\\n\\na.sort(key=lambda x: x[1], reverse=True)\\n\\nfor i in range(k):\\n    b[a[i][0]] = 1\\n\\ncur = 0\\nans = []\\ntotal = 0\\naddtolast = 0\\na.sort(key=lambda x: x[0])\\n\\nfor i in range(n):\\n    if b[i] == 1:\\n        total += a[i][1]\\n        ans.append(i - cur + 1)\\n        addtolast = n - i - 1\\n        cur = i + 1\\n\\nans[-1] += addtolast\\n\\nprint(total)\\nprint(*ans)\", \"n, m = map(int, input().split())\\nls = [int(i) for i in input().split()]\\n\\nt = sorted(ls)\\nt.reverse()\\nans = 0\\nst = []\\nfor i in range(m):\\n    ans += t[i]\\n    st.append(t[i])\\n\\nprint(ans)\\n\\nl = -1\\nfor i in range(n):\\n    if ls[i] in st:\\n        if len(st) == 1:\\n            print(n - 1 - l);return\\n\\n        st.pop(st.index(ls[i]))\\n        print(i - l, end=' ')\\n        l = i\\n\\n\", \"length, k = map(int, input().split())\\n\\nproblems = list(enumerate(map(int, input().split(' '))))\\n\\nproblems.sort(key=lambda i: i[1], reverse=True)\\n\\nmaxs = problems[:k]\\n\\nmaxs.sort()\\n\\ndistr = []\\n\\nprev = -1\\ntotal = 0\\nfor i in range(k):\\n    distr.append(maxs[i][0] - prev)\\n    prev = maxs[i][0]\\n    total += distr[-1]\\n\\ndistr[-1] += length - total\\n\\nprint(sum(map(lambda i: i[1], maxs)))\\nprint(*distr)\", \"n, k = list(map(int, input().split(\\\" \\\")))\\n\\nnumbers = [int(i) for i in input().split(\\\" \\\")]\\nnumbers = [(num, i + 1) for i, num in enumerate(numbers)]\\n\\nnumbers = sorted(numbers)\\nnumbers = numbers[::-1][:k]\\nindices = [i[1] for i in numbers]\\nindices = sorted(indices)\\n\\nfor i in range(k -1, 0, -1):\\n    indices[i] -= indices[i - 1]\\n\\ns = sum(indices)\\nindices[-1] += n - s\\nprint(sum([i[0] for i in numbers]))\\nprint(*indices)\\n\", \"R = lambda: map(int, input().split())\\n\\nn, k = R()\\na = list(R())\\nb = sorted(a)\\nb = b[n-k:]\\nans = []\\n\\nprint(sum(b))\\n\\nk = 0\\nfor t in a:\\n    k += 1\\n    if t in b:\\n        del b[b.index(t)]\\n        ans.append(k)\\n        k = 0\\nif k:\\n    ans[-1] += k\\n\\nprint(*ans, sep=' ')\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nneed = sorted(a, reverse=True)\\n\\nind = list()\\nfor el in need[:k]:\\n    ind.append(a.index(el))\\n    a[a.index(el)] = 0\\n\\nind.sort()\\n\\nprint(sum(need[:k]))\\n\\nind[-1] = n - 1\\nind.insert(0, -1)\\nans = [el - ind[i] for i, el in enumerate(ind[1:])]\\n\\nprint(' '.join(map(str, ans)))\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\nb = sorted(a, reverse=True)\\nb = b[:k]\\ns = sum(b)\\nrec = []\\nk = 1\\nfor i in range(n):\\n    if a[i] not in b:\\n        k += 1\\n        continue\\n    else:\\n        b.remove(a[i])\\n        rec.append(k)\\n        k = 1\\n\\nrec[-1] += n - sum(rec)\\nprint(s)\\nprint(\\\" \\\".join(map(str, rec)))\", \"n, k = map(int, input().split(' '))\\na = list(map(int, input().split(' ')))\\n\\nres = sorted(a, reverse = True)\\nres = res[0:k]\\nprint(sum(res))\\ns = res\\nprev = 0\\ncounter = 1\\nfor i in range(len(a)):\\n\\tif a[i] in s:\\n\\t\\ts.pop(s.index(a[i]))\\n\\t\\tif counter == k:\\n\\t\\t\\tprint(n - prev)\\n\\t\\telse:\\n\\t\\t\\tprint(i + 1 - prev, end=' ')\\n\\t\\tcounter += 1\\n\\t\\tprev = i + 1\\n\", \"n, k = list(map(int, input().split()))\\n\\na = list(map(int, input().split()))\\n\\nat = []\\n\\nz = 0\\nfor i in a:\\n    at.append( (z, i) )\\n    z = z + 1\\n\\nat.sort(key = lambda x:-x[1])\\n\\nzt = sorted(at[:k], key = lambda x:x[0])\\n\\nprev = -1\\nai = []\\nsuma = 0\\nfor i in zt:\\n    ai.append(i[0] - prev)\\n    prev = i[0]\\n    suma += i[1]\\n\\n\\nai[-1] = ai[-1] + (n - sum(ai))\\n\\nprint(suma)\\nprint(\\\" \\\".join(str(i) for i in ai))\\n\", \"n, k  =map(int,input().split())\\n\\ndata = list(map(int,input().split()))\\n\\n\\nan_data = [(data[i],i ) for i in range(n)]\\n\\nan_data.sort(key = lambda x:x[0])\\nan_data = an_data[::-1]\\nans = 0\\nanswer = []\\nfor i in range(k):\\n    ans += an_data[i][0]\\n    answer.append(an_data[i][1])\\n\\n\\nprint(ans)\\n\\nprev = 0\\nanswer.sort()\\n\\nfor i in range(k):\\n    el = answer[i]\\n    if i == k - 1:\\n        print(n - prev)\\n        break\\n    \\n    if prev == 0:\\n        print(el  + 1 ,end=\\\" \\\")\\n        prev = el  +1\\n        continue\\n        \\n    print(el - prev  +1, end = \\\" \\\")\\n    prev = el  + 1\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\nb = []\\nfor i in range(n):\\n    b.append((a[i], i))\\nb.sort(reverse=True)\\nsum = 0\\nlol = [-1]\\nfor i in range(k):\\n    sum += b[i][0]\\n    lol.append(b[i][1])\\nlol.sort()\\nans = []\\nfor i in range(1, k + 1):\\n    ans.append(lol[i] - lol[i - 1])\\nans[k - 1] += n - 1 - lol[k]\\nprint(sum)\\nprint(*ans)\", \"# from collections import Counter as cc\\nn, k = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\ns = sorted(zip(arr, list(range(n))), reverse=True)\\ns = s[:k]\\nprint(sum(x for x, _ in s))\\ns.sort(key=lambda x: x[1])\\nprev = -1\\nans = []\\nfor x, i in s[:-1]:\\n    n -= i - prev\\n    ans.append(i - prev)\\n    prev = i\\nans.append(n)\\nprint(*ans)\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nb = sorted(a)[-k:]\\nprint(sum(b))\\nused = [0 for i in range(n)]\\nfor elem in b:\\n    for i in range(n):\\n        if a[i] == elem and used[i] == 0:\\n            used[i] = 1\\n            break\\nlast = 0\\ncount = 0\\nans = []\\nfor i in range(n):\\n    if used[i]:\\n        ans.append(i - last + 1)\\n        last = i + 1\\n        count += 1\\n    if count == k:\\n        ans.pop()\\n        ans.append(n - sum(ans))\\nprint(*ans)\\n\", \"#codeforces_1006_B\\nn,k = [ int(e) for e in input().split(\\\" \\\") ]\\nL = [ int(e) for e in input().split(\\\" \\\") ]\\nM = L[:]\\nM.sort()\\nM = M[-1:-k-1:-1]\\ncursor = 0\\nprint(sum(M))\\nfor e in L:\\n    cursor += 1\\n    if e in M:\\n        M.remove(e)\\n        if M != []:\\n            print(cursor,end=\\\" \\\")\\n            cursor = 0\\n        else:\\n            pass;\\nprint(cursor)\", \"n, k = map(int, input().split())\\ns = [int(elem) for elem in input().split()]\\nanses = []\\ns2 = s[:]\\ns2.sort(reverse = True)\\ns2 = s2[:k]\\nans = sum(s2)\\narr = []\\ne = 0\\nfor i in range(n):\\n    if s[i] in s2:\\n        anses.append(str(i - e + 1))\\n        e = i + 1\\n        b = s2.index(s[i])\\n        del s2[b]\\nif e - 1 < n:\\n    anses[len(anses) - 1] = str(int(anses[len(anses) - 1]) + n - e)\\nprint(ans)\\nprint(' '.join(anses))\", \"n, k = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nb = [[a[i], i] for i in range(n)]\\nb.sort(reverse = True)\\n# print(b)\\nb = b[:k]\\nb.sort( key = lambda x : x[1])\\n# print(b)\\nans = 0\\nfor i in b:\\n    ans += i[0]\\nprint(ans)\\nprev = 0\\nfor iter, i  in enumerate(b):\\n    if iter != len(b) - 1:\\n        print(i[1] + 1 - prev, end = ' ')\\n        prev = i[1] + 1\\n    else:\\n        print(n - prev)\", \"n, k = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nb = [i for i in a]\\na.sort()\\nd = {}\\ncount = 0\\nans = []\\nans_sum = 0\\nfor i in range(n):\\n    if not b[i] in d:\\n        d[b[i]] = []\\n    d[b[i]].append(i)\\n\\nfor i in reversed(range(n)):\\n    ans_sum += a[i]\\n    ans.append(d[a[i]][0])\\n    d[a[i]] = d[a[i]][1:]\\n    count += 1\\n    if count == k:\\n        break\\n\\nprint(ans_sum)\\nans.sort()\\nans = [-1] + ans\\nl = len(ans)\\nfor i in range(1, l - 1):\\n    print(ans[i] - ans[i - 1], end = \\\" \\\")\\nprint(n - ans[-2] - 1)\", \"n, m = map(int, input().split())\\na = list(map(int, input().split()))\\nq = []\\nfor i in range(n):\\n    q.append(a[i])\\nq.sort()\\nq = q[(-m):]\\ns = 0\\nfor i in range(m):\\n    s += q[i]\\nprint(s)\\ns = 1\\nw = []\\nf = 1\\nfor i in range(n):\\n    if(a[0] in q):\\n        w.append(s)\\n        f+=s\\n        s = 0\\n        q.remove(a[0])\\n    a.remove(a[0])\\n    s+=1\\nw[-1] += n-f+1\\nfor i in range(m):\\n    print(w[i], end = \\\" \\\")\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}