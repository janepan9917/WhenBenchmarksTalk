{"qid": 4012, "orig_input": "You are given three integers $a \\le b \\le c$.\n\nIn one move, you can add $+1$ or $-1$ to any of these integers (i.e. increase or decrease any number by one). You can perform such operation any (possibly, zero) number of times, you can even perform this operation several times with one number. Note that you cannot make non-positive numbers using such operations.\n\nYou have to perform the minimum number of such operations in order to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$.\n\nYou have to answer $t$ independent test cases. \n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a separate line as three space-separated integers $a, b$ and $c$ ($1 \\le a \\le b \\le c \\le 10^4$).\n\n\n-----Output-----\n\nFor each test case, print the answer. In the first line print $res$ \u2014 the minimum number of operations you have to perform to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$. On the second line print any suitable triple $A, B$ and $C$.\n\n\n-----Example-----\nInput\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\nOutput\n1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48", "input": "You are given three integers $a \\le b \\le c$.\n\nIn one move, you can add $+1$ or $-1$ to any of these integers (i.e. increase or decrease any number by one). You can perform such operation any (possibly, zero) number of times, you can even perform this operation several times with one number. Note that you cannot make non-positive numbers using such operations.\n\nYou have to perform the minimum number of such operations in order to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$.\n\nYou have to answer $t$ independent test cases. \n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases.\n\nThe next $t$ lines describe test cases. Each test case is given on a separate line as three space-separated integers $a, b$ and $c$ ($1 \\le a \\le b \\le c \\le 10^4$).\n\n\n-----Output-----\n\nFor each test case, print the answer. In the first line print $res$ \u2014 the minimum number of operations you have to perform to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$. On the second line print any suitable triple $A, B$ and $C$.\n\n\n-----Example-----\nInput\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\nOutput\n1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48", "test_cases": {"inputs": ["8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n", "1\n137 10000 10000\n", "1\n1 137 10000\n", "1\n73 10000 10000\n", "1\n1667 3334 10000\n", "1\n256 4096 10000\n", "1\n1 1667 10000\n", "2\n1 137 10000\n1 1429 10000\n", "1\n1667 10000 10000\n", "1\n667 10000 10000\n", "1\n1 1000 1000\n", "1\n3334 3334 10000\n", "1\n137 137 10000\n", "1\n73 73 10000\n", "1\n3334 3335 10000\n", "1\n152 912 10000\n", "1\n3340 3340 10000\n", "1\n137 139 10000\n", "1\n1429 1429 10000\n", "2\n3334 3334 10000\n73 10000 10000\n", "1\n171 9999 10000\n", "1\n3 6 10000\n", "2\n437 10000 10000\n874 10000 10000\n", "1\n417 10000 10000\n", "1\n171 10000 10000\n", "1\n73 146 10000\n", "1\n1429 10000 10000\n", "1\n437 10000 10000\n", "1\n452 10000 10000\n", "1\n1 10000 10000\n", "1\n435 10000 10000\n", "1\n1 73 10000\n", "1\n1667 5001 9999\n", "1\n1667 1667 10000\n", "2\n73 10000 10000\n73 73 10000\n", "1\n1 667 10000\n", "1\n1667 5001 10000\n", "1\n2052 5002 10000\n", "1\n473 1771 9994\n", "1\n63 10000 10000\n", "1\n6 5583 8366\n", "1\n715 5005 10000\n", "2\n73 10000 10000\n71 10000 10000\n", "1\n152 912 9999\n", "3\n1 137 10000\n1 1429 10000\n1429 1429 10000\n", "1\n91 91 10000\n", "2\n667 10000 10000\n1 667 10000\n", "1\n556 5004 10000\n", "1\n278 10000 10000\n", "3\n1667 3334 10000\n137 10000 10000\n417 10000 10000\n", "1\n5 76 10000\n", "1\n44 2760 6796\n", "1\n667 667 10000\n", "3\n3334 3334 10000\n73 10000 10000\n273 10000 10000\n", "2\n455 10000 10000\n1 323 10000\n", "1\n2 749 1000\n", "1\n459 10000 10000\n", "1\n213 213 10000\n", "1\n1684 5052 10000\n", "3\n667 10000 10000\n1 667 10000\n1 556 10000\n", "6\n455 10000 10000\n1 323 10000\n278 10000 10000\n88 528 10000\n3334 3334 10000\n73 10000 10000\n", "1\n451 10000 10000\n", "1\n75 10000 10000\n", "1\n3533 3533 10000\n", "1\n1 1573 9014\n", "1\n54 7280 9967\n", "1\n176 4048 10000\n", "2\n1667 10000 10000\n3334 3335 10000\n", "2\n256 4096 10000\n2 749 1000\n", "1\n1 100 940\n", "10\n3351 6383 6479\n7051 9793 9929\n1 1061 9572\n5401 5401 5865\n9777 9987 9987\n3393 7229 9665\n8014 8533 8665\n9549 9917 9998\n3336 6686 9962\n5351 8201 9241\n", "3\n256 4096 10000\n2 749 1000\n417 10000 10000\n", "1\n1 1991 2975\n", "1\n71 9998 10000\n", "1\n71 9999 10000\n", "5\n1 2 3\n3 4 5\n5 6 7\n7 8 9\n10 11 12\n", "5\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n", "5\n1 2 3\n4 55 66\n888 999 1000\n483 2349 9999\n3842 8344 9999\n", "2\n233 233 233\n233 233 233\n", "1\n176 3344 10000\n", "1\n1 242 1324\n"], "outputs": ["1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\n", "2\n137 10001 10001\n", "1\n1 137 10001\n", "2\n73 10001 10001\n", "2\n1667 3334 10002\n", "779\n257 3341 10023\n", "2\n1 1667 10002\n", "1\n1 137 10001\n3\n1 1429 10003\n", "4\n1667 10002 10002\n", "10\n667 10005 10005\n", "0\n1 1000 1000\n", "2\n3334 3334 10002\n", "1\n137 137 10001\n", "1\n73 73 10001\n", "3\n3334 3334 10002\n", "32\n152 912 10032\n", "14\n3334 3334 10002\n", "3\n137 137 10001\n", "3\n1429 1429 10003\n", "2\n3334 3334 10002\n2\n73 10001 10001\n", "16\n164 10004 10004\n", "2\n3 6 10002\n", "12\n435 10005 10005\n37\n909 9999 9999\n", "16\n417 10008 10008\n", "15\n164 10004 10004\n", "22\n77 154 10010\n", "6\n1429 10003 10003\n", "12\n435 10005 10005\n", "23\n455 10010 10010\n", "0\n1 10000 10000\n", "10\n435 10005 10005\n", "1\n1 73 10001\n", "3\n1667 5001 10002\n", "2\n1667 1667 10002\n", "2\n73 10001 10001\n1\n73 73 10001\n", "5\n1 667 10005\n", "2\n1667 5001 10002\n", "388\n1667 5001 10002\n", "173\n417 1668 10008\n", "10\n61 10004 10004\n", "1403\n4 4184 8368\n", "10\n715 5005 10010\n", "2\n73 10001 10001\n4\n73 10001 10001\n", "33\n152 912 10032\n", "1\n1 137 10001\n3\n1 1429 10003\n3\n1429 1429 10003\n", "10\n91 91 10010\n", "10\n667 10005 10005\n5\n1 667 10005\n", "8\n556 5004 10008\n", "16\n278 10008 10008\n", "2\n1667 3334 10002\n2\n137 10001 10001\n16\n417 10008 10008\n", "4\n5 80 10000\n", "502\n42 2268 6804\n", "5\n667 667 10005\n", "2\n3334 3334 10002\n2\n73 10001 10001\n21\n278 10008 10008\n", "20\n455 10010 10010\n13\n1 323 10013\n", "249\n2 500 1000\n", "24\n455 10010 10010\n", "11\n213 213 10011\n", "70\n1667 5001 10002\n", "10\n667 10005 10005\n5\n1 667 10005\n8\n1 556 10008\n", "20\n455 10010 10010\n13\n1 323 10013\n16\n278 10008 10008\n32\n88 528 10032\n2\n3334 3334 10002\n2\n73 10001 10001\n", "24\n455 10010 10010\n", "4\n73 10001 10001\n", "400\n3334 3334 10002\n", "73\n1 1502 9012\n", "2299\n56 4984 9968\n", "736\n176 3344 10032\n", "4\n1667 10002 10002\n3\n3334 3334 10002\n", "779\n257 3341 10023\n249\n2 500 1000\n", "6\n1 94 940\n", "208\n3239 6478 6478\n2223\n4964 9928 9928\n7\n1 1063 9567\n464\n5401 5401 5401\n210\n9987 9987 9987\n2608\n3221 9663 9663\n651\n8533 8533 8533\n449\n9917 9917 9917\n2551\n2491 4982 9964\n1771\n4620 9240 9240\n", "779\n257 3341 10023\n249\n2 500 1000\n16\n417 10008 10008\n", "504\n1 1488 2976\n", "6\n73 10001 10001\n", "5\n73 10001 10001\n", "1\n1 1 3\n2\n2 4 4\n2\n6 6 6\n2\n8 8 8\n2\n11 11 11\n", "0\n1 1 1\n0\n1 1 1\n0\n1 1 1\n0\n1 1 1\n0\n1 1 1\n", "1\n1 1 3\n11\n4 56 56\n112\n999 999 999\n169\n500 2500 10000\n1985\n4172 8344 8344\n", "0\n233 233 233\n0\n233 233 233\n", "32\n176 3344 10032\n", "23\n1 221 1326\n"]}, "solutions": "[\"mii = 3*10**4\\n\\nfactors = [set() for _ in range(mii + 1)]\\nfactors[1] = set([1])\\n\\nfor k in range(2, mii + 1):\\n    for p in range(2, mii + 1):\\n        if k % p == 0:\\n            factors[k] = set(ole*p for ole in factors[k//p]) | factors[k//p]\\n            break\\n        elif p * p > k:\\n            factors[k] = set([1, k])\\n            break\\n\\n# print(factors[:20])\\n\\nt = int(input())\\nfor _ in range(t):\\n\\n    a, b, c = [int(x) for x in input().split()]\\n\\n\\n    best_score = 10**15\\n    best_trip = a, b, c\\n\\n    for k in range(1, mii + 1):\\n        this_b = k\\n        if c % this_b < this_b - (c % this_b):\\n            this_c = this_b * (c // this_b)\\n        else:\\n            this_c = this_b * (c // this_b + 1)\\n\\n        this_c = max(this_c, this_b)\\n\\n        this_a = -1\\n        loss_a = 10**15\\n        for cur_a in factors[this_b]:\\n            if abs(a - cur_a) < loss_a:\\n                this_a = cur_a\\n                loss_a = abs(a - cur_a)\\n\\n        cur_score = abs(a - this_a) + abs(b - this_b) + abs(c - this_c)\\n        if cur_score < best_score:\\n            best_score = cur_score\\n            best_trip = this_a, this_b, this_c\\n\\n    print(best_score)\\n    print(*best_trip)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\n\\ndef make_divisors(n):\\n    \\\"\\\"\\\"\\u81ea\\u7136\\u6570n\\u306e\\u7d04\\u6570\\u3092\\u5217\\u6319\\u3057\\u305f\\u30ea\\u30b9\\u30c8\\u3092\\u51fa\\u529b\\u3059\\u308b\\n    \\u8a08\\u7b97\\u91cf: O(sqrt(N))\\n    \\u5165\\u51fa\\u529b\\u4f8b: 12 -> [1, 2, 3, 4, 6, 12]\\n    \\\"\\\"\\\"\\n    divisors = []\\n    for k in range(1, int(n**0.5) + 1):\\n        if n % k == 0:\\n            divisors.append(k)\\n            if k != n // k:\\n                divisors.append(n // k)\\n    divisors = sorted(divisors)\\n    return divisors\\n\\ndiv_list = [None] * (10**4 + 30)\\nfor i in range(1, 10**4 + 30):\\n    div_list[i] = make_divisors(i)\\n\\nt = int(input())\\nINF = 10**6\\nfor _ in range(t):\\n    ans_a = -1\\n    ans_b = -1\\n    ans_c = -1\\n    ans = INF\\n    a, b, c = list(map(int, input().split()))\\n    for tmp_b in range(1, 10**4 + 30):\\n        cost_b = abs(b - tmp_b)\\n        \\n        cost_a = INF\\n        for tmp_a in div_list[tmp_b]:\\n            if cost_a > abs(a - tmp_a):\\n                cost_a = abs(a - tmp_a)\\n                aa = tmp_a\\n              \\n        cost_c = INF\\n        num = c // tmp_b\\n        cost_c = INF\\n        if cost_c > abs(c - num * tmp_b):\\n            cost_c = abs(c - num * tmp_b)\\n            cc = num * tmp_b\\n        if cost_c > abs(c - (num+1) * tmp_b):\\n            cost_c = abs(c - (num+1) * tmp_b)\\n            cc = (num+1) * tmp_b\\n        if cost_c > abs(c - (num-1) * tmp_b):\\n            cost_c = abs(c - (num-1) * tmp_b)\\n            cc = (num-1) * tmp_b\\n        tmp_ans = cost_a + cost_b + cost_c\\n        if ans > tmp_ans:\\n            ans = tmp_ans\\n            ans_b = tmp_b\\n            ans_a = aa\\n            ans_c = cc\\n    print(ans)\\n    print(ans_a, ans_b, ans_c)\\n   \\n        \\n            \\n        \\n\", \"import bisect\\n\\nt = int(input())\\n\\nq = []\\nans = [float(\\\"inf\\\")] * t\\nansabc = [[0] * 3 for i in range(t) ]\\n\\nfor loop in range(t):\\n\\n    a,b,c = map(int,input().split())\\n    q.append([a,b,c])\\n\\nfor nb in range(1,30001):\\n\\n    mlis = []\\n    now = 1\\n\\n    while now ** 2 <= nb:\\n        if now ** 2 == nb:\\n            mlis.append(now)\\n            break\\n        elif nb % now == 0:\\n            mlis.append(now)\\n            mlis.append(nb // now)\\n\\n        now += 1\\n\\n    mlis.sort()\\n    mlis.append(float(\\\"inf\\\"))\\n\\n    for i in range(t):\\n\\n        a,b,c = q[i]\\n\\n        nans = abs(b-nb)\\n\\n        if c < nb:\\n            nans += nb-c\\n            ansc = nb\\n        else:\\n\\n            if c % nb < nb - c%nb:\\n                ansc = c // nb * nb\\n            else:\\n                ansc = c // nb * nb + nb\\n            nans += min(c % nb , nb - c%nb)\\n\\n        ind = bisect.bisect_left(mlis,a)\\n\\n        if abs(a - mlis[ind]) < abs(a - mlis[ind-1]):\\n            ansa = mlis[ind]\\n        else:\\n            ansa = mlis[ind-1]\\n        nans += min(abs(a - mlis[ind]) , abs(a - mlis[ind-1]))\\n\\n        if ans[i] > nans:\\n            ans[i] = nans\\n            ansabc[i] = [ansa,nb,ansc]\\n\\nfor i in range(t):\\n    print (ans[i])\\n    print (\\\" \\\".join(map(str,ansabc[i])))\", \"import sys\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int, minp().split()))\\n\\nf = [[] for i in range(20021)]\\n\\nfor i in range(1,20021):\\n\\tfor j in range(1,i+1):\\n\\t\\tif j * j > i:\\n\\t\\t\\tbreak\\n\\t\\tif i % j == 0:\\n\\t\\t\\t\\tf[i].append(j)\\n\\t\\t\\t\\tif j*j != i:\\n\\t\\t\\t\\t\\tf[i].append(i//j)\\n\\ndef solve():\\n\\ta,b,c = mints()\\n\\tans = (int(1e9),0,0,0)\\n\\tfor C in range(1,2*c+10):\\n\\t\\tdc = abs(C-c)\\n\\t\\t#print(C, f[C])\\n\\t\\tfor B in f[C]:\\n\\t\\t\\tdb = abs(B-b)\\n\\t\\t\\tfor A in f[B]:\\n\\t\\t\\t\\tans = min(ans, (dc+db+abs(A-a),A,B,C))\\n\\tprint(ans[0])\\n\\tprint(*ans[1:])\\n\\nfor i in range(mint()):\\n\\tsolve()\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nfor _ in range(int(input())):\\n    a, b, c = list(map(int, input().split()))\\n    ans = 10**18\\n    index = [0, 0, 0]\\n\\n    for x in range(1, c+1):\\n        for y in range(x, c+100, x):\\n            cost = abs(a-x) + abs(b-y)\\n            if c % y < y - (c % y):\\n                z = c - (c % y)\\n                cost += c % y\\n            else:\\n                z = c + (y - (c % y))\\n                cost += y - (c % y)\\n            if ans > cost:\\n                ans = cost\\n                index = [x, y, z]\\n\\n    print(ans)\\n    print(*index)\\n\", \"q = int(input())\\ndz = [set() for i in range(13337)]\\ndz[1].add(1)\\ndz[2].add(1)\\ndz[2].add(2)\\nfor k in range(3,13337):\\n\\ti = 2\\n\\tcyk = 0\\n\\twhile i**2 <= k:\\n\\t\\tif k%i == 0:\\n\\t\\t\\tcyk = 1\\n\\t\\t\\tbreak\\n\\t\\ti += 1\\n\\tif cyk == 0:\\n\\t\\tdz[k].add(1)\\n\\t\\tdz[k].add(k)\\n\\telse:\\n\\t\\tkk = k\\n\\t\\tdzi = 1\\n\\t\\twhile kk%i == 0:\\n\\t\\t\\tdzi *= i\\n\\t\\t\\tkk//= i\\n\\t\\tpom = dz[kk]\\n\\t\\tdupa = set()\\n\\t\\tfor j in pom:\\n\\t\\t\\tdupa.add(j*dzi)\\n\\t\\tdz[k] = dz[k//i].union(dupa)\\nfor _ in range(q):\\n\\ta,b,c = map(int,input().split())\\n\\tbestie = [a,b,c]\\n\\tbest = 34739174893\\n\\tdef wyn(x,y,z):\\n\\t\\treturn abs(x-a)+abs(y-b)+abs(z-c)\\n\\tfor z in range(1,13337):\\n\\t\\tif abs(z-c) > best:\\n\\t\\t\\tcontinue\\n\\t\\tfor y in dz[z]:\\n\\t\\t\\tif abs(z-c)+abs(y-b)>best:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tfor x in dz[y]:\\n\\t\\t\\t\\tif wyn(x,y,z) < best:\\n\\t\\t\\t\\t\\tbestie = [x,y,z]\\n\\t\\t\\t\\t\\tbest = wyn(x,y,z)\\n\\tprint(best)\\n\\tprint(*bestie)\", \"import sys\\n\\nfor _ in range(int(sys.stdin.readline().rstrip())):\\n    a, b, c = list(map(int, sys.stdin.readline().rstrip().split()))\\n    re = 99999999\\n    re_arr = [a, b, c]\\n    for i in range(1, 10001):\\n        chk_i = abs(i - a)\\n        if chk_i > re and i > a:\\n            break\\n        j = 1\\n        while True:\\n            chk_j = chk_i + abs(b - (i * j))\\n            if chk_j > re and i * j > b:\\n                break\\n            k = 1\\n            while True:\\n                chk_k = chk_j + abs(c - (i * j * k))\\n                if chk_k > re and i * j * k > c:\\n                    break\\n                elif chk_k < re:\\n                    re = chk_k\\n                    re_arr = [i, i * j, i * j * k]\\n                k += 1\\n            j += 1\\n    print(re)\\n    for i in re_arr:\\n        print(i, end=' ')\\n    print('')\\n\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}