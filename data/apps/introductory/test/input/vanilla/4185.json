{"qid": 4185, "orig_input": "You are given a rectangular matrix of size $n \\times m$ consisting of integers from $1$ to $2 \\cdot 10^5$.\n\nIn one move, you can:  choose any element of the matrix and change its value to any integer between $1$ and $n \\cdot m$, inclusive;  take any column and shift it one cell up cyclically (see the example of such cyclic shift below). \n\nA cyclic shift is an operation such that you choose some $j$ ($1 \\le j \\le m$) and set $a_{1, j} := a_{2, j}, a_{2, j} := a_{3, j}, \\dots, a_{n, j} := a_{1, j}$ simultaneously. [Image] Example of cyclic shift of the first column \n\nYou want to perform the minimum number of moves to make this matrix look like this: $\\left. \\begin{array}{|c c c c|} \\hline 1 & {2} & {\\ldots} & {m} \\\\{m + 1} & {m + 2} & {\\ldots} & {2m} \\\\{\\vdots} & {\\vdots} & {\\ddots} & {\\vdots} \\\\{(n - 1) m + 1} & {(n - 1) m + 2} & {\\ldots} & {nm} \\\\ \\hline \\end{array} \\right.$ \n\nIn other words, the goal is to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ (i.e. $a_{i, j} = (i - 1) \\cdot m + j$) with the minimum number of moves performed.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5, n \\cdot m \\le 2 \\cdot 10^5$) \u2014 the size of the matrix.\n\nThe next $n$ lines contain $m$ integers each. The number at the line $i$ and position $j$ is $a_{i, j}$ ($1 \\le a_{i, j} \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum number of moves required to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ ($a_{i, j} = (i - 1)m + j$).\n\n\n-----Examples-----\nInput\n3 3\n3 2 1\n1 2 3\n4 5 6\n\nOutput\n6\n\nInput\n4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n\nOutput\n0\n\nInput\n3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example, you can set $a_{1, 1} := 7, a_{1, 2} := 8$ and $a_{1, 3} := 9$ then shift the first, the second and the third columns cyclically, so the answer is $6$. It can be shown that you cannot achieve a better answer.\n\nIn the second example, the matrix is already good so the answer is $0$.\n\nIn the third example, it is enough to shift the second column cyclically twice to obtain a good matrix, so the answer is $2$.", "input": "You are given a rectangular matrix of size $n \\times m$ consisting of integers from $1$ to $2 \\cdot 10^5$.\n\nIn one move, you can:  choose any element of the matrix and change its value to any integer between $1$ and $n \\cdot m$, inclusive;  take any column and shift it one cell up cyclically (see the example of such cyclic shift below). \n\nA cyclic shift is an operation such that you choose some $j$ ($1 \\le j \\le m$) and set $a_{1, j} := a_{2, j}, a_{2, j} := a_{3, j}, \\dots, a_{n, j} := a_{1, j}$ simultaneously. [Image] Example of cyclic shift of the first column \n\nYou want to perform the minimum number of moves to make this matrix look like this: $\\left. \\begin{array}{|c c c c|} \\hline 1 & {2} & {\\ldots} & {m} \\\\{m + 1} & {m + 2} & {\\ldots} & {2m} \\\\{\\vdots} & {\\vdots} & {\\ddots} & {\\vdots} \\\\{(n - 1) m + 1} & {(n - 1) m + 2} & {\\ldots} & {nm} \\\\ \\hline \\end{array} \\right.$ \n\nIn other words, the goal is to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ (i.e. $a_{i, j} = (i - 1) \\cdot m + j$) with the minimum number of moves performed.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5, n \\cdot m \\le 2 \\cdot 10^5$) \u2014 the size of the matrix.\n\nThe next $n$ lines contain $m$ integers each. The number at the line $i$ and position $j$ is $a_{i, j}$ ($1 \\le a_{i, j} \\le 2 \\cdot 10^5$).\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum number of moves required to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ ($a_{i, j} = (i - 1)m + j$).\n\n\n-----Examples-----\nInput\n3 3\n3 2 1\n1 2 3\n4 5 6\n\nOutput\n6\n\nInput\n4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n\nOutput\n0\n\nInput\n3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example, you can set $a_{1, 1} := 7, a_{1, 2} := 8$ and $a_{1, 3} := 9$ then shift the first, the second and the third columns cyclically, so the answer is $6$. It can be shown that you cannot achieve a better answer.\n\nIn the second example, the matrix is already good so the answer is $0$.\n\nIn the third example, it is enough to shift the second column cyclically twice to obtain a good matrix, so the answer is $2$.", "test_cases": {"inputs": ["3 3\n3 2 1\n1 2 3\n4 5 6\n", "4 3\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n", "3 4\n1 6 3 4\n5 10 7 8\n9 2 11 12\n", "3 4\n45240 150726 140481 81046\n5 6 7 169420\n50454 36955 72876 12\n", "3 4\n5 6 7 8\n9 10 11 12\n1 2 3 4\n", "3 6\n155286 63165 3 174888 10886 6\n84369 8 96576 10 43333 19319\n13 56272 34110 182368 17 64349\n", "3 6\n7 8 9 10 11 12\n13 14 15 16 17 18\n1 2 3 4 5 6\n", "3 8\n1 162585 100772 4 61260 6 68011 8\n152705 26104 132471 137535 186316 160193 15 36618\n15446 18 19 94134 21 139885 176988 13799\n", "3 8\n9 10 11 12 13 14 15 16\n17 18 19 20 21 22 23 24\n1 2 3 4 5 6 7 8\n", "7 4\n1 60204 147610 128455\n77665 191006 94346 14148\n145279 56741 146667 90808\n149476 14 66548 61472\n22435 36909 52368 79274\n193242 75919 23 24\n84776 141638 98306 75212\n", "7 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n17 18 19 20\n21 22 23 24\n25 26 27 28\n1 2 3 4\n", "7 6\n42104 92376 101047 169739 147311 6\n9571 14822 9 147008 108070 179082\n42935 148636 150709 15634 78694 117083\n146754 101724 84463 16093 23 85271\n153044 126675 108371 28 97760 108330\n31 199814 151856 198623 36887 193019\n22816 38 109267 70208 194429 101237\n", "7 6\n7 8 9 10 11 12\n13 14 15 16 17 18\n19 20 21 22 23 24\n25 26 27 28 29 30\n31 32 33 34 35 36\n37 38 39 40 41 42\n1 2 3 4 5 6\n", "7 8\n110137 66175 74657 124739 63011 153464 30956 8\n9 62369 169892 183765 84737 20941 35760 78160\n20802 67434 149925 53269 150062 35286 50218 112696\n153864 26 7405 121648 170439 115181 195278 127323\n136381 197880 57522 109132 104537 38 39 47930\n51739 77547 43 169711 18955 134957 7223 37489\n53153 108446 191956 52 53 31941 114019 102522\n", "7 8\n9 10 11 12 13 14 15 16\n17 18 19 20 21 22 23 24\n25 26 27 28 29 30 31 32\n33 34 35 36 37 38 39 40\n41 42 43 44 45 46 47 48\n49 50 51 52 53 54 55 56\n1 2 3 4 5 6 7 8\n", "5 5\n139628 7289 133246 4 100049\n93243 178407 150269 173728 68418\n180173 10513 132566 146556 180355\n16 67801 18 34741 17005\n58839 22 68501 5473 25\n"], "outputs": ["6\n", "0\n", "2\n", "8\n", "8\n", "12\n", "12\n", "16\n", "16\n", "24\n", "24\n", "36\n", "36\n", "48\n", "48\n", "20\n"]}, "solutions": "[\"import sys\\ninput = sys.stdin.readline\\n\\nn, m = list(map(int, input().split()))\\narr = [[] for i in range(m)]\\n\\nfor _ in range(n):\\n    l = list(map(int, input().split()))\\n    for i in range(m):\\n        arr[i].append(l[i])\\n\\nout = 0\\nfor i in range(m):\\n    l = arr[i]\\n    \\n    best = list(range(0, -n, -1))\\n    for j in range(n):\\n        v = l[j] - i - 1\\n        \\n        if v % m == 0:\\n            correct = v // m\\n            if 0 <= correct < n:\\n                best[j - correct] += 1\\n    out += (n - max(best))\\n\\nprint(out)\\n\", \"import sys\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int, minp().split()))\\n\\ndef solve():\\n\\tn, m = mints()\\n\\ta = [None] * n\\n\\tfor i in range(n):\\n\\t\\ta[i] = list(mints())\\n\\tr = 0\\n\\tfor j in range(m):\\n\\t\\tc = [0]*n\\n\\t\\tfor i in range(n):\\n\\t\\t\\tx = (a[i][j]-1)\\n\\t\\t\\t#print(x, end='')\\n\\t\\t\\tif x % m == j and x < n*m:\\n\\t\\t\\t\\tt = (x-j) // m\\n\\t\\t\\t\\t#print('',t,i,end='')\\n\\t\\t\\t\\tif i-t >= 0:\\n\\t\\t\\t\\t\\tc[i-t] += 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tc[i-t+n] += 1\\n\\t\\t\\t#print(end='|')\\n\\t\\t#print()\\n\\t\\tmi = int(1e9)\\n\\t\\t#print(c)\\n\\t\\tfor i in range(n):\\n\\t\\t\\tmi = min(mi, i+n-c[i])\\n\\t\\tr += mi\\n\\tprint(r)\\n\\nsolve()\\n\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn,m=list(map(int,input().split()))\\n\\nCR=[list(map(int,input().split())) for i in range(n)]\\nfor i in range(n):\\n    for j in range(m):\\n        CR[i][j]-=1\\n        \\nMAX=n*m\\nANS=0\\n\\nfor i in range(m):\\n    SCORE=[0]*n\\n\\n    for j in range(n):\\n        if CR[j][i]%m==i%m and 0<=CR[j][i]<MAX:\\n            x=(CR[j][i]-i%m)//m\\n            SCORE[(j-x)%n]+=1\\n\\n        #print(SCORE)\\n\\n    #print(SCORE)\\n\\n    ANS+=min([n+j-SCORE[j] for j in range(n)])\\n\\nprint(ANS)\\n\", \"n, m = (int(i) for i in input().split())\\na = [[int(i) for i in input().split()] for _ in range(n)]\\nres = 0\\nfor j in range(m):\\n\\tb = [0] * n\\n\\tfor i in range(n):\\n\\t\\tif a[i][j] <= n*m and (a[i][j]-j-1)%m == 0:\\n\\t\\t\\tpos = (a[i][j]-j-1)//m\\n\\t\\t\\tshift = i-pos if i>=pos else i-pos+n\\n\\t\\t\\tb[shift] += 1\\n\\tres += min(i+n-b[i] for i in range(n))\\nprint(res)\\n\", \"\\\"\\\"\\\"\\nNTC here\\n\\\"\\\"\\\"\\nimport sys\\ninp= sys.stdin.readline\\ninput = lambda : inp().strip()\\nflush= sys.stdout.flush\\n# import threading\\n# sys.setrecursionlimit(10**6)\\n# threading.stack_size(2**25)\\n\\ndef iin(): return int(input())\\ndef lin(): return list(map(int, input().split()))\\n\\n# range = xrange\\n# input = raw_input\\n\\ndef main():\\n    n, m = lin()\\n    a= [lin() for i in range(n)]\\n    a = [[a[j][i] for j in range(n)] for i in range(m)]\\n    ans = 0\\n    #print(*a, sep='\\\\n')\\n    for i in range(m):\\n        dc = {}\\n        for j in range(n):\\n            x = a[i][j]-i-1\\n            if x>=0 and (x)%m==0 and x//m<n:\\n                #print(a[i][j], x, x//m, (j-x//m), (j-x//m)%n)\\n                try:\\n                    dc[(j-x//m)%n]+=1\\n                except:\\n                    dc[(j-x//m)%n]=1\\n        ch1, ch2 = 0, -1\\n        ch3 = n\\n        for i in dc:\\n            ch3 = min(ch3, i+n-dc[i])\\n        #print(dc, ch1)\\n        ans += min(n, ch3)\\n    print(ans)\\n\\n\\n\\n\\n\\n            \\n        \\n\\n        \\nmain()\\n# threading.Thread(target=main).start()\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "vanilla"}