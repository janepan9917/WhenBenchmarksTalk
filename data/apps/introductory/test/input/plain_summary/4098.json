{"qid": 4098, "orig_input": "You are a coach at your local university. There are $n$ students under your supervision, the programming skill of the $i$-th student is $a_i$.\n\nYou have to form $k$ teams for yet another new programming competition. As you know, the more students are involved in competition the more probable the victory of your university is! So you have to form no more than $k$ (and at least one) non-empty teams so that the total number of students in them is maximized. But you also know that each team should be balanced. It means that the programming skill of each pair of students in each team should differ by no more than $5$. Teams are independent from one another (it means that the difference between programming skills of two students from two different teams does not matter).\n\nIt is possible that some students not be included in any team at all.\n\nYour task is to report the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.\n\nIf you are Python programmer, consider using PyPy instead of Python when you submit your code.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the number of students and the maximum number of teams, correspondingly.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is a programming skill of the $i$-th student.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.\n\n\n-----Examples-----\nInput\n5 2\n1 2 15 15 15\n\nOutput\n5\n\nInput\n6 1\n36 4 1 25 9 16\n\nOutput\n2\n\nInput\n4 4\n1 10 100 1000\n\nOutput\n4", "input": "Maximize the number of students in at most k teams, where each team's skill range is at most 5.", "test_cases": {"inputs": ["5 2\n1 2 15 15 15\n", "6 1\n36 4 1 25 9 16\n", "4 4\n1 10 100 1000\n", "10 1\n1496 2336 3413 4121 1835 2835 251 1086 4401 4225\n", "10 2\n4714 3696 4102 818 3606 3571 4092 4396 3509 4893\n", "10 3\n2124 3161 4790 2107 1865 2410 2934 3514 4512 2857\n", "10 4\n3047 4521 3183 3803 931 3145 967 4121 1323 2309\n", "10 5\n1265 1689 1576 2796 1894 4689 2512 4727 838 274\n", "10 9\n1034 1043 4739 2959 4249 4246 582 4584 3762 4027\n", "10 10\n2902 3963 2372 4541 273 2121 679 2017 1499 394\n", "50 1\n849 1987 4384 4180 1393 97 1596 2522 451 4037 2186 2421 633 4882 4044 225 1569 4998 4915 2296 3509 1788 4713 4774 810 4732 2031 907 514 3342 3296 1973 4858 315 3140 3651 3212 4996 1390 1323 862 872 438 1533 1378 1411 3232 1565 3724 3753\n", "50 2\n4068 1859 72 3173 3163 1640 437 832 2262 1193 3693 3930 3626 3795 1296 377 566 3888 606 2561 2225 3812 1936 1280 3982 345 3485 4930 1303 1652 407 1342 359 2669 668 3382 1463 259 3813 2915 58 2366 2930 2904 1536 3931 91 194 3447 4892\n", "50 3\n4182 3220 3465 2166 1422 4671 1983 1439 4073 4157 2496 31 132 2301 1253 4721 371 74 1698 2825 3237 1644 3760 2786 259 4062 1428 1656 1285 369 4006 3414 52 4216 4003 2714 4305 923 20 4508 1149 1564 2717 83 3591 2260 4246 2335 1273 4135\n", "50 4\n2400 2684 4154 1158 489 1215 824 4749 2372 4418 3195 3836 830 3510 801 4872 2472 1668 3197 3089 3441 1372 3687 4291 3431 1972 178 679 4778 4895 3413 2783 4746 1571 1531 4341 659 1186 1635 3804 4536 3058 208 1454 3749 2077 1105 1772 3292 274\n", "50 25\n893 3630 4022 4336 417 4106 1234 4999 2555 1438 1369 1078 2997 2465 1750 2077 1925 4151 1794 4641 1590 1046 4112 4803 2892 521 586 2649 563 3864 3042 1780 1425 3710 770 4929 208 106 789 4280 4381 4831 2851 4592 2084 1339 4665 1233 1665 3708\n", "50 49\n2321 2298 1227 3465 748 4678 4564 4927 3070 1180 4855 1136 3238 1941 4668 4807 1115 1400 4836 1525 4004 3071 3839 1565 3408 912 1824 2191 4670 1821 3623 3881 1015 3677 350 2937 1527 1057 4277 1132 759 3399 4175 4507 3102 1571 3626 2105 3251 257\n", "50 50\n1338 3780 285 4514 3255 880 1870 3559 2451 1208 3670 2621 1244 673 3163 909 1158 947 2357 847 1568 4666 4420 746 4596 4591 3860 4000 931 4046 2512 3159 4863 1254 4036 1481 104 1972 170 1764 3784 3135 4054 467 2527 4781 3074 404 895 4469\n", "100 1\n4678 2743 2651 2491 3010 3941 118 4138 1584 4362 32 3971 3253 1486 3194 1171 3154 3609 1566 873 3293 1564 3683 282 1366 3325 437 846 2659 4479 475 2273 2084 3143 359 2659 2751 4672 2697 1713 2781 3344 3269 1201 2027 2041 872 2234 1811 3537 3927 4226 4552 1410 4648 2846 1181 1131 2838 1821 855 53 4225 4989 1830 1006 892 2869 232 4281 910 4233 1926 317 1729 4866 2670 3466 4838 1419 95 1039 1335 341 4216 3918 2500 3260 801 1630 679 4527 4031 841 4376 4052 3301 4451 4081 1673\n", "100 2\n600 4911 3340 1484 2485 4677 1663 2448 2587 2326 3027 480 1655 2696 446 514 2959 203 3066 3433 4305 3588 1315 1788 2643 4339 1084 4868 1152 3197 4882 1642 4481 3202 1399 2798 3297 2232 1608 1009 3872 2134 760 4868 4082 1858 27 863 1533 484 2700 2467 3214 2128 71 1200 1781 4928 4591 1808 4348 712 897 3954 2364 3904 759 3536 3919 4758 1135 2817 3807 1793 3810 64 1150 1607 685 2755 4468 2168 2587 4709 3621 1224 1160 36 4328 817 4104 3635 2193 3263 4438 1473 2167 1850 3757 1113\n", "100 3\n1522 1271 1732 477 743 1220 504 759 1694 290 4534 1581 456 3906 2698 666 61 1389 1861 3698 725 1419 2730 3294 3519 760 4026 3891 1942 1914 1185 1818 2278 4749 3927 4426 3844 599 519 2602 3068 1332 547 1239 4240 4379 1886 3004 3552 1622 664 3413 1068 4742 1302 4963 1972 1430 1344 4091 545 4475 274 4135 193 314 1035 1499 310 3338 4064 1401 4880 4078 82 3366 2335 4748 724 4898 3033 592 1542 2588 3834 18 4821 324 151 3107 2120 1935 2650 4197 4500 1999 4546 736 4242 2848\n", "100 4\n4741 3440 2421 1765 4810 1955 4346 1365 2697 3255 3337 386 1154 115 4951 2306 4058 279 4849 3962 1737 1147 362 4799 4796 3670 481 2913 435 1032 592 1187 4676 1295 2262 3757 2494 862 2134 1898 4159 530 3038 2610 4399 2707 1041 4337 3275 3569 4437 166 4730 3165 4022 3317 1763 227 3505 566 4846 2431 1946 3100 1534 3212 902 4462 1294 1918 3482 4985 4464 554 2162 1268 3519 2889 1570 2042 111 1721 497 1956 3239 1107 3481 613 974 806 2841 3748 3515 1619 4563 2125 4220 2327 3918 4584\n", "100 50\n83 3456 243 3266 4413 505 3246 4875 1866 1421 2128 14 871 2225 991 1555 2764 863 207 4126 2685 459 773 3663 1365 2737 5 472 3159 3261 1629 3075 2587 3033 1423 626 3335 4171 1155 2237 3219 500 3818 4575 4180 1930 1716 1441 2394 862 659 4342 25 743 4590 4325 812 2710 367 4363 2589 3448 549 4382 2599 895 4531 3435 1245 2297 3271 3024 1687 3151 4612 4011 4348 3879 4984 2097 3347 1707 4607 631 3952 4808 1238 885 718 4520 1313 2727 1847 2104 445 738 3942 1755 2638 565\n", "100 99\n3053 2962 749 3221 4549 489 1851 1954 2012 357 1688 2720 1642 898 4079 1360 949 4250 486 2750 822 2749 962 2883 570 1827 2720 3987 2970 2892 309 3941 1459 1808 4600 974 303 3631 4747 4022 2875 1027 1253 3481 1647 4505 2178 4927 1097 4692 577 4148 1794 4266 1901 3761 391 1837 3221 2537 3673 602 3773 133 797 509 1699 4920 4389 3084 1850 1196 726 96 818 4316 2336 2263 110 1280 2281 804 276 3364 3506 2373 2161 2184 3208 3588 4531 4937 2260 1808 597 2215 692 353 622 1277\n", "100 100\n788 971 2303 1779 2871 3887 38 55 3082 1718 661 4289 894 3184 912 2235 1849 287 4630 3185 4358 3875 2933 1525 1450 3222 1243 1788 8 3049 454 2823 366 1029 4494 251 1278 4899 2246 2929 1174 2285 4958 3326 2200 1522 1684 3820 4715 2662 526 1120 4600 183 1553 2850 3061 3121 3110 4792 4382 4283 255 355 3823 1312 4215 2744 627 3552 3831 4600 2312 3444 1298 4152 4329 1245 1146 146 3267 533 2720 4906 4288 4908 1440 163 4215 101 2986 2736 2529 854 115 1434 4318 3876 3826 1280\n", "3 2\n999999995 10000 1000000000\n", "1 1\n1000000000\n"], "outputs": ["5\n", "2\n", "4\n", "1\n", "2\n", "3\n", "4\n", "5\n", "10\n", "10\n", "2\n", "4\n", "6\n", "6\n", "27\n", "50\n", "50\n", "2\n", "4\n", "6\n", "8\n", "58\n", "100\n", "100\n", "3\n", "1\n"]}, "solutions": "[\"import bisect\\n\\nn,k=list(map(int,input().split()))\\nA=list(map(int,input().split()))\\nA.sort()\\n\\nDP=[[0]*(k+1) for i in range(n)]\\n\\nfor i in range(n):\\n    x=bisect.bisect_right(A,A[i]+5)-1\\n    #print(i,x)\\n    for j in range(k-1,-1,-1):\\n        DP[i][j]=max(DP[i][j],DP[i-1][j])        \\n        DP[x][j+1]=max(DP[i-1][j]+x-i+1,DP[x][j+1])\\n\\nprint(max([DP[i][-1] for i in range(n)]))\\n\", \"dp=[]\\nfor i in range(5005):\\n    dp.append([0]*5005)    \\n\\nn,k=map(int,input().split())\\na=list(map(int,input().split()))\\na.sort()\\np=[0]*(n+1)\\nfor i in range(n):\\n    z=a[i]-5\\n    for j in range(i+1):\\n        if a[j]>=z:\\n            p[i]=j\\n            break\\nans=-1            \\nfor i in range(1,n+1):\\n    for j in range(k+1):\\n        dp[i][j]=max(dp[i-1][j],dp[p[i-1]][j-1]+(i-p[i-1]))\\n        if j!=k:\\n            ans=max(ans,dp[i][j])            \\nprint(ans)            \", \"#!/usr/bin/env python2\\n\\n\\ndef main():\\n    n, k = list(map(int, input().split()))\\n    a = sorted(int(i) for i in input().split())\\n\\n    upper_bound = [0] * n\\n\\n    i, j = 0, 0\\n    while j < n:\\n        if a[i] + 5 >= a[j]:\\n            j += 1\\n        else:\\n            i += 1\\n        upper_bound[i] = j\\n\\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\\n    for i in range(n - 1, -1, -1):\\n        for j in range(1, k + 1):\\n            x = upper_bound[i]\\n            dp[i][j] = max(1 + dp[i + 1][j - 1], dp[i + 1][j], x - i + dp[x][j - 1])\\n\\n    print(dp[0][k])\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\na = sorted(int(i) for i in input().split())\\n\\nu = [0] * n\\n\\ni, j = 0, 0\\nwhile j < n:\\n    if a[i] + 5 >= a[j]:\\n        j += 1\\n    else:\\n        i += 1\\n    u[i] = j\\n\\ndp = [[0] * (k + 1) for i in range(n + 1)]\\nfor i in range(n - 1, -1, -1):\\n    for j in range(1, k + 1):\\n        x = u[i]\\n        dp[i][j] = max(1 + dp[i + 1][j - 1], dp[i + 1][j], x - i + dp[x][j - 1])\\n\\nprint(dp[0][k])\\n\", \"n, K = map(int, input().split())\\narr = sorted(map(int, input().split()))\\nfreq = {}\\nfor x in arr:\\n    freq[x] = freq.get(x, 0)+1\\narr = sorted(freq.keys())\\nfreq = [freq[x] for x in arr]\\nn = len(arr)\\n\\ndp = [[0 for _ in range(n+1)] for _ in range(2)]\\nfor k in range(1, K+1):\\n    for i in range(n-1, -1, -1):\\n        j = i\\n        curr = 0\\n        curr_ans = dp[k&1][i+1]\\n        while j < n and abs(arr[i]-arr[j]) <= 5:\\n            curr += freq[j]\\n            curr_ans = max(curr_ans, curr+dp[1-(k&1)][j+1])\\n            j += 1\\n        dp[k&1][i] = curr_ans\\nprint(dp[K&1][0])\", \"n, k = list(map(int, input().split()))\\n\\na = list(map(int, input().split()))\\n\\na.sort()\\n\\ndp = [[0 for j in range(k + 1)] for i in range(n + 1)]\\n\\nl = [0 for i in range(n + 1)]\\n\\ni, li = n - 1, n - 1\\nwhile i >= 0:\\n\\twhile li >= 0 and a[i] - 5 <= a[li]:\\n\\t\\tli -= 1\\n\\tl[i + 1] = li + 1\\n\\ti -= 1\\n\\ndp[1][1] = 1\\n\\nfor i in range(2, n + 1):\\n\\tfor j in range(1, k + 1):\\n\\t\\tdp[i][j] = max(dp[i - 1][j], dp[l[i]][j - 1] + i - l[i])\\n\\nprint(max(dp[n][j] for j in range(1, k + 1)))\\n\", \"n,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\na.sort()\\nl=r=0\\nb=[0]*n\\nfor _ in range(n):\\n    while l<r and a[r]-a[l]>5:\\n        l+=1\\n    b[r]=l\\n    r+=1\\ndp=[[0 for _ in range(k+1)] for _ in range(n)]\\nfor i in range(1,k+1):\\n    dp[0][i]=1\\nfor i in range(1,n):\\n    for j in range(1,k+1):\\n        dp[i][j]=max(dp[i-1][j],(dp[b[i]-1][j-1] if b[i]>=1 else 0)+(i-b[i]+1))\\nprint(dp[-1][-1])\\n\", \"# -*- coding: utf-8 -*-\\n# @Time    : 2019/3/8 0:18\\n# @Author  : LunaFire\\n# @Email   : gilgemesh2012@gmail.com\\n# @File    : E. K Balanced Teams.py\\n\\n\\ndef main():\\n    n, k = list(map(int, input().split()))\\n    a = list(map(int, input().split()))\\n    a.sort()\\n\\n    cnt = [0] * n\\n    for i in range(n):\\n        while i + cnt[i] < n and a[i + cnt[i]] - a[i] <= 5:\\n            cnt[i] += 1\\n\\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\\n    for i in range(n):\\n        for j in range(k + 1):\\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\\n            if j + 1 <= k:\\n                dp[i + cnt[i]][j + 1] = max(dp[i + cnt[i]][j + 1], dp[i][j] + cnt[i])\\n\\n    print(dp[n][k])\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n, k = map(int, input().split())\\na = sorted(list(map(int, input().split())))\\n\\ni = 0\\nj = 0\\nans = 0\\n\\nstart = [0] * n\\n\\nfor _ in range(n):\\n\\twhile j < i and a[i] - a[j] > 5:\\n\\t\\tj += 1\\n\\n\\tstart[i] = j\\n\\ti += 1\\n\\ndp = [([0] * (k + 1)) for _ in range(n)]\\n\\nfor i in range(1, k+1):\\n\\tdp[0][i] = 1\\n\\nfor i in range(1, n):\\n\\tfor j in range(1, k+1):\\n\\t\\tlastgroup = 0\\n\\t\\tif start[i] >= 1:\\n\\t\\t\\tlastgroup = dp[start[i]-1][j-1]\\n\\t\\t\\n\\t\\tdp[i][j] = max(dp[i-1][j], lastgroup + (i - start[i]) + 1)\\n\\n\\t\\nprint(dp[-1][-1])\", \"n, k = map(int, input().split())\\ndp = [[0 for j in range(k + 1)] for i in  range(n + 1)]\\na = sorted([int(i) for i in input().split()])\\ncnt = [0 for i in range(n)]\\nfor i in range(n):\\n\\twhile i + cnt[i] < n and a[i + cnt[i]] - a[i] <= 5:\\n\\t\\tcnt[i] += 1\\n\\n\\nfor i in range(n):\\n\\tfor j in range(k + 1):\\n\\t\\tdp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\\n\\t\\tif j + 1 <= k:\\n\\t\\t\\tdp[i + cnt[i]][j + 1] = max(dp[i + cnt[i]][j + 1], dp[i][j] + cnt[i])\\n\\nprint(dp[n][k])\", \"import io\\nimport os\\n#input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\\nimport sys\\n\\n\\ndef main():\\n    n, k = list(map(int, input().split()))\\n    a = sorted(list(map(int, input().split())))\\n\\n    maxFromI = [0] * n  # max students in the team starting from student i with skill a[i]\\n    end = -1\\n    for i in range(n):\\n        while end+1 < n and a[end+1] <= a[i] + 5:\\n            end += 1\\n        maxFromI[i] = end - i + 1\\n\\n    dp = [[0] * (k+1) for _ in range(n+1)]\\n    for i in range(n):\\n        for j in range(k+1):\\n            dp[i+1][j] = max(dp[i+1][j], dp[i][j])  # skip the student\\n            if j+1 <= k:\\n                dp[i+maxFromI[i]][j+1] = max(dp[i+maxFromI[i]][j+1], dp[i][j] + maxFromI[i])\\n\\n    print(dp[n][k])\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\nfrom collections import Counter\\ndef i_ints():\\n    return map(int, sys.stdin.readline().split())\\n\\nn, k = i_ints()\\nc = Counter(i_ints())\\nc2 = dict()\\n\\na = sorted(c)\\nfor i in sorted(a):\\n    c2[i] = sum(c[j] for j in range(i, i + 6))\\n\\n# a are all possible levels of students\\n# c2[i] is maximal group size where lowest level is i\\n    \\nlen_a = len(a)\\nnext_group = [-1] * len(a)\\nfor i in range(len_a):\\n    for j in range(i + 1, len_a):\\n        if a[j] > a[i] + 5:\\n            next_group[i] = j\\n            break\\n        \\n# if a group starts with i-th element, \\n# then the next possible group starts with next_group[i]-th element\\n\\nmaxes = [0] * n  # for a maximum of 0 groups\\nfor ii in range(k):\\n    old_maxes = maxes  \\n    old_maxes.append(0)  # access where next_group[...] == -1\\n    maxes = []\\n    # max number of groups, try to find better maxes each round\\n    for i, aa in enumerate(a):\\n        maxes.append(c2[a[i]] + old_maxes[next_group[i]])\\n    m = 0\\n    for i in range(len(a)-1, -1, -1):\\n        if maxes[i] > m:\\n            m = maxes[i]\\n        else:\\n            maxes[i] = m\\n        \\nprint(max(maxes))\", \"from collections import defaultdict\\n\\ndef solve(n, k, nums):\\n    nums.sort()\\n\\n    new_nums = [0]\\n    for i in range(1, n):\\n        x = min(nums[i] - nums[i-1], 6)\\n        new_nums.append(new_nums[-1] + x)\\n\\n    cand_count = new_nums[-1] + 1\\n    candidates = [0] * cand_count\\n\\n    for n in new_nums:\\n        for i in range(n-5, n+1):\\n            if 0 <= i < cand_count:\\n                candidates[i] += 1\\n\\n    prev = [None] * cand_count\\n    max_val = 0\\n    for i in range(cand_count):\\n        max_val = max(max_val, candidates[i])\\n        prev[i] = max_val\\n        \\n    for ki in range(1, k):\\n        new = [None] * cand_count\\n        new[0:6] = prev[0:6]\\n        for i in range(6, cand_count):\\n            new[i] = max(new[i-1], prev[i-6]+candidates[i])\\n        prev = new\\n        \\n    print(prev[-1])\\n\\n\\ndef solve_from_stdin():\\n    n, k = map(int, input().split())\\n    nums = list(map(int, input().split()))\\n    solve(n, k, nums)\\n\\ndef test():\\n    n, k = 1000, 500\\n    nums = list(range(n))\\n    solve(n, k, nums)\\n\\nsolve_from_stdin()\", \"kk=lambda:map(int,input().split())\\nll=lambda:list(kk())\\nn,k= kk()\\nls = sorted(ll())\\nvs,ne = [0]*n,[-1]*n\\nb = 0\\nfor a in range(n):\\n\\twhile b < n and ls[b] - ls[a] < 6: b+=1\\n\\tvs[a],ne[a] = b-a, b\\ncurr = [0]*(n+1)\\n# print(vs)\\nfor _ in range(k):\\n\\t# print(curr)\\n\\tprev = curr\\n\\tcurr = [0]*(n+1)\\n\\tfor i in range(n):\\n\\t\\tcurr[i] = vs[i]+prev[ne[i]]\\n\\tm = 0\\n\\tfor i in range(n-1, -1, -1):\\n\\t\\tif m > curr[i]: curr[i]=m\\n\\t\\telse: m = curr[i]\\nprint(m)\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\na.sort()\\n# print(a)\\ndp = [[0 for i in range(k + 1)] for i in range(n + 1)]\\ni, j = 1, 2\\nprev_max = [0 for i in range(k + 1)]\\nans = 0\\nwhile i < n + 1:\\n    while j < n + 1 and a[j - 1] - a[i - 1] <= 5:\\n        j += 1\\n    for c in range(k):\\n        dp[j - 1][c + 1] = max(dp[j - 1][c + 1], prev_max[c] + (j - i))\\n        ans = max(ans, dp[j - 1][c + 1])\\n    for c in range(k):\\n        prev_max[c] = max(prev_max[c], dp[i][c])\\n    # print(i, j)\\n    # print(prev_max)\\n    i = i + 1\\n# print(dp)\\nprint(ans)\\n\", \"n,k=[int(x) for x in input().split()]\\na=[int(x) for x in input().split()]\\na.sort()\\nindex={}\\nfor i in range(n):\\n    index[a[i]]=i\\ndp=[[1]*(k+1) for i in range(n+1)]\\nfor i in range(n+1):\\n    dp[i][0]=0\\nfor i in range(k+1):\\n    dp[0][i]=0\\nfor i in range(1,n+1):\\n    for item in range(5,-1,-1):\\n            if a[i-1]+item in index:\\n                counter=index[a[i-1]+item]-i+1\\n                break\\n    for j in range(k+1):\\n        if i>0:\\n            dp[i][j]=max(dp[i-1][j],dp[i][j])\\n        \\n        if j<k:\\n            dp[i+counter][j+1]=max(dp[i+counter][j+1],dp[i-1][j]+counter+1)\\nprint(dp[n][k])\\n\", \"import heapq\\narr = input()\\nN,K = [int(x) for x in arr.split(' ')]\\n \\narr = input()\\narr = [int(x) for x in arr.split(' ')]\\n\\narr.sort() \\ndata = [[0]*N for _ in range(K)]\\n\\nleft = 0\\nright = 0\\n \\nres = 0\\nwhile left<N and right<N:\\n    if arr[right]>arr[left]+5:\\n        #res = max(res,right-left)\\n        left += 1\\n    else:\\n        data[0][right] = max(data[0][right-1],right-left+1)\\n        right += 1\\n \\n#res = max(res,right-left)\\nfor i in range(K):\\n    data[i][0] = 1\\n\\n#print(data)\\n\\nfor j in range(1,K):\\n    left = 0\\n    right = 0\\n     \\n    res = 0\\n    while left<N and right<N:\\n        if arr[right]>arr[left]+5:\\n            left += 1\\n        else:\\n            #print(left,right)\\n            if left >= 1 and right>=1:\\n                data[j][right] = max(data[j][right-1],data[j][right],data[j-1][left-1] + right-left+1)\\n            elif left==0 and right>=1:\\n                data[j][right] = max(data[j][right-1],data[j][right],right-left+1)\\n            right += 1\\n\\n#print(data)\\n\\nprint(data[K-1][N-1])\", \"n, k = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\narr.sort()\\ncnt = [0 for _ in range(n)]\\nfor i in range(n):\\n    while i+cnt[i] < n and arr[i+cnt[i]] - arr[i] <= 5:\\n        cnt[i] += 1  # cnt[i] stores the maximum number of students belonging to a group(with <= 5 constraint)\\n        # starting from student i\\n\\ndp = [[0 for _ in range(k+1)] for _ in range(n+1)]  # dp[i][j] is the maximum no. of students in at most j teams considering first i students\\nfor i in range(n):\\n    for j in range(k+1):\\n        dp[i+1][j] = max(dp[i+1][j], dp[i][j])  # Do not take current student i\\n        if j+1 <= k:\\n            dp[i+cnt[i]][j+1] = max(dp[i+cnt[i]][j+1], dp[i][j] + cnt[i])\\n\\nprint(dp[n][k])\\n\", \"n,m = map(int,input().split())\\na = list(map(int,input().split()))\\na.sort()\\ndp = [0]*n\\nstart = a[0]\\nk,i = 0,0\\nwhile i<n:\\n\\tif a[i]-start>5:\\n\\t\\tdp[k] = i-k\\n\\t\\tk += 1\\n\\t\\tstart = a[k]\\n\\telse:\\n\\t\\ti+=1\\ndp[k] = n-k\\nfor i in range(k+1,n):\\n\\tdp[i] = dp[i-1]-1\\n# print (dp)\\nif dp[0]==n:\\n\\tprint (n)\\n\\treturn\\n\\ndp2=[[0 for i in range(m+1)] for j in range(n+1)]\\nfor i in range(n-1,-1,-1):\\n\\tfor j in range(1,m+1):\\n\\t\\tdp2[i][j] = max(dp2[i+1][j], dp2[i+1][j-1]+1, dp2[dp[i]+i][j-1]+(dp[i]))\\n# print (dp2)\\nprint (dp2[0][m])\", \"n,k=map(int,input().split())\\nl=list(map(int,input().split()))\\nl.sort()\\ndp=[[0 for i in range(k+1)]for j in range(n+1)]\\nprev=[0 for i in range(n)]\\nfor i in range(n):\\n    for j in range(i,-1,-1):\\n        if l[i]-l[j]<=5:\\n            prev[i]=j\\nfor i in range(k+1):\\n    dp[0][i]=0\\nfor i in range(1,n+1):\\n    for j in range(1,k+1):\\n        #print(i,j,prev[i])\\n        dp[i][j]=max(dp[i-1][j-1]+1,dp[i-1][j],dp[prev[i-1]][j-1]+i-prev[i-1])\\nprint(dp[n][k])\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}