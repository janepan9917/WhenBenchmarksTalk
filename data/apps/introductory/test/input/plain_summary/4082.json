{"qid": 4082, "orig_input": "You are given an array $a$ consisting of $n$ integers.\n\nYou can remove at most one element from this array. Thus, the final length of the array is $n-1$ or $n$.\n\nYour task is to calculate the maximum possible length of the strictly increasing contiguous subarray of the remaining array.\n\nRecall that the contiguous subarray $a$ with indices from $l$ to $r$ is $a[l \\dots r] = a_l, a_{l + 1}, \\dots, a_r$. The subarray $a[l \\dots r]$ is called strictly increasing if $a_l < a_{l+1} < \\dots < a_r$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is the $i$-th element of $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible length of the strictly increasing contiguous subarray of the array $a$ after removing at most one element.\n\n\n-----Examples-----\nInput\n5\n1 2 5 3 4\n\nOutput\n4\n\nInput\n2\n1 2\n\nOutput\n2\n\nInput\n7\n6 5 4 3 2 4 3\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example, you can delete $a_3=5$. Then the resulting array will be equal to $[1, 2, 3, 4]$ and the length of its largest increasing subarray will be equal to $4$.", "input": "Find the length of the longest strictly increasing subarray after optionally removing one element from the given array.", "test_cases": {"inputs": ["5\n1 2 5 3 4\n", "2\n1 2\n", "7\n6 5 4 3 2 4 3\n", "4\n6 5 4 3\n", "2\n2 1\n", "5\n111 111 100 22 3\n", "4\n26 18 26 9\n", "2\n1 1\n", "5\n1 2 3 4 4\n", "7\n5 2 3 4 5 6 3\n", "15\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "5\n7 6 5 6 1\n", "3\n2 1 2\n", "3\n3 2 1\n", "3\n2 2 1\n", "12\n123654 1 2 3 4 5 6 7 8 9 10 11\n", "11\n123654 1 2 3 4 5 6 7 8 9 10\n", "2\n7 6\n", "2\n2 2\n", "6\n6 6 6 6 6 6\n", "3\n1 1 1\n", "5\n5 5 5 5 5\n", "3\n1 2 1\n", "4\n5 1 2 1\n", "4\n8 9 8 10\n", "5\n5 4 3 2 1\n", "3\n43 25 21\n", "6\n4 5 10 10 12 13\n", "8\n53 43 6 58 62 52 66 8\n"], "outputs": ["4\n", "2\n", "2\n", "1\n", "1\n", "1\n", "2\n", "1\n", "4\n", "5\n", "1\n", "2\n", "2\n", "1\n", "1\n", "11\n", "10\n", "1\n", "1\n", "1\n", "1\n", "1\n", "2\n", "2\n", "3\n", "1\n", "1\n", "5\n", "4\n"]}, "solutions": "[\"n = int(input())\\nmass = list(map(int, input().split()))\\nleft = [1] * n\\nright = [1] * n\\nfor i in range(1, n):\\n    if mass[i] > mass[i - 1]:\\n        left[i] = left[i - 1] + 1\\nfor i in range(n - 2, -1, -1):\\n    if mass[i] < mass[i + 1]:\\n        right[i] = right[i + 1] + 1\\nmx = 1\\nfor i in range(n):\\n    if i == 0:\\n        mx = max(right[0], mx)\\n    elif i == n - 1:\\n        mx = max(mx, left[n - 1])\\n    elif mass[i + 1] > mass[i - 1]:\\n        mx = max(mx, left[i - 1] + right[i + 1])\\n    mx = max(mx, left[i])\\n    mx = max(mx, right[i])\\nprint(mx)\\n\", \"\\ndef main():\\n    buf = input()\\n    n = int(buf)\\n    buf = input()\\n    buflist = buf.split()\\n    a = list(map(int, buflist))\\n\\n    sublen_inc = []\\n    sublen_dec = []\\n    for i in range(n):\\n        sublen_inc.append(None)\\n        sublen_dec.append(None)\\n    c = 1\\n    sublen_inc[0] = c\\n    for i in range(1, n):\\n        if a[i-1] < a[i]:\\n            c += 1\\n        else:\\n            c = 1\\n        sublen_inc[i] = c\\n    c = 1\\n    sublen_dec[n-1] = c\\n    for i in range(n-2, -1, -1):\\n        if a[i] < a[i+1]:\\n            c += 1\\n        else:\\n            c = 1\\n        sublen_dec[i] = c\\n\\n    best = max(sublen_inc)\\n    for i in range(1, n-1):\\n        if a[i-1] < a[i+1]:\\n            new_sublen = sublen_inc[i-1] + sublen_dec[i+1]\\n            if new_sublen > best:\\n                best = new_sublen\\n\\n    print(best)\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\na = [-1] + list(map(int,input().split()))\\n\\ncur = 0\\nl = [0] * n\\nm = [0] * n\\n\\nfor i in range(1, n + 1):\\n    if a[i] > a[i - 1]:\\n        cur += 1\\n    else:\\n        cur = 1\\n    l[i - 1] = cur\\n\\ncur = n - 1\\nnum = l[cur]\\nwhile cur >= 0:\\n    m[cur] = num\\n    if l[cur] == 1:\\n        num = l[cur - 1]\\n    cur -= 1\\n\\nres = max(m)\\na = a[1:]\\n\\nfor i in range(1, n - 1):\\n    if l[i - 1] + 2 != l[i + 1] and a[i - 1] < a[i + 1]:\\n        res = max(res, m[i - 1] + m[i + 1] - 1)\\n\\nprint(res)\\n\\n# print(l)\\n# print(m)\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\nend=[1]\\nfor i in range(1,n):\\n\\tif l[i]>l[i-1]:\\n\\t\\tend.append(end[-1]+1)\\n\\telse:\\n\\t\\tend.append(1)\\nstrt=[1]*n\\nfor i in range(n-2,-1,-1):\\n\\tif l[i]<l[i+1]:\\n\\t\\tstrt[i]=strt[i+1]+1\\n\\telse:\\n\\t\\tstrt[i]=1\\nans=max(max(end),max(strt))\\nfor i in range(1,n-1):\\n\\tif l[i+1]>l[i-1]:\\n\\t\\tans=max(ans,end[i-1]+strt[i+1])\\nprint(ans)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\na += [0]\\n\\ndp = [0] * (n + 5)\\ni = n-2\\ndp[n-1] = 1\\nwhile (i >= 0):\\n    if (a[i] < a[i+1]):\\n        dp[i] = dp[i+1] + 1\\n    else:\\n        dp[i] = 1\\n    i -= 1\\n\\ntemp = 1\\nans = 1\\nfor i in range(1, n):\\n    if a[i+1] > a[i-1]:\\n        ans = max(ans, temp + dp[i + 1])\\n    if a[i] > a[i-1]:\\n        temp += 1\\n    else:\\n        temp = 1\\n    ans = max(ans, temp)\\n\\nprint(ans)\", \"import sys\\ninput = sys.stdin.readline\\n\\nn=int(input())\\nA=list(map(int,input().split()))\\n\\nANS=[0]*n\\ncount=1\\nANS[0]=1\\n\\nANS2=[0]*n\\nucount=0\\n\\nfor i in range(1,n):\\n    if A[i]>A[i-1]:\\n        count+=1\\n        ANS[i]=count\\n\\n        if ucount>0:\\n            ucount+=1\\n            ANS2[i]=ucount\\n    else:\\n        count=1\\n        ANS[i]=count\\n        ucount=0\\n\\n    if i>=2 and A[i-2]<A[i]:\\n        ucount=max(ucount,ANS[i-2]+1)\\n        ANS2[i]=ucount\\n\\nprint(max((max(ANS)),max(ANS2)))\\n    \\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ndp = [1 for i in range(n)]\\ndpStart = [1 for i in range(n)]\\nfor i in range(1, n):\\n    if a[i] > a[i - 1]:\\n        dp[i] = dp[i - 1] + 1\\nfor i in range(n - 2, -1, -1):\\n    if a[i] < a[i + 1]:\\n        dpStart[i] = dpStart[i + 1] + 1\\nm = max(dp)\\nans = m\\nfor i in range(1, n - 1):\\n    # print(ans)\\n    if a[i - 1] < a[i + 1]:\\n        ans = max(ans, dp[i - 1] + dpStart[i + 1])\\n\\nprint(ans)\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}