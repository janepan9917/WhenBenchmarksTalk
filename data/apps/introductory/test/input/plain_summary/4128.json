{"qid": 4128, "orig_input": "There are two sisters Alice and Betty. You have $n$ candies. You want to distribute these $n$ candies between two sisters in such a way that:  Alice will get $a$ ($a > 0$) candies;  Betty will get $b$ ($b > 0$) candies;  each sister will get some integer number of candies;  Alice will get a greater amount of candies than Betty (i.e. $a > b$);  all the candies will be given to one of two sisters (i.e. $a+b=n$). \n\nYour task is to calculate the number of ways to distribute exactly $n$ candies between sisters in a way described above. Candies are indistinguishable.\n\nFormally, find the number of ways to represent $n$ as the sum of $n=a+b$, where $a$ and $b$ are positive integers and $a>b$.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe only line of a test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^9$) \u2014 the number of candies you have.\n\n\n-----Output-----\n\nFor each test case, print the answer \u2014 the number of ways to distribute exactly $n$ candies between two sisters in a way described in the problem statement. If there is no way to satisfy all the conditions, print $0$.\n\n\n-----Example-----\nInput\n6\n7\n1\n2\n3\n2000000000\n763243547\n\nOutput\n3\n0\n0\n1\n999999999\n381621773\n\n\n\n-----Note-----\n\nFor the test case of the example, the $3$ possible ways to distribute candies are:  $a=6$, $b=1$;  $a=5$, $b=2$;  $a=4$, $b=3$.", "input": "Calculate the number of ways to distribute candies between two sisters, ensuring one gets more than the other and all candies are used.", "test_cases": {"inputs": ["6\n7\n1\n2\n3\n2000000000\n763243547\n", "2\n1\n2\n", "1\n108139\n", "5\n1\n1\n1\n1\n1\n", "39\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n", "1\n121112422\n", "1\n1411\n", "39\n2\n3\n5\n7\n9\n8\n6\n5\n4\n4\n9\n4\n5\n6\n8\n1\n5\n4\n3\n10\n7\n1\n1\n4\n3\n5\n6\n2\n5\n9\n9\n6\n6\n4\n5\n3\n10\n10\n1\n", "39\n7\n1\n2\n3\n2000000000\n763243547\n7\n1\n2\n3\n2000000000\n763243547\n7\n1\n2\n3\n2000000000\n763243547\n7\n1\n2\n3\n2000000000\n763243547\n7\n1\n2\n3\n2000000000\n763243547\n7\n1\n2\n3\n2000000000\n763243547\n7\n1\n2\n", "39\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n32\n34\n35\n36\n37\n35\n39\n", "98\n710\n896\n635\n909\n528\n799\n184\n970\n731\n285\n481\n62\n829\n815\n204\n927\n48\n958\n858\n549\n722\n900\n290\n96\n414\n323\n488\n140\n494\n286\n783\n551\n896\n580\n724\n766\n841\n914\n200\n170\n384\n664\n14\n203\n582\n203\n678\n502\n677\n318\n189\n144\n97\n330\n169\n20\n492\n233\n198\n876\n697\n624\n877\n514\n828\n41\n575\n959\n499\n786\n621\n878\n547\n409\n194\n59\n657\n893\n230\n559\n170\n238\n752\n854\n385\n365\n415\n505\n584\n434\n135\n136\n610\n525\n945\n889\n941\n579\n", "3\n1\n1\n1\n", "1\n10\n", "7\n1\n7\n1\n2\n3\n2000000000\n763243547\n", "3\n3\n4\n5\n", "31\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n", "1\n54334\n", "1\n54332\n", "1\n54331\n", "1\n54335\n", "1\n54330\n"], "outputs": ["3\n0\n0\n1\n999999999\n381621773\n", "0\n0\n", "54069\n", "0\n0\n0\n0\n0\n", "0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n", "60556210\n", "705\n", "0\n1\n2\n3\n4\n3\n2\n2\n1\n1\n4\n1\n2\n2\n3\n0\n2\n1\n1\n4\n3\n0\n0\n1\n1\n2\n2\n0\n2\n4\n4\n2\n2\n1\n2\n1\n4\n4\n0\n", "3\n0\n0\n1\n999999999\n381621773\n3\n0\n0\n1\n999999999\n381621773\n3\n0\n0\n1\n999999999\n381621773\n3\n0\n0\n1\n999999999\n381621773\n3\n0\n0\n1\n999999999\n381621773\n3\n0\n0\n1\n999999999\n381621773\n3\n0\n0\n", "0\n0\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n6\n6\n7\n7\n8\n8\n9\n9\n10\n10\n11\n11\n12\n12\n13\n13\n14\n14\n15\n15\n15\n16\n17\n17\n18\n17\n19\n", "354\n447\n317\n454\n263\n399\n91\n484\n365\n142\n240\n30\n414\n407\n101\n463\n23\n478\n428\n274\n360\n449\n144\n47\n206\n161\n243\n69\n246\n142\n391\n275\n447\n289\n361\n382\n420\n456\n99\n84\n191\n331\n6\n101\n290\n101\n338\n250\n338\n158\n94\n71\n48\n164\n84\n9\n245\n116\n98\n437\n348\n311\n438\n256\n413\n20\n287\n479\n249\n392\n310\n438\n273\n204\n96\n29\n328\n446\n114\n279\n84\n118\n375\n426\n192\n182\n207\n252\n291\n216\n67\n67\n304\n262\n472\n444\n470\n289\n", "0\n0\n0\n", "4\n", "0\n3\n0\n0\n1\n999999999\n381621773\n", "1\n1\n2\n", "0\n0\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n6\n6\n7\n7\n8\n8\n9\n9\n10\n10\n11\n11\n12\n12\n13\n13\n14\n14\n15\n", "27166\n", "27165\n", "27165\n", "27167\n", "27164\n"]}, "solutions": "[\"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tprint((n-1)//2)\\n\", \"for _ in range(int(input())):\\n    n = int(input())\\n    print((n-1)//2)\\n\", \"t = int(input())\\nfor q in range(0, t):\\n    n = int(input())\\n    if (n % 2 == 0):\\n        print(n // 2 - 1)\\n    else:\\n        print(n // 2)\\n\", \"def solve():\\n    t = int(input())\\n    for _ in range(t):\\n        n = int(input())\\n        if n % 2 == 0:\\n            print(n // 2 - 1)\\n        else:\\n            print(n // 2)\\n\\n\\nsolve()\", \"from math import *\\nt = int(input())\\nfor y in range(t):\\n\\tn = int(input())\\n\\tprint((n-1)//2)\", \"# WeirdBugsButOkay\\n\\nt = int(input())\\n\\nfor wqe in range (0, t) :\\n    n = int(input())\\n    if n % 2 == 0 :\\n        print(n // 2 - 1)\\n    else :\\n        print((n - 1) // 2)\", \"t=int(input())\\nfor j in range(t):\\n  n=int(input())\\n  if n%2==0:\\n    print(n//2-1)\\n  else:\\n    print(n//2)\", \"import sys\\ninput = sys.stdin.readline\\ndef getInt(): return int(input())\\ndef getVars(): return list(map(int, input().split()))\\ndef getList(): return list(map(int, input().split()))\\ndef getStr(): return input().strip()\\n## -------------------------------\\n\\nt = getInt()\\nfor _ in range(t):\\n    n = getInt()\\n    if n%2 == 0:\\n        print(n//2 -1)\\n    else:\\n        print(n//2)\\n\", \"t = int(input())\\nfor case_num in range(t):\\n    n = int(input())\\n    print((n - 1) // 2)\\n\", \"from bisect import *\\nfrom collections import *\\nfrom itertools import *\\nimport functools\\nimport sys\\nimport math\\nfrom decimal import *\\nfrom copy import *\\nfrom heapq import *\\nfrom fractions import *\\ngetcontext().prec = 30\\nMAX = sys.maxsize\\nMAXN = 1000010\\nMOD = 10**9+7\\nspf = [i for i in range(MAXN)]\\nspf[0]=spf[1] = -1\\ndef sieve():\\n    for i in range(2,MAXN,2):\\n        spf[i] = 2\\n    for i in range(3,int(MAXN**0.5)+1):\\n        if spf[i]==i:\\n            for j in range(i*i,MAXN,i):\\n                if spf[j]==j:\\n                    spf[j]=i\\ndef fib(n,m):\\n    if n == 0:\\n        return [0, 1]\\n    else:\\n        a, b = fib(n // 2)\\n        c = ((a%m) * ((b%m) * 2 - (a%m)))%m\\n        d = ((a%m) * (a%m))%m + ((b)%m * (b)%m)%m\\n        if n % 2 == 0:\\n            return [c, d]\\n        else:\\n            return [d, c + d]\\n \\ndef charIN(x= ' '):\\n    return(sys.stdin.readline().strip().split(x))\\n \\ndef arrIN(x = ' '):\\n    return list(map(int,sys.stdin.readline().strip().split(x)))\\n \\ndef ncr(n,r):\\n    num=den=1\\n    for i in range(r):\\n        num = (num*(n-i))%MOD\\n        den = (den*(i+1))%MOD\\n \\n    return (num*(pow(den,MOD-2,MOD)))%MOD\\n \\ndef flush():\\n    return sys.stdout.flush()\\n \\n'''*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*'''\\nfor _ in range(int(input())):\\n    n = int(input())\\n    if n%2:\\n        print(n//2)\\n    else:\\n        print(n//2-1)\\n\", \"for _ in range(int(input())):\\n    n = int(input())\\n    if n%2==0:\\n        print(n//2-1)\\n    else:\\n        print(n//2)\", \"#!usr/bin/env python3\\nfrom collections import defaultdict, deque\\nfrom heapq import heappush, heappop\\nfrom itertools import permutations, accumulate\\nimport sys\\nimport math\\nimport bisect\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\ndef I(): return int(sys.stdin.readline())\\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\\ndef S():\\n    res = list(sys.stdin.readline())\\n    if res[-1] == \\\"\\\\n\\\":\\n        return res[:-1]\\n    return res\\ndef IR(n):\\n    return [I() for i in range(n)]\\ndef LIR(n):\\n    return [LI() for i in range(n)]\\ndef SR(n):\\n    return [S() for i in range(n)]\\ndef LSR(n):\\n    return [LS() for i in range(n)]\\n\\nsys.setrecursionlimit(1000000)\\nmod = 1000000007\\n\\ndef solve():\\n    t = I()\\n    for _ in range(t):\\n        n = I()\\n        print((n-1) >> 1)\\n    return\\n\\n#Solve\\ndef __starting_point():\\n    solve()\\n\\n__starting_point()\", \"t,*x=map(int,open(0).read().split())\\nans=[(y-1)//2 for y in x]\\nprint(\\\"\\\\n\\\".join(map(str,ans)))\", \"t=int(input())\\nfor _ in range(t):\\n    n=int(input())\\n    print((n-1)//2)\", \"t = int(input())\\nfor i in range(t):\\n\\tn = int(input())\\n\\tprint(n//2 if n%2 == 1 else n//2-1)\", \"from bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nfrom heapq import heappush,heappop\\nimport math\\nfrom collections import *\\nfrom functools import reduce,cmp_to_key\\nimport sys\\ninput = sys.stdin.readline\\n\\nM = mod = 998244353\\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\\ndef inv_mod(n):return pow(n, mod - 2, mod)\\n\\ndef li():return [int(i) for i in input().rstrip('\\\\n').split()]\\ndef st():return input().rstrip('\\\\n')\\ndef val():return int(input().rstrip('\\\\n'))\\ndef li2():return [i for i in input().rstrip('\\\\n')]\\ndef li3():return [int(i) for i in input().rstrip('\\\\n')]\\n\\n\\nfor _ in range(val()):\\n    n = val()\\n    print(n//2 if n&1 else n//2 - 1)\\n\", \"t = int(input())\\nfor i in range(t):\\n    x = int(input())\\n    if x % 2 == 0:\\n        print((x-2)//2)\\n    else:\\n        print((x-1)//2)\\n\\n    \\n\", \"t=int(input())\\nfor i in range(t):\\n    n = int(input())\\n    print((n-1)//2)\", \"import sys\\nimport math\\nimport itertools\\nimport functools\\nimport collections\\nimport operator\\nimport fileinput\\nimport copy\\n\\nORDA = 97\\ndef ii(): return int(input())\\ndef mi(): return map(int, input().split())\\ndef li(): return [int(i) for i in input().split()]\\ndef lcm(a, b): return abs(a * b) // math.gcd(a, b)\\ndef revn(n): return str(n)[::-1]\\ndef dd(): return collections.defaultdict(int)\\ndef ddl(): return collections.defaultdict(list)\\ndef sieve(n):\\n    if n < 2: return list()\\n    prime = [True for _ in range(n + 1)]\\n    p = 3\\n    while p * p <= n:\\n        if prime[p]:\\n            for i in range(p * 2, n + 1, p):\\n                prime[i] = False\\n        p += 2\\n    r = [2]\\n    for p in range(3, n + 1, 2):\\n        if prime[p]:\\n            r.append(p)\\n    return r\\ndef divs(n, start=1):\\n    r = []\\n    for i in range(start, int(math.sqrt(n) + 1)):\\n        if (n % i == 0):\\n            if (n / i == i):\\n                r.append(i)\\n            else:\\n                r.extend([i, n // i])\\n    return r\\ndef divn(n, primes):\\n    divs_number = 1\\n    for i in primes:\\n        if n == 1:\\n            return divs_number\\n        t = 1\\n        while n % i == 0:\\n            t += 1\\n            n //= i\\n        divs_number *= t\\ndef prime(n):\\n    if n == 2: return True\\n    if n % 2 == 0 or n <= 1: return False\\n    sqr = int(math.sqrt(n)) + 1\\n    for d in range(3, sqr, 2):\\n        if n % d == 0: return False\\n    return True\\ndef convn(number, base):\\n    newnumber = 0\\n    while number > 0:\\n        newnumber += number % base\\n        number //= base\\n    return newnumber\\ndef cdiv(n, k): return n // k + (n % k != 0)\\n\\n\\nfor i in range(ii()):\\n    n = ii()\\n    if n & 1:\\n        print(n // 2)\\n    else:\\n        print(n // 2 - 1)\", \"t = int(input())\\nfor _ in range(t):\\n    print((int(input())-1)//2)\", \"from sys import stdin, exit, setrecursionlimit\\nsetrecursionlimit(10000000)\\n\\ninput = stdin.readline\\nlmi = lambda: list(map(int, input().split()))\\nmi = lambda: map(int, input().split())\\nsi = lambda: input().strip('\\\\n')\\nssi = lambda: input().strip('\\\\n').split()\\n\\nfor _ in range(int(input())):\\n    n = int(input())\\n    print((n-1)//2)\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}