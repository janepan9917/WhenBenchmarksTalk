{"qid": 4074, "orig_input": "Polycarp wants to buy exactly $n$ shovels. The shop sells packages with shovels. The store has $k$ types of packages: the package of the $i$-th type consists of exactly $i$ shovels ($1 \\le i \\le k$). The store has an infinite number of packages of each type.\n\nPolycarp wants to choose one type of packages and then buy several (one or more) packages of this type. What is the smallest number of packages Polycarp will have to buy to get exactly $n$ shovels?\n\nFor example, if $n=8$ and $k=7$, then Polycarp will buy $2$ packages of $4$ shovels.\n\nHelp Polycarp find the minimum number of packages that he needs to buy, given that he:   will buy exactly $n$ shovels in total;  the sizes of all packages he will buy are all the same and the number of shovels in each package is an integer from $1$ to $k$, inclusive. \n\n\n-----Input-----\n\nThe first line contains an integer $t$ ($1 \\le t \\le 100$)\u00a0\u2014 the number of test cases in the input. Then, $t$ test cases follow, one per line.\n\nEach test case consists of two positive integers $n$ ($1 \\le n \\le 10^9$) and $k$ ($1 \\le k \\le 10^9$)\u00a0\u2014 the number of shovels and the number of types of packages.\n\n\n-----Output-----\n\nPrint $t$ answers to the test cases. Each answer is a positive integer\u00a0\u2014 the minimum number of packages.\n\n\n-----Example-----\nInput\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\nOutput\n2\n8\n1\n999999733\n1\n\n\n\n-----Note-----\n\nThe answer to the first test case was explained in the statement.\n\nIn the second test case, there is only one way to buy $8$ shovels\u00a0\u2014 $8$ packages of one shovel.\n\nIn the third test case, you need to buy a $1$ package of $6$ shovels.", "input": "Find the minimum number of identical packages needed to buy exactly n shovels, given k types of packages with 1 to k shovels each.", "test_cases": {"inputs": ["5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n", "5\n999999733 999999732\n999999733 999999732\n999999733 999999732\n999999733 999999732\n999999733 999999732\n", "1\n999999733 31623\n", "10\n999999733 31623\n999999733 31623\n999999733 31623\n999999733 31623\n999999733 31623\n999999733 31623\n999999733 31623\n999999733 31623\n999999733 31623\n999999733 31623\n", "1\n1000000000 2\n", "2\n1000000000 2\n1000000000 2\n", "5\n999999998 11\n999999998 11\n999999998 11\n999999998 11\n999999998 11\n", "1\n1000000000 3\n", "8\n1000000000 1000000000\n1000000000 2\n1000000000 100000001\n1000000000 7\n1000000000 1000000000\n1000000000 2\n1000000000 100000001\n1000000000 7\n", "4\n1000000000 1000000000\n1000000000 2\n1000000000 100000001\n1000000000 7\n", "1\n8 2\n", "10\n208790602 104395300\n208790602 104395300\n208790602 104395300\n208790602 104395300\n208790602 104395300\n208790602 104395300\n208790602 104395300\n208790602 104395300\n208790602 104395300\n208790602 104395300\n", "10\n999002449 31606\n999002449 31606\n999002449 31606\n999002449 31606\n999002449 31606\n999002449 31606\n999002449 31606\n999002449 31606\n999002449 31606\n999002449 31606\n", "10\n1000000000 2\n1 1\n1 1000000000\n1000000000 1000000000\n1000000000 1\n1000000000 123456789\n123456789 2\n123456789 123456780\n111111113 11\n1000000000 3\n", "1\n536870912 50\n", "1\n999999999 1\n", "1\n536870912 536870912\n", "13\n1000000000 2\n1 1\n1 1000000000\n1000000000 1000000000\n1000000000 1\n1000000000 123456789\n123456789 2\n123456789 123456780\n111111113 11\n1000000000 3\n2 100003679\n100003679 2\n100003679 100003679\n", "1\n15060 2\n", "1\n536870912 536870911\n", "6\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n150600 9\n", "1\n91 5\n", "1\n999999986 400000000\n", "1\n49 3\n", "1\n1234 1200\n", "10\n999999733 999999732\n999999733 999999733\n999999997 14084507\n999999997 14084506\n999999997 71\n999999997 2251\n999999997 2250\n21 6\n21 7\n1 1\n", "1\n526870912 50\n", "1\n68816 139\n", "1\n8554 7\n", "1\n8738 9\n"], "outputs": ["2\n8\n1\n999999733\n1\n", "999999733\n999999733\n999999733\n999999733\n999999733\n", "999999733\n", "999999733\n999999733\n999999733\n999999733\n999999733\n999999733\n999999733\n999999733\n999999733\n999999733\n", "500000000\n", "500000000\n500000000\n", "499999999\n499999999\n499999999\n499999999\n499999999\n", "500000000\n", "1\n500000000\n10\n200000000\n1\n500000000\n10\n200000000\n", "1\n500000000\n10\n200000000\n", "4\n", "104395301\n104395301\n104395301\n104395301\n104395301\n104395301\n104395301\n104395301\n104395301\n104395301\n", "999002449\n999002449\n999002449\n999002449\n999002449\n999002449\n999002449\n999002449\n999002449\n999002449\n", "500000000\n1\n1\n1\n1000000000\n10\n123456789\n3\n111111113\n500000000\n", "16777216\n", "999999999\n", "1\n", "500000000\n1\n1\n1\n1000000000\n10\n123456789\n3\n111111113\n500000000\n1\n100003679\n1\n", "7530\n", "2\n", "2\n8\n1\n999999733\n1\n18825\n", "91\n", "499999993\n", "49\n", "2\n", "999999733\n1\n71\n2251\n14084507\n444247\n14084507\n7\n3\n1\n", "13865024\n", "506\n", "1222\n", "4369\n"]}, "solutions": "[\"def read_int():\\n    return int(input())\\n\\n\\ndef read_ints():\\n    return list(map(int, input().split(' ')))\\n\\n\\nt = read_int()\\nfor case_num in range(t):\\n    n, k = read_ints()\\n    i = 1\\n    largest = 1\\n    while i * i <= n:\\n        if n % i == 0:\\n            if i <= k:\\n                largest = max(largest, i)\\n            if n // i <= k:\\n                largest = max(largest, n // i)\\n        i += 1\\n    print(n // largest)\\n\", \"def make_divisors(n: int) -> list:\\n    divisors = []\\n    for k in range(1, int(n ** 0.5) + 1):\\n        if n % k == 0:\\n            divisors.append(k)\\n            if k != n // k: \\n                divisors.append(n // k)\\n    divisors = sorted(divisors)\\n    return divisors\\n\\n\\nt = int(input())\\nfor _ in range(t):\\n    n, k = map(int, input().split())\\n    divs = make_divisors(n)\\n    ans = 10 ** 18\\n    for div in divs:\\n        if div <= k:\\n            ans = min(ans, n // div)\\n    print(ans)\", \"\\nimport math\\n\\nT = int(input())\\n\\nfor _ in range(T):\\n    n, k = list(map(int, input().split()))\\n\\n    divs = set()\\n    for d in range(1, int(math.sqrt(n)) + 2):\\n        if n % d == 0:\\n            divs.add(d)\\n            divs.add(n // d)\\n\\n    ans = 10**10\\n    for d in divs:\\n        if d > k:\\n            continue\\n        else:\\n            ans = min(ans, n // d)\\n\\n    print(ans)\\n\", \"for _ in range(int(input())):\\n    n, k = list(map(int, input().split()))\\n    ar = []\\n    i = 1\\n    while i * i <= n:\\n        if n % i == 0:\\n            ar.append(i)\\n            ar.append(n // i)\\n        i += 1\\n    ar.sort()\\n    i = len(ar) - 1\\n    ans = n\\n    while i >= 0:\\n        if ar[i] <= k:\\n            ans = n // ar[i]\\n            break\\n        i -= 1\\n    print(ans)\", \"import bisect\\nt=int(input())\\nfor you in range(t):\\n    l=input().split()\\n    n=int(l[0])\\n    k=int(l[1])\\n    lfi=[]\\n    i=1\\n    maxa=1\\n    while(i*i<=n):\\n        if(n%i==0):\\n            lfi.append(i)\\n            if(i>maxa and i<=k):\\n                maxa=i\\n            if(i!=n//i):\\n                lfi.append(n//i)\\n                if(n//i>maxa and n//i<=k):\\n                    maxa=n//i\\n        i+=1\\n    print(n//maxa)\\n\", \"for _ in range(int(input())):\\n    n, k = list(map(int, input().split()))\\n    i = 1\\n    ans = n\\n    while i * i <= n:\\n        if n % i == 0:\\n            if i <= k:\\n                ans = min(ans, n // i)\\n            if n // i <= k:\\n                ans = min(ans, i)\\n        i += 1\\n    print(ans)\\n\", \"import sys\\nimport heapq\\nimport random\\nimport collections\\n\\n# available on Google, not available on Codeforces\\n# import numpy as np\\n# import scipy\\n\\n\\nfrom functools import reduce\\n\\ndef all_divisors(n):    \\n    return set(reduce(list.__add__, \\n    ([i, n//i] for i in \\n    range(1, int(n**0.5) + 1) if n % i == 0)))\\n\\n\\ndef solve(n,k):  # fix inputs here\\n    lst = all_divisors(n)\\n    # print(lst)\\n    lst = sorted(list(lst))\\n    for i in lst[::-1]:\\n        if i <= k:\\n            return n//i\\n    return n\\n\\n\\n\\n\\n\\n\\ndef console(*args):  # the judge will not read these print statement\\n    print('\\\\033[36m', *args, '\\\\033[0m', file=sys.stderr)\\n    return\\n\\n\\nfor case_num in range(int(input())):\\n    # read line as a string\\n    # strr = input()\\n\\n    # read line as an integer\\n    # _ = int(input())\\n    \\n    # read one line and parse each word as a string\\n    # lst = input().split()\\n\\n    # read one line and parse each word as an integer\\n    # _,_ = list(map(int,input().split()))\\n    n,k = list(map(int,input().split()))\\n\\n    # read matrix and parse as integers (after reading read nrows)\\n    # lst = list(map(int,input().split()))\\n    # nrows = lst[0]  # index containing information, please change\\n    # grid = []\\n    # for _ in range(nrows):\\n    #     grid.append(list(input()))\\n\\n    res = solve(n,k)  # please change\\n    \\n    # Google - case number required\\n    # print(\\\"Case #{}: {}\\\".format(case_num+1, res))\\n\\n    # Codeforces - no case number required\\n    print(res)\\n\", \"import math\\n\\nT = int(input())\\n\\n\\ndef divs(n):\\n    d = []\\n    for i in range(1, math.ceil(math.sqrt(n))+1):\\n        if n % i == 0:\\n            d.extend([i, n//i])\\n    return sorted(d)\\n\\nfor t in range(T):\\n    N, K = [int(_) for _ in input().split()]\\n    for d in divs(N):\\n        if N / d <= K:\\n            print(d)\\n            break\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}