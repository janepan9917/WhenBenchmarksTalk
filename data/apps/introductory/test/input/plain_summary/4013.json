{"qid": 4013, "orig_input": "You are given an array $a$ consisting of $n$ integer numbers.\n\nLet instability of the array be the following value: $\\max\\limits_{i = 1}^{n} a_i - \\min\\limits_{i = 1}^{n} a_i$.\n\nYou have to remove exactly one element from this array to minimize instability of the resulting $(n-1)$-elements array. Your task is to calculate the minimum possible instability.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^5$) \u2014 elements of the array $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible instability of the array if you have to remove exactly one element from the array $a$.\n\n\n-----Examples-----\nInput\n4\n1 3 3 7\n\nOutput\n2\n\nInput\n2\n1 100000\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example you can remove $7$ then instability of the remaining array will be $3 - 1 = 2$.\n\nIn the second example you can remove either $1$ or $100000$ then instability of the remaining array will be $100000 - 100000 = 0$ and $1 - 1 = 0$ correspondingly.", "input": "Calculate the minimum difference between maximum and minimum elements after removing one element from an array.", "test_cases": {"inputs": ["4\n1 3 3 7\n", "2\n1 100000\n", "5\n3 1 4 4 2\n", "3\n1 10 11\n", "60\n36 91 2 38 37 49 48 11 59 67 53 56 35 60 87 59 60 16 73 34 15 4 57 40 38 44 4 80 63 26 94 99 68 47 88 4 96 36 15 54 54 19 9 88 78 47 99 90 63 23 23 77 79 31 68 68 75 71 100 37\n", "3\n1 2 4\n", "4\n1 5 6 7\n", "4\n12 8 7 4\n", "23\n48 76 49 46 54 10 7 11 48 78 1 44 36 64 73 19 80 83 81 59 19 18 8\n", "5\n1 12 13 14 15\n", "3\n1 3 4\n", "6\n1 47 66 81 19 95\n", "12\n1 2 3 4 5 6 7 8 9 10 11 12\n", "4\n1 2 3 7\n", "3\n1 4 4\n", "23\n5 61 68 76 70 87 26 55 83 93 95 45 90 36 95 99 72 10 97 22 13 23 100\n", "4\n1 6 7 9\n", "24\n93 94 43 61 84 67 63 4 42 4 40 1 37 57 51 68 19 18 92 44 62 62 38 51\n", "3\n1 345 347\n", "3\n4 5 5\n", "5\n3 4 3 1 5\n", "3\n99999 100000 100000\n", "35\n13 9 84 88 42 75 73 3 10 44 94 74 36 14 23 67 85 94 55 93 38 82 96 54 19 99 73 58 65 90 41 29 50 77 17\n", "3\n4 1 2\n", "9\n94 33 89 40 53 48 71 78 88\n", "4\n1 4 8 9\n", "80\n85 14 30 21 2 68 24 96 71 4 78 33 15 32 55 86 62 55 71 26 14 45 26 47 24 6 16 21 84 52 87 20 65 68 40 18 35 15 13 57 70 91 89 84 22 43 21 83 50 92 8 15 36 86 61 12 43 28 32 26 31 70 97 47 37 88 64 23 3 77 80 24 67 68 8 40 63 80 74 64\n", "27\n89 65 26 78 91 30 4 18 65 72 96 15 99 22 26 60 36 98 86 79 30 57 52 94 70 35 29\n", "64\n58 66 82 99 26 95 18 87 83 65 29 83 89 72 23 41 87 48 14 7 83 20 34 63 83 80 33 70 12 59 88 21 76 70 71 53 16 88 40 99 5 20 81 93 91 55 33 29 54 46 35 36 18 69 50 100 100 82 21 11 40 60 31 68\n", "52\n27 30 55 43 7 12 25 21 76 78 61 88 96 8 12 88 50 57 37 36 57 59 48 39 44 71 91 74 94 42 3 72 23 57 14 81 20 90 53 48 19 13 35 14 73 98 1 74 55 90 9 11\n", "4\n4 11 12 17\n", "44\n76 38 4 52 34 38 23 88 8 80 33 43 37 48 67 18 37 21 94 60 90 18 9 85 60 45 18 26 20 72 74 95 9 77 98 94 14 72 81 73 52 13 15 88\n", "2\n47 2\n", "21\n91 46 66 24 98 3 2 16 64 47 66 9 88 24 55 39 42 23 39 69 4\n", "78\n20 4 81 66 78 5 47 77 63 9 26 91 45 44 28 70 73 58 30 61 92 55 8 1 54 9 41 83 79 58 80 50 13 13 68 90 69 14 18 31 22 43 73 66 38 1 88 11 10 17 71 53 71 30 5 76 38 98 59 69 7 38 70 19 2 37 60 70 50 78 53 72 72 25 89 62 77 76\n", "5\n1 9 4 11 10\n", "45\n97 87 66 76 82 5 67 20 77 29 63 18 48 18 28 26 12 13 96 60 21 93 94 7 20 23 100 80 21 10 80 69 96 97 96 29 1 62 49 78 42 11 47 90 29\n", "4\n1 5 5 6\n", "2\n1220 1000\n", "3\n1 1 4\n", "3\n1 4 8\n", "59\n73 46 90 8 44 17 32 67 18 68 35 85 86 63 44 64 73 12 96 37 86 70 88 2 73 61 37 12 23 55 96 96 100 85 55 95 53 38 61 70 57 96 7 94 10 50 57 83 13 53 71 50 74 58 51 47 19 39 10\n", "3\n40 67 65\n", "3\n4 56 62\n", "76\n23 38 14 65 43 92 98 33 32 71 52 88 6 9 38 63 20 14 84 58 84 66 87 62 30 14 81 6 39 32 22 61 22 87 77 16 30 26 48 62 97 51 49 2 60 38 65 31 51 100 40 86 17 78 47 47 92 80 52 82 63 25 42 84 12 19 99 41 96 99 54 92 49 54 46 60\n", "13\n43 28 60 70 71 57 24 94 54 95 34 7 93\n", "6\n67 100 5 97 83 85\n", "30\n28 69 21 75 45 3 30 78 95 30 49 53 29 50 44 90 15 47 84 88 15 80 29 83 12 43 36 71 75 23\n", "18\n88 16 51 10 26 52 88 56 54 16 30 43 89 90 70 66 5 72\n", "3\n1 7 8\n", "43\n20 75 10 50 77 99 75 54 1 62 46 19 37 4 79 37 100 85 54 59 91 91 96 38 62 49 28 39 29 81 49 48 7 11 49 83 9 24 88 61 85 33 31\n", "5\n3 3 3 5 7\n", "95\n28 37 51 19 54 38 21 62 47 83 96 60 36 89 14 77 4 16 99 25 41 55 67 38 13 35 88 19 73 70 16 100 6 66 70 12 55 90 73 54 24 20 13 60 8 27 88 11 94 86 87 34 40 5 23 5 92 11 23 64 32 38 16 38 56 37 1 10 79 25 63 54 44 28 65 3 54 52 66 99 37 4 33 29 9 7 33 52 17 55 67 49 45 82 38\n", "3\n2 30 33\n", "17\n99 42 52 81 78 94 100 56 20 60 74 88 2 55 7 78 35\n", "3\n7 9 11\n", "3\n1 4 5\n", "3\n2 23 3\n", "4\n7 24 20 12\n", "4\n6 4 1 2\n", "3\n1 8 7\n", "4\n6 4 2 1\n", "18\n71 72 96 81 89 62 42 28 92 1 37 28 3 19 65 79 73 33\n", "3\n39 14 59\n", "7\n14 20 15 12 1 4 7\n", "3\n9 15 16\n", "3\n4 4 14\n", "4\n12521 87651 61289 78514\n", "10\n671 529 765 761 54 406 450 284 312 567\n", "14\n14 10 4 19 16 16 8 8 15 23 14 1 8 16\n", "20\n9 10 23 6 15 10 13 3 3 20 16 16 7 3 24 25 25 10 18 6\n", "4\n49999 49999 100000 100000\n", "8\n8 20 7 16 11 9 24 2\n", "8\n1 5 5 6 6 7 7 9\n", "67\n76344 46992 50112 6145 4118 31055 70413 55046 92656 2066 2039 38823 73744 5618 66069 50373 77580 22466 7802 86261 5150 98903 97345 62706 21074 19227 39450 26828 85204 49023 1245 61547 12367 51356 84043 32836 98762 54455 87881 91417 56521 89919 46592 46616 95536 12660 96988 89467 51478 21141 92080 56627 20043 89424 35684 57469 25002 75133 648 26557 24155 1892 88103 36521 69599 72146 69356\n", "30\n5494 90839 21677 21065 33720 40995 69053 30133 68390 23593 73669 59438 16475 78283 85669 57228 19501 93784 45860 30592 31376 14060 99524 43144 38260 21140 37393 46696 26737 86463\n", "82\n53931 67166 20637 68570 4855 63080 53128 28375 54407 70564 46622 46903 32659 68966 20614 11381 51217 94774 90448 13368 51098 46518 15907 1090 44331 39269 17316 22813 66082 78034 58245 36364 45200 78881 4933 66406 58312 74413 94780 12718 61328 57754 75973 93986 26719 12938 21718 94288 24063 28518 7655 75160 91387 39913 76250 35717 95534 9917 74881 61615 87950 33125 97978 49501 28357 19262 15906 3021 93674 27038 15738 55002 84791 8062 65339 27861 20999 87057 22148 61413 15574 46154\n", "3\n1 20 21\n"], "outputs": ["2\n", "0\n", "2\n", "1\n", "96\n", "1\n", "2\n", "4\n", "76\n", "3\n", "1\n", "76\n", "10\n", "2\n", "0\n", "90\n", "3\n", "90\n", "2\n", "0\n", "2\n", "0\n", "90\n", "1\n", "54\n", "5\n", "94\n", "84\n", "93\n", "95\n", "6\n", "90\n", "0\n", "89\n", "91\n", "7\n", "95\n", "1\n", "0\n", "0\n", "3\n", "93\n", "2\n", "6\n", "94\n", "71\n", "33\n", "83\n", "80\n", "1\n", "96\n", "2\n", "97\n", "3\n", "93\n", "2\n", "1\n", "1\n", "12\n", "3\n", "1\n", "3\n", "91\n", "20\n", "14\n", "1\n", "0\n", "26362\n", "481\n", "18\n", "22\n", "50001\n", "17\n", "4\n", "97658\n", "85464\n", "94444\n", "1\n"]}, "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nprint(min(a[-1] - a[1], a[-2] - a[0]))\\n\", \"n=int(input())\\na=list(map(int,input().split()))\\na.sort()\\nif a[1]-a[0]>=a[-1]-a[-2]:\\n    print(a[-1]-a[1])\\nelse:\\n    print(a[-2]-a[0])\\n\", \"n=int(input())\\narr=list(map(int,input().split()))\\narr.sort()\\nval1=max(arr)-min(arr[1:])\\nval2=max(arr[:n-1])-min(arr)\\nprint(min(val1,val2))\\n\", \"n = int(input())\\nnums = sorted(list(map(int, input().split())))\\n\\nr1 = nums[-2] - nums[0]\\nr2 = nums[-1] - nums[1]\\nprint(min(r1, r2))\\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\ntry :\\n    #raise ModuleNotFoundError\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\n\\ninId = 0\\noutId = 0\\nif inId>0:\\n    dprint('use input', inId)\\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\nif outId>0:\\n    dprint('use output', outId)\\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n    atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n    \\nN, = getIntList()\\n#print(N)\\nza = getIntList()\\n\\nza.sort()\\n\\nt = za[-1] - za[1]\\nt1 = za[-2] - za[0]\\n\\nprint(min(t,t1))\\n\\n\\n\\n\\n\\n\", \"n = int(input())\\na = list(map(int,input().split()))\\na.sort()\\n\\nif(len(a) == 2):\\n\\tprint(0)\\nelse:\\n\\tprint(min(a[-1]-a[1], a[-2]-a[0]))\", \"def read_nums():\\n    return [int(x) for x in input().split()]\\n\\n\\ndef main():\\n    n, = read_nums()\\n    nums = sorted(read_nums())\\n    res = min(nums[-2] - nums[0], nums[-1] - nums[1])\\n    print(res)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def solve():\\n    n = int(input())\\n    arr = [int(k) for k in input().split()]\\n    \\n    arr.sort()\\n    \\n    if n == 2:\\n        print (0)\\n        return\\n    \\n    ans = arr[-1] - arr[1]\\n    ans = min(ans, arr[-2] - arr[0])\\n    \\n    print (ans)\\n    \\ndef __starting_point():\\n    solve()\\n__starting_point()\", \"# alpha = \\\"abcdefghijklmnopqrstuvwxyz\\\"\\nt = 1\\nfor test in range(t):\\n    # n,s = (map(int, input().split()))\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    a.sort()\\n    if a[1]-a[0]>a[-1]-a[-2]:\\n        print(a[-1]-a[1])\\n    else:\\n        print(a[-2]-a[0])\\n\\n\", \"def go():\\n    n = int(input())\\n    a = [int(i) for i in input().split(' ')]\\n    if n == 2:\\n        return 0\\n    m1 = max(a)\\n    a.remove(m1)\\n    m2 = max(a)\\n    mi1 = min(a)\\n    a.remove(mi1)\\n    mi2 = min(a)\\n    if m2 - mi1 < m1 - mi2:\\n        return m2 - mi1\\n    return m1 - mi2\\n\\nprint(go())\\n\", \"n = input()\\narr = [int(x) for x in input().split()]\\narr.sort()\\n\\nx1, x2 = arr[0], arr[1]\\ny1, y2 = arr[-1], arr[-2]\\n\\nif (y2 - x1) > (y1 - x2):\\n    print(y1 - x2)\\nelse:\\n    print(y2 - x1)\\n\", \"n=int(input())\\na=[int(s) for s in input().split()]\\na.sort()\\nmn1=a[n-2]-a[0]\\nmn2=a[n-1]-a[1]\\nprint(min(mn1,mn2))\\n\", \"#JMD\\n#Nagendra Jha-4096\\n\\n \\nimport sys\\nimport math\\n\\n#import fractions\\n#import numpy\\n \\n###File Operations###\\nfileoperation=0\\nif(fileoperation):\\n    orig_stdout = sys.stdout\\n    orig_stdin = sys.stdin\\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\\n    sys.stdin = inputfile\\n    sys.stdout = outputfile\\n\\n###Defines...###\\nmod=1000000007\\n \\n###FUF's...###\\ndef nospace(l):\\n    ans=''.join(str(i) for i in l)\\n    return ans\\n \\n \\n \\n##### Main ####\\nt=1\\nfor tt in range(t):\\n    n=int(input())\\n    a=list(map(int,sys.stdin.readline().split(' ')))\\n    a.sort()\\n\\n    print(min(a[-2]-a[0],a[-1]-a[1]))\\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\\n    \\n    \\n#####File Operations#####\\nif(fileoperation):\\n    sys.stdout = orig_stdout\\n    sys.stdin = orig_stdin\\n    inputfile.close()\\n    outputfile.close()\\n\", \"n = int(input())\\na = sorted(list(map(int, input().split())))\\nans = 0\\nif n > 2:\\n    ans = min(a[-2] - a[0], a[-1] - a[1])\\nprint(ans)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\na.sort()\\nif a[1]-a[0]>a[-1]-a[-2]:\\n\\tdel a[0]\\nelse:\\n\\tdel a[-1]\\nprint(a[-1]-a[0])\", \"n = int(input())\\ns = list(map(int, input().split()))\\nM = max(s)\\nm = min(s)\\ni = M - m\\ns.remove(M)\\nM1 = max(s)\\ni1 = M1 - m\\ns.append(M)\\ns.remove(m)\\nm1 = min(s)\\ni2 = M - m1\\nprint(min(i,i1,i2))\\n\", \"from operator import itemgetter\\n#int(input())\\n#map(int,input().split())\\n#[list(map(int,input().split())) for i in range(q)]\\n#print(\\\"YES\\\" * ans + \\\"NO\\\" * (1-ans))\\nn = int(input())\\nai = list(map(int,input().split()))\\nai.sort()\\nprint(min(ai[-2] - ai[0],ai[-1] - ai[1]))\\n\", \"n=int(input())\\na=list(map(int,input().split()))\\na.sort()\\nprint(min(a[n-1]-a[1],a[n-2]-a[0]))\", \"n = int(input())\\na = sorted(list(map(int, input().split())))\\nprint(min(a[n - 2] - a[0], a[n - 1] - a[1]))\", \"n = int(input())\\nl = list(map(int, input().split()))\\nl.sort()\\nans1 = l[-2] - l[0]\\nans2 = l[-1] - l[1]\\nprint(min(ans1, ans2))\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\na.sort(reverse = True)\\nprint(min(a[0] - a[-2], a[1] - a[-1]))\", \"n=int(input())\\nl=list(map(int,input().split()))\\nl.sort()\\nprint(min(l[n-1]-l[0],l[n-1]-l[1],l[n-2]-l[0]))\", \"import sys\\nsys.setrecursionlimit(10**6)\\n\\ndef main(): \\n   nbEntrees = int(input())\\n   nb = list(map(int, input().split()))\\n   maximum = max(nb)\\n   nb.remove(maximum)\\n\\n   etendue = max(nb) - min(nb)\\n   nb.append(maximum)\\n   maximum = min(nb)\\n   nb.remove(maximum)\\n   \\n   etendue = min(etendue, max(nb) - min(nb))\\n\\n   print(etendue)\\n\\nmain()\", \"#codeforces _1095B_live\\ngi = lambda : list(map(int,input().split()))\\nn, = gi()\\nl = gi()\\nl.sort()\\nans = min(max(l)-min(l[1:]),(max(l[:-1])-min(l)))\\nprint(ans)\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}