{"qid": 4051, "orig_input": "Everybody knows of spaghetti sort. You decided to implement an analog sorting algorithm yourself, but as you survey your pantry you realize you're out of spaghetti! The only type of pasta you have is ravioli, but you are not going to let this stop you...\n\nYou come up with the following algorithm. For each number in the array a_{i}, build a stack of a_{i} ravioli. The image shows the stack for a_{i} = 4.\n\n [Image] \n\nArrange the stacks in one row in the order in which the corresponding numbers appear in the input array. Find the tallest one (if there are several stacks of maximal height, use the leftmost one). Remove it and add its height to the end of the output array. Shift the stacks in the row so that there is no gap between them. Repeat the procedure until all stacks have been removed.\n\nAt first you are very happy with your algorithm, but as you try it on more inputs you realize that it doesn't always produce the right sorted array. Turns out when two stacks of ravioli are next to each other (at any step of the process) and differ in height by two or more, the top ravioli of the taller stack slides down on top of the lower stack.\n\nGiven an input array, figure out whether the described algorithm will sort it correctly.\n\n\n-----Input-----\n\nThe first line of input contains a single number n (1 \u2264 n \u2264 10) \u2014 the size of the array.\n\nThe second line of input contains n space-separated integers a_{i} (1 \u2264 a_{i} \u2264 100) \u2014 the elements of the array.\n\n\n-----Output-----\n\nOutput \"YES\" if the array can be sorted using the described procedure and \"NO\" if it can not.\n\n\n-----Examples-----\nInput\n3\n1 2 3\n\nOutput\nYES\n\nInput\n3\n3 1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the second example the array will change even before the tallest stack is chosen for the first time: ravioli from stack of height 3 will slide on the stack of height 1, and the algorithm will output an array {2, 2, 2}.", "input": "Determine if a given array can be correctly sorted using a ravioli stack sorting algorithm where taller stacks may collapse onto shorter adjacent stacks.", "test_cases": {"inputs": ["3\n1 2 3\n", "3\n3 1 2\n", "1\n13\n", "10\n67 67 67 67 67 67 67 67 67 67\n", "10\n16 17 16 15 14 15 16 17 16 15\n", "4\n54 54 54 55\n", "3\n68 67 67\n", "5\n46 46 47 46 45\n", "4\n14 15 15 16\n", "6\n59 59 60 60 59 58\n", "3\n40 40 40\n", "4\n90 91 90 91\n", "10\n9 9 9 10 10 9 8 8 9 9\n", "3\n22 23 24\n", "9\n71 71 70 70 71 70 69 70 71\n", "9\n15 14 14 13 13 12 13 13 14\n", "4\n61 60 60 60\n", "4\n16 17 17 18\n", "6\n87 86 86 86 85 86\n", "5\n64 63 63 62 61\n", "9\n13 80 13 38 98 85 11 73 74\n", "10\n2 83 18 65 58 95 37 51 86 47\n", "6\n47 100 96 2 96 43\n", "10\n28 61 23 73 61 33 45 55 18 43\n", "10\n95 51 52 8 44 39 77 17 96 88\n", "5\n14 91 91 91 84\n", "4\n92 18 29 93\n", "7\n23 37 39 8 72 31 85\n", "4\n61 28 3 81\n", "4\n83 100 81 75\n", "9\n95 7 97 61 90 7 30 65 39\n", "3\n90 39 98\n", "3\n76 9 12\n", "3\n69 26 73\n", "10\n55 39 93 42 97 40 36 38 11 97\n", "5\n21 57 40 94 17\n", "7\n35 91 87 78 17 71 63\n", "7\n20 21 95 73 49 98 53\n", "8\n46 4 30 85 52 6 84 13\n", "10\n79 84 22 38 23 22 33 42 13 96\n"], "outputs": ["YES\n", "NO\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "YES\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n"]}, "solutions": "[\"\\\"\\\"\\\"\\nCodeforces April Fools 2018 Problem C\\n\\nAuthor  : chaotic_iak\\nLanguage: Python 3.5.2\\n\\\"\\\"\\\"\\n\\n################################################### SOLUTION\\n\\ndef initialize_solution():\\n    pass\\n\\ndef main():\\n    n, = read()\\n    a = read()\\n    for i in range(n-1):\\n        if abs(a[i] - a[i+1]) >= 2:\\n            return \\\"NO\\\"\\n    return \\\"YES\\\"\\n\\n########################################## PROBLEM CONSTANTS\\n\\nREAD_FROM_FILE = None\\nOUTPUT_PREFIX = None\\nINTERACTIVE = False\\n\\n#################################################### HELPERS\\n\\nimport sys\\n\\ndef read(callback=int, split=True):\\n    if READ_FROM_FILE:\\n        ipt = sfile.readline().strip()\\n    else:\\n        ipt = input().strip()\\n    if INTERACTIVE and ipt == \\\"WRONG_ANSWER\\\":\\n        return\\n    if split:\\n        return list(map(callback, ipt.split()))\\n    else:\\n        return callback(ipt)\\n\\ndef write(value, end=\\\"\\\\n\\\"):\\n    if value is None: return\\n    try:\\n        if not isinstance(value, str):\\n            value = \\\" \\\".join(map(str, value))\\n    except:\\n        pass\\n    if READ_FROM_FILE:\\n        tfile.write(str(value, end=end))\\n    else:\\n        print(value, end=end)\\n    if INTERACTIVE:\\n        sys.stdout.flush()\\n\\nsfile = None\\ntfile = None\\nif READ_FROM_FILE:\\n    sfile = open(READ_FROM_FILE + \\\".in\\\", \\\"r\\\")\\n    sfile.seek(0)\\n    tfile = open(READ_FROM_FILE + \\\".out\\\", \\\"w\\\")\\nif OUTPUT_PREFIX is None:\\n    result = main()\\n    if result is not None:\\n        write(result)\\nelse:\\n    initialize_solution()\\n    TOTAL_CASES, = read()\\n    for CASE_NUMBER in range(1, TOTAL_CASES+1):\\n        write(OUTPUT_PREFIX.replace(\\\"%d\\\", str(CASE_NUMBER)), end=\\\"\\\")\\n        result = main()\\n        if result is not None:\\n            write(result)\\nif sfile is not None: sfile.close()\\nif tfile is not None: tfile.close()\\n\", \"n = int(input())\\nf = 0\\na = list(map(int , input().split()))\\nfor i in range(n - 1):\\n    if(abs(a[i] - a[i + 1]) > 1):\\n        f = 1\\nprint([\\\"YES\\\" , \\\"NO\\\" ][f])\\n\", \"# -*- coding: utf-8 -*-\\n\\nimport math\\n\\nn = int(input())\\ns = input().split()\\nfor i in range(1,len(s)):\\n    if math.fabs(int(s[i]) - int(s[i-1])) > 1:\\n        print(\\\"NO\\\")\\n        return\\n\\nprint(\\\"YES\\\")\", \"n = int(input())\\n\\na = list(map(int, input().split()))\\nfor i in range(n - 1):\\n    if abs(a[i] - a[i + 1]) >= 2:\\n        print('NO')\\n        return\\nprint('YES')\", \"input()\\na = list(map(int,input().split()))\\ns = sorted(a)\\nwhile a:\\n    for i in range(1,len(a)):\\n        if a[i] > a[i - 1] + 1 or a[i] + 1 < a[i - 1]:\\n            print('NO')\\n            return\\n    a.remove(max(a))\\nprint('YES')\", \"\\n# A\\n# print(int(input()) % 2)\\n\\n# C\\ninput()\\na = [int(x) for x in input().split()]\\nwhile a:\\n    for i in range(len(a)-1):\\n        if abs(a[i] - a[i+1]) >= 2:\\n            print('NO')\\n            return\\n    i = a.index(max(a))\\n    a.pop(i)\\nprint('YES')\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nf = 'YES'\\nfor i in range(n - 1):\\n    if abs(a[i] - a[i + 1]) > 1:\\n        f = 'NO'\\n        break\\nprint(f)\", \"ooo = input()\\nm = [int(i) for i in input().split()]\\nk = False\\nfor i in range(int(ooo)-1):\\n    if abs(m[i]-m[i+1]) > 1:\\n        print('NO')\\n        k = True\\n        break\\nif not k:print('YES')\", \"def govno():\\n    for i in range(len(num) - 1):\\n        if abs(num[i] - num[i + 1]) >= 2:\\n            if num[i] < num[i + 1]:\\n                num[i + 1] -= 1\\n                num[i] += 1\\n            else:\\n                num[i] -= 1\\n                num[i + 1] += 1\\n\\n\\nn = int(input())\\nnum = list(map(int, input().split()))\\ncor = []\\ncor += num\\ncor.sort()\\nour = []\\nfor i in range(n):\\n    govno()\\n    a = max(num)\\n    num.pop(num.index(a))\\n    our.append(a)\\nour.reverse()\\nif our == cor:\\n    print('YES')\\nelse:\\n    print('NO')\", \"N = int(input())\\nA = list(map(int, input().split()))\\nok = True\\nfor i in range(N):\\n  for j in range(N - i - 1):\\n    if abs(A[j] - A[j + 1]) > 1:\\n      ok = False\\n  idx = A.index(max(A))\\n  A = A[:idx] + A[idx + 1:]\\nif ok:\\n  print('YES')\\nelse:\\n  print('NO')\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nfor i in range(len(a) - 1):\\n    if abs(a[i + 1] - a[i]) > 1:\\n        print('NO')\\n        return\\n\\nwhile len(a) > 0:\\n    m = max(a)\\n    i = a.index(m)\\n    a.remove(m)\\n    if 0 < i < len(a) and abs(a[i] - a[i - 1]) > 1:\\n        print('NO')\\n        return\\n\\nprint('YES')\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nfor i in range(len(a) - 1):\\n    if abs(a[i + 1] - a[i]) > 1:\\n        print('NO')\\n        return\\n\\nprint('YES')\", \"n = int(input())\\nr = list(map(int, input().split(' ')))\\ns = []\\n\\ndef ok():\\n    prev = r[0]\\n    for ra in r[1:]:\\n        if abs(ra-prev) >= 2:\\n            return False\\n        prev = ra\\n    return True\\n\\nwhile len(r):\\n    if not ok():\\n        print('NO')\\n        return\\n    \\n    maxi = 0\\n    for i in range(len(r)):\\n        if r[i] > r[maxi]:\\n            maxi = i\\n    r.pop(maxi)\\n    \\nprint('YES')\\n\", \"n = int(input())\\nb = True\\na = [int(i) for i in input().split()]\\nfor i in range(n-1):\\n    if abs(a[i+1]-a[i])>=2: b = False\\nif b: print(\\\"YES\\\")\\nelse: print(\\\"NO\\\")\", \"n = int(input().strip())\\nx = list(map(int, input().strip().split()))\\n\\ndef check(y):\\n    for i in range(len(y)-1):\\n        if abs(y[i]-y[i+1]) > 1:\\n            return False\\n    return True\\n\\nokay = True\\nif not check(x):\\n    okay = False\\nwhile len(x) > 1:\\n    m = max(x)\\n    x.remove(m)\\n    if not check(x):\\n        okay = False\\n\\nprint('YES' if okay else 'NO')\\n\", \"def check(d):\\n    for i in range(1, len(d)):\\n        if abs(d[i - 1] - d[i]) > 1:\\n            return 1\\n    return 0\\n\\nn = int(input())\\na = [int(i) for i in input().split()]\\nb = []\\nans = 0\\nans = ans or check(a)\\nfor i in range(n):\\n    mx = max(a)\\n    a.pop(a.index(mx))\\n    b.append(mx)\\n    ans = ans or check(a)\\nans = ans or check(b)\\nprint(['YES', 'NO'][ans])\", \"n = int(input())\\narr = list(map(int, input().split()))\\nfor i in range(n - 1):\\n    if abs(arr[i] - arr[i + 1]) >= 2:\\n        print('NO')\\n        break\\nelse:\\n    print('YES')\\n\", \"import sys\\nn = input()\\na = [int(x) for x in input().split()]\\nac = list(a)\\nr = []\\nok = True\\n\\nfor i in range(len(a) - 1):\\n    if (abs(a[i] - a[i + 1]) >= 2):\\n        print (\\\"NO\\\")\\n        return\\na = list(sorted(a))\\n\\nfor i in range(len(a) - 1):\\n    if (abs(a[i] - a[i + 1]) >= 2):\\n        print (\\\"NO\\\")\\n        return\\n        \\nprint (\\\"YES\\\")\", \"def is_good(xs):\\n    for i in range(1, len(xs)):\\n        if abs(xs[i] - xs[i - 1]) >= 2:\\n            return False\\n    return True\\n\\n\\nn = int(input())\\nxs = list(map(int, input().split()))\\nok = is_good(xs) and is_good(list(sorted(xs)))\\nfor i in range(n):\\n    pos = 0\\n    for j in range(n - i):\\n        if xs[j] > xs[pos]:\\n            pos = j\\n    val = xs[pos]\\n    xs.pop(pos)\\n    ok = ok and is_good(xs)\\nprint('YES' if ok else 'NO')\", \"n=int(input())\\na=list(map(int,input().split()))\\ns=set()\\nfor i in range(n-1):\\n    s.add(abs(a[i]-a[i+1]))\\nif len(list([x for x in s if x>1]))>0:print('NO')\\nelse:print('YES')\\n\", \"def topple(a):\\n    for i in range(1, len(a)):\\n        if a[i] - 2 >= a[i - 1]:\\n            a[i] -= 1\\n            a[i - 1] += 1\\n        elif a[i] + 2 <= a[i - 1]:\\n            a[i - 1] -= 1\\n            a[i] += 1\\n\\n    return a\\n\\ndef ravioli(a):\\n    res = []\\n    while a:\\n        a = topple(a)\\n        best = 0 \\n        for i in range(len(a)):\\n            if a[i] > a[best]:\\n                best = i\\n        res.append(a[best])\\n        a = a[:best] + a[best + 1:]\\n\\n    return list(reversed(res))\\n\\nn = int(input())\\na = list(map(int, input().split()))\\nb = list(a)\\nb.sort()\\n\\nc = ravioli(a)\\nif b == c:\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"\\nn = int(input())\\na = list(map(int, input().split()))\\nok = True\\n\\nfor i in range(n - 1):\\n    if abs(a[i] - a[i + 1]) > 1:\\n        ok = False\\n\\nif ok:\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"'''input\\n3\\n3 1 2\\n'''\\n\\ndef check(a):\\n\\tfor i in range(len(a)-1):\\n\\t\\tif(abs(a[i]-a[i+1]) >= 2): return False\\n\\treturn True\\n\\nn = int(input())\\na = list(map(int,input().split()))\\nans = \\\"YES\\\"\\nwhile(a):\\n\\tif(not check(a)):\\n\\t\\tans = \\\"NO\\\"\\n\\t\\tbreak\\n\\tind = 0\\n\\tmx = a[0]\\n\\tfor i in range(1,n):\\n\\t\\tif(a[i] > mx):\\n\\t\\t\\tmx = a[i]\\n\\t\\t\\tind = i\\n\\tn -= 1\\n\\tdel(a[ind])\\nprint(ans)\\t\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nwhile len(a)!=1:\\n    \\n    m = a[0]\\n    im = 0\\n    for i in range(1,len(a)):\\n        if abs(a[i] - a[i-1])>=2:\\n            print(\\\"NO\\\")\\n            return\\n        if a[i]>m:\\n            m = a[i]\\n            im = i\\n    a.pop(im)\\nprint(\\\"YES\\\")\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = sorted(a, reverse=True)\\nc = []\\nfor i in range(n):\\n    for j in range(len(a) - 1):\\n        if a[j] > a[j + 1] + 1 or a[j] < a[j + 1] - 1:\\n            print('NO')\\n            return\\n    c += [max(a)]\\n    a.remove(max(a))\\nassert b == c, (b, c)\\nprint('YES')\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}