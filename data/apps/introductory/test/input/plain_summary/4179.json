{"qid": 4179, "orig_input": "There are N pieces of source code. The characteristics of the i-th code is represented by M integers A_{i1}, A_{i2}, ..., A_{iM}.\nAdditionally, you are given integers B_1, B_2, ..., B_M and C.\nThe i-th code correctly solves this problem if and only if A_{i1} B_1 + A_{i2} B_2 + ... + A_{iM} B_M + C > 0.\nAmong the N codes, find the number of codes that correctly solve this problem.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N, M \\leq 20\n - -100 \\leq A_{ij} \\leq 100\n - -100 \\leq B_i \\leq 100\n - -100 \\leq C \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M C\nB_1 B_2 ... B_M\nA_{11} A_{12} ... A_{1M}\nA_{21} A_{22} ... A_{2M}\n\\vdots\nA_{N1} A_{N2} ... A_{NM}\n\n-----Output-----\nPrint the number of codes among the given N codes that correctly solve this problem.\n\n-----Sample Input-----\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\n-----Sample Output-----\n1\n\nOnly the second code correctly solves this problem, as follows:\n - Since 3 \\times 1 + 2 \\times 2 + 1 \\times 3 + (-10) = 0 \\leq 0, the first code does not solve this problem.\n - 1 \\times 1 + 2 \\times 2 + 2 \\times 3 + (-10) = 1 > 0, the second code solves this problem.", "input": "Count the number of code samples that satisfy a given linear inequality based on their characteristics and provided coefficients.", "test_cases": {"inputs": ["2 3 -10\n1 2 3\n3 2 1\n1 2 2\n", "5 2 -4\n-2 5\n100 41\n100 40\n-3 0\n-6 -2\n18 -13\n", "3 3 0\n100 -100 0\n0 100 100\n100 100 100\n-100 100 100\n", "15 15 -41\n-100 8 -8 -52 -62 -61 -76 -52 -52 14 -11 -2 -54 46 8\n26 -17 -35 34 87 5 42 -44 66 -32 71 -31 9 -51 90\n-62 86 -52 7 88 25 -14 -7 37 -55 98 64 51 34 -85\n8 -18 34 64 93 -37 16 80 -70 -28 63 31 100 6 1\n-95 11 -64 81 -99 -54 -82 -52 70 -70 -37 72 -75 -70 -62\n-56 -59 90 83 32 -63 32 -21 25 -11 25 93 75 52 4\n-87 91 -78 17 61 100 -50 -75 93 61 38 -62 39 97 -48\n-35 2 12 -66 86 45 -19 7 67 -59 -3 42 19 -82 16\n87 98 -82 2 -6 98 51 93 -31 -68 -58 36 -7 -67 -14\n43 3 -65 -44 -64 -57 -14 -22 -16 78 99 -13 72 88 67\n-14 52 30 80 89 -47 62 41 -91 -75 92 -11 92 -40 11\n12 -96 -72 38 97 30 -22 -57 61 77 40 -43 -39 -1 -33\n54 -57 -12 79 56 -77 55 64 -81 45 -17 53 48 91 -85\n-80 93 85 -3 -99 -60 86 73 91 -99 77 -89 -77 36 -17\n-45 73 5 -52 36 -65 39 22 -9 24 13 -100 71 -6 95\n-12 66 98 77 99 17 -84 -17 -12 46 -97 39 91 48 -94\n", "9 9 11\n81 90 73 -56 1 -13 71 -82 -64\n-96 39 -26 -53 -31 19 -87 -86 -48\n57 13 -96 32 -10 64 -80 79 -93\n-72 40 54 82 -21 69 38 -37 79\n-65 14 -24 -69 43 89 -74 -84 -21\n-16 23 -4 50 -38 48 -62 92 72\n35 -4 -36 39 7 76 -83 55 50\n-93 16 95 -17 81 22 18 -57 8\n-94 14 51 26 -54 -66 -15 -81 43\n43 -44 -96 80 -58 86 -4 -68 -72\n", "15 15 100\n-70 91 -8 -22 29 60 0 -83 -62 -44 100 82 -58 -94 -29\n79 89 46 -91 -57 -49 84 -20 -50 40 -56 96 -95 75 -86\n15 30 -41 29 -35 -65 35 33 61 55 96 73 59 2 -20\n38 84 -40 7 -2 -36 -44 -84 92 58 -15 -72 54 -59 -53\n50 -21 -7 7 80 -23 -73 -95 -6 15 -22 10 92 -58 34\n14 -52 62 -98 27 -83 -87 -89 54 -33 62 91 -67 32 -96\n75 96 72 -69 49 -18 -85 94 96 -62 -1 -95 10 15 32\n91 12 28 -95 -45 9 -97 -50 80 46 -42 -40 0 20 20\n-36 -80 -38 -30 -37 86 -71 -83 -48 27 -34 -47 -2 -43 18\n-9 86 -26 3 17 52 -88 -91 -2 -33 -20 79 15 -8 -68\n-27 -6 1 83 -90 84 58 43 -100 25 -47 -10 -16 -72 -22\n-69 -74 15 52 25 -3 24 -8 15 87 74 -54 7 -64 91\n57 -15 -42 -45 1 -48 -18 -89 -65 79 27 37 68 -61 -83\n100 83 -69 98 -80 -42 97 -69 31 74 -21 -88 97 -32 -5\n-77 82 -24 -29 47 -56 38 48 50 63 7 -58 -99 59 62\n-88 -68 -87 18 -64 -100 84 28 -54 -19 24 67 -82 94 -90\n", "20 20 55\n-79 -77 97 29 47 -64 -4 -2 33 37 -19 -84 -84 -11 -28 -62 87 -82 28 -73\n25 29 -65 77 73 61 100 -6 36 88 -82 -90 59 36 -63 -12 -75 95 87 94\n48 -79 -97 80 86 60 2 -3 -29 -85 -42 -50 -39 -50 12 -27 88 59 -35 16\n84 65 -84 -47 47 51 47 -61 63 -77 35 94 49 -85 -7 21 24 1 40 -75\n-98 59 -30 46 25 -20 65 -45 87 38 79 -62 -4 11 -77 70 -89 33 4 -56\n-69 -60 54 12 -8 7 -72 48 -73 31 38 52 -48 -21 -3 91 51 -44 -59 48\n37 -21 63 34 -56 12 12 55 -21 98 -43 -87 22 95 26 83 -15 26 -87 68\n-64 -39 -68 0 39 43 -81 -23 80 -98 -25 53 -40 -11 -20 47 61 -8 -6 37\n-73 1 -95 54 26 -35 -59 -61 13 -21 -37 -3 -24 -86 -10 6 92 -22 -17 -56\n84 37 -17 -47 88 45 -19 -34 68 21 77 -52 -20 -27 31 10 51 62 27 20\n-10 30 -87 -19 98 -95 16 -2 -73 -7 40 78 -90 -23 29 -39 27 -47 -48 -25\n1 80 -40 -33 -31 74 -77 -22 -32 -48 51 -43 -97 -39 76 -64 -18 47 10 44\n-81 -84 -74 58 71 9 -12 -18 -41 -17 96 81 53 -51 22 73 -83 12 47 31\n-84 -100 39 -5 69 99 82 75 98 47 -4 -57 -81 74 71 97 66 -23 -78 -75\n32 -16 20 -24 -70 -5 -69 52 -14 -14 -80 46 -45 -41 14 15 -59 86 24 -25\n35 -48 -46 64 -13 -85 83 -56 -86 19 54 83 -95 -67 56 -90 -39 -11 21 -12\n24 100 -44 -32 36 20 -73 -31 37 93 44 -16 58 80 46 0 23 -88 -52 68\n23 43 -41 -49 -46 45 58 -37 42 -41 -89 -68 100 -96 -99 -6 21 69 -13 15\n23 29 26 74 49 -75 80 41 -39 65 -69 69 19 -29 49 -76 27 -50 11 74\n50 49 -49 33 10 -19 -69 86 -39 -81 23 16 -41 -87 -68 -38 69 31 50 20\n-64 59 -96 48 -18 61 -24 -50 55 -56 -62 77 -88 23 -4 -60 57 -51 63 56\n", "20 20 100\n79 -9 51 83 98 -20 8 2 20 -92 91 97 -29 -56 -85 15 -4 -45 56 38\n98 -34 69 48 -88 72 33 38 64 -46 -64 47 -97 23 77 50 48 94 -38 17\n-85 35 55 -49 30 15 -80 -31 49 69 52 -50 81 -83 -26 58 -11 -79 -7 83\n98 -81 89 42 -13 -42 59 -1 74 29 -42 52 -11 37 76 -23 39 1 -93 -71\n-72 -28 -14 -91 -82 -60 16 -39 81 42 91 72 -91 -69 75 13 -78 -89 65 -24\n98 -62 53 53 19 -18 -61 -66 23 74 -69 -18 -57 -25 15 -70 71 39 -24 -2\n-70 -14 31 88 15 9 50 -46 -73 83 17 23 -88 -10 81 25 -22 -42 0 41\n68 -90 69 -61 5 43 4 -35 50 90 42 -60 1 -6 65 57 -88 -48 97 36\n26 80 -7 -36 9 -15 -78 -83 7 12 60 -19 -31 81 14 -62 -79 46 46 100\n89 -97 91 73 22 -24 -61 -19 -27 -24 -93 -93 87 -98 17 14 6 -49 -98 -90\n95 -74 -33 -22 -67 -17 -84 38 -47 97 97 -4 -78 3 -33 -53 -78 68 76 -56\n40 29 -4 -51 4 -44 86 47 30 -55 12 -54 -76 -11 -38 -100 -72 91 -52 1\n-57 -64 -80 63 15 96 -15 21 96 -70 -54 -9 64 34 27 18 25 13 99 41\n98 -64 75 94 -77 43 63 96 -94 65 -37 -96 -99 59 -70 55 72 -23 -14 50\n-76 46 -21 5 -95 -52 -46 47 51 -93 43 40 60 82 29 78 -66 25 90 42\n98 -59 97 55 -92 91 -58 -27 -81 -5 -55 70 39 37 98 78 -26 -40 -12 52\n-27 -41 -46 -82 63 -34 52 -23 -62 -49 6 35 18 46 -40 -91 87 85 33 -6\n62 56 -52 85 -79 57 -39 -79 -33 -62 -17 -10 -26 83 43 41 -81 -58 10 36\n80 87 100 -3 -71 -84 28 -53 79 -22 -17 -30 -96 1 14 37 -59 58 -43 -47\n97 -56 61 14 77 97 -10 -63 3 -10 -79 -20 -16 -1 63 92 -67 44 -88 8\n90 -70 79 88 -89 59 -8 -66 43 57 31 -85 97 -8 -25 80 -47 28 30 -22\n", "20 20 -100\n70 86 4 68 -17 15 31 29 80 87 51 -24 52 -91 -83 -78 87 -68 94 -79\n99 73 -16 0 -49 -12 52 -38 84 8 -82 -47 -6 45 60 -73 -90 -32 -46 62\n100 100 80 100 -29 67 50 6 100 -2 58 5 -1 37 97 97 -49 48 -94 14\n87 49 -41 -86 57 -33 -64 33 -54 60 -39 -33 0 3 34 31 -3 -47 52 47\n-100 -100 -91 -100 99 -99 -61 -98 69 -24 45 -47 -27 -77 -50 -50 88 -19 3 -13\n61 22 7 -39 14 15 -10 -1 -25 -71 91 31 -20 -17 -48 84 -16 -24 -15 -56\n95 67 0 -78 -57 -38 58 -24 25 -68 -40 -42 -85 87 19 9 84 61 84 0\n50 33 100 90 48 68 59 -73 -7 -15 -29 54 -96 -89 50 -68 7 76 -26 67\n77 94 4 -23 71 -19 -25 -3 -84 40 -69 -24 -13 94 -31 -17 8 62 18 -49\n97 -65 -62 7 -11 22 49 -36 63 94 53 -18 -30 39 -46 99 -5 56 18 90\n28 -80 -67 3 -17 -75 -77 60 -42 68 84 48 70 21 19 52 37 -57 -33 -10\n-68 -88 90 6 25 -42 -98 26 -43 43 -75 28 23 -79 -42 -11 18 53 93 3\n100 100 98 100 -100 100 96 88 79 -64 -77 -53 -48 100 -21 27 5 67 -90 63\n-80 -76 -32 -29 -43 94 44 9 35 66 -29 21 -96 40 -82 -45 -52 -93 -65 -84\n25 3 14 6 -54 19 20 -22 -20 34 -15 38 79 84 99 -96 33 -3 53 89\n-84 -87 -57 -92 4 7 -98 25 -71 89 -41 -11 94 -3 -26 61 78 -58 53 -47\n-75 -58 74 1 44 80 -37 56 100 5 92 -22 50 56 22 -27 84 36 -57 24\n65 89 24 -91 6 54 -88 47 56 -49 46 71 -42 94 47 89 92 23 79 -19\n-38 -21 3 -46 33 74 37 74 -75 41 86 2 23 44 28 50 -16 -41 85 -20\n-96 57 -18 -5 80 -4 85 -26 -42 55 -35 -79 67 -30 52 72 19 47 99 47\n-98 -94 -2 -21 71 21 -17 90 21 52 31 -46 69 -40 -44 -5 -48 -23 -3 25\n", "20 20 9\n-100 -99 -98 -97 -96 -95 -94 -93 -92 -91 -90 -89 -88 -87 -86 -85 -84 -83 -82 -81\n-100 -87 -84 -78 -68 -79 -3 36 9 95 80 73 50 25 -64 100 93 24 90 -56\n-16 -80 0 -72 46 47 -1 -80 -25 71 27 43 14 3 81 -84 -47 -75 76 91\n-68 -62 -81 -78 -17 74 -7 8 16 -24 -35 77 81 49 -28 50 37 4 62 -22\n-38 -99 -96 90 13 -89 0 15 90 98 -19 -49 78 24 -57 58 -60 -13 38 37\n86 98 60 81 -99 -66 14 -78 11 6 19 18 -84 -98 14 -11 16 -59 47 2\n85 46 58 10 12 -86 51 89 -42 -27 56 -43 -78 -22 -97 44 -21 36 -66 -38\n29 40 -2 58 40 16 45 -59 71 -22 -1 -32 -85 -29 19 -6 -50 -12 -92 45\n94 20 53 84 -1 -90 31 -4 93 -74 -81 -32 -89 48 -68 -79 -60 15 83 36\n-80 -9 -86 80 -32 -94 42 50 -68 4 37 -100 53 50 81 -100 57 81 16 51\n-35 -28 -9 -21 -3 82 66 -62 -17 46 -7 86 14 76 -57 42 -59 -85 31 -67\n-74 18 -73 -52 -100 72 -27 -8 85 -75 39 33 52 4 72 94 6 14 27 -81\n97 99 36 47 -15 -7 66 -24 63 -52 -83 31 -36 -83 -93 -91 81 -88 93 -84\n59 91 73 -6 44 -53 74 28 -77 -20 -80 20 -19 -61 -98 87 46 -8 -71 -65\n-36 -21 3 100 -38 11 18 23 -30 -94 -3 88 -44 59 -33 57 27 -87 64 -66\n-13 32 28 -15 77 -89 36 31 39 57 -14 -55 -61 -93 -22 7 80 -38 54 -52\n55 79 24 -63 36 -34 -41 60 -74 -42 51 87 -58 -65 -75 -8 -15 35 -44 82\n-59 -99 -32 -65 79 -76 -4 92 -26 88 -15 -29 -67 55 59 14 30 -53 65 78\n-70 -73 -65 -13 68 19 -72 43 64 79 96 -71 0 35 -28 -72 14 62 66 -66\n-81 -70 -63 88 -10 9 90 49 -36 -86 81 20 -12 -17 49 -76 -76 97 5 56\n72 16 -24 76 -84 -39 -17 43 -21 -17 -47 72 59 -42 22 19 3 89 -95 -99\n", "20 20 16\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81\n-91 93 -17 70 -46 -27 42 42 32 64 -75 -32 -92 -12 60 -57 93 -95 -35 80\n-15 -46 82 23 52 75 81 88 -7 -97 -24 -73 -77 50 -21 -53 88 -49 -99 -6\n42 89 99 -1 -1 -61 15 -83 90 77 -71 -88 -70 -30 -40 80 75 -90 26 -87\n-41 10 -38 -27 16 -1 -29 -49 94 78 86 41 -32 94 -97 78 -43 -34 -83 -28\n66 94 91 9 71 -99 -35 74 23 -36 -59 -47 -37 -23 -88 13 -46 59 -32 -34\n-88 -95 -57 -21 34 -49 -62 59 0 -91 39 -43 74 55 78 49 15 30 97 28\n91 27 -40 60 -16 -90 50 -36 60 -36 97 -3 -96 -67 89 -20 -85 -11 -14 23\n53 1 46 -56 -64 25 43 -66 99 -75 -37 -91 66 -85 30 -57 54 9 17 95\n56 -18 -98 76 2 18 -34 51 7 -77 -99 -80 -17 -6 80 -26 81 -34 99 32\n-37 -57 -79 64 -82 12 68 -85 8 52 -53 -98 23 -8 12 63 84 19 92 40\n-19 -50 -94 -52 -26 78 34 75 94 92 53 1 -79 62 -57 30 -53 -30 -82 21\n78 -32 -37 -17 20 10 57 38 42 -81 -55 45 14 -26 56 -80 -75 53 -69 48\n6 63 56 98 30 -23 1 -98 -90 -8 -50 -78 80 -2 76 -98 72 44 -69 -27\n55 3 16 -43 31 -85 4 45 61 35 -79 -25 80 -81 -18 11 80 55 -83 -74\n41 49 -86 -81 44 85 -83 26 -53 -49 15 40 38 24 -34 -92 -38 65 81 16\n-77 -79 -93 -74 24 1 -41 47 99 -92 70 64 98 8 29 -32 -27 -18 42 91\n97 94 82 71 100 -47 79 -87 -21 -72 -93 -99 21 -23 -99 -37 -35 77 -95 42\n-16 1 33 53 -1 -23 41 62 87 -22 -26 -25 -37 7 -96 -8 44 -51 -63 20\n51 65 32 -33 -33 -63 100 5 -73 -3 68 -5 -24 -28 26 -78 -35 38 30 -57\n44 90 51 24 -9 -63 -64 -32 -53 -2 -6 96 59 -40 -44 -30 -77 38 18 -16\n", "19 20 0\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 100 100 -100 -100 -100 -100 100 -100 -100\n100 -100 -100 100 100 100 -100 100 -100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 100 100 -100 -100 -100 100 -100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 100 100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 -100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 100 100 -100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 -100 100 -100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 -100 -100 -100 100 -100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 100 -100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 100 -100 -100 -100 100 -100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 -100 -100 100 -100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 100 100 -100 -100 -100 -100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 100 100 -100 -100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 100 100 -100 -100 -100 100 -100 100 100\n-100 100 100 -100 -100 -100 100 -100 100 100 100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 -100 -100 100 100 100 100 -100 100 100\n100 -100 -100 100 100 100 -100 100 -100 -100 -100 100 100 -100 -100 -100 -100 100 100 100\n", "19 20 0\n-100 -100 100 100 100 -100 100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 100 -100 100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 100 100 100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 100 100 100 100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 100 100 100 100 100 100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 100 100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 -100 100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 100 100 100 -100 100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 100 100 -100 100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 100 100 100 100 100 100 -100 -100 100 -100\n100 -100 100 100 100 -100 100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 100 100 100 100 100 100 -100 100 100 -100\n100 100 -100 -100 -100 100 -100 -100 100 100 100 100 100 100 100 -100 100 100 100 -100\n-100 -100 100 100 100 -100 100 100 -100 -100 -100 -100 -100 -100 -100 -100 100 100 100 -100\n", "20 20 1\n-100 -100 -100 100 100 -100 100 100 100 -100 100 100 -100 100 100 -100 -100 -100 100 100\n-100 -100 100 -100 100 100 -100 100 100 100 -100 100 100 -100 100 -100 -100 -100 -100 100\n-100 -100 100 100 100 100 -100 100 -100 100 -100 100 100 100 100 100 100 -100 100 -100\n-100 -100 100 100 -100 100 100 -100 -100 100 100 -100 -100 100 100 -100 100 100 100 100\n100 -100 -100 -100 100 100 100 100 100 100 -100 100 -100 -100 -100 -100 -100 -100 -100 -100\n-100 -100 -100 -100 -100 100 100 -100 100 100 -100 100 -100 -100 -100 -100 -100 -100 100 100\n-100 -100 -100 100 100 -100 100 -100 -100 -100 -100 -100 100 100 100 -100 -100 100 -100 100\n-100 -100 100 -100 100 -100 -100 100 -100 100 -100 -100 -100 100 100 -100 100 100 100 -100\n100 100 100 -100 -100 100 100 -100 100 -100 100 100 100 100 100 -100 -100 100 -100 100\n-100 100 -100 100 -100 100 -100 -100 100 100 -100 100 100 100 -100 -100 100 -100 -100 100\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n-100 -100 -100 100 100 -100 100 100 100 -100 100 100 -100 100 100 -100 -100 -100 100 100\n100 100 100 100 -100 100 -100 100 100 100 -100 100 100 -100 100 100 100 100 100 100\n-100 -100 -100 100 100 -100 -100 -100 -100 100 100 100 100 -100 -100 -100 100 -100 100 100\n-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100\n-100 -100 100 -100 100 100 100 100 100 -100 100 -100 -100 100 100 -100 100 100 -100 -100\n-100 100 100 -100 100 -100 -100 100 -100 -100 100 -100 -100 -100 -100 100 100 -100 -100 100\n100 100 100 -100 -100 100 -100 -100 -100 100 -100 -100 100 -100 -100 100 100 100 -100 -100\n100 -100 100 100 -100 100 -100 100 100 -100 -100 100 -100 100 -100 100 100 100 -100 -100\n-100 -100 -100 100 100 -100 100 -100 -100 -100 -100 100 100 -100 100 100 100 -100 -100 -100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n", "20 20 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n43 -38 89 66 75 -44 -33 24 -52 32 99 -9 16 -57 -61 33 26 44 30 69\n58 33 -21 -7 66 82 -98 -85 90 -16 60 85 -31 66 -44 0 67 34 -52 40\n-96 -7 -12 67 26 -62 -36 19 -78 -77 30 -79 21 52 -87 80 79 -95 -93 59\n-87 78 27 51 -36 -9 -60 -29 -18 -49 99 91 81 -38 19 -49 47 75 -66 -84\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n-76 50 43 91 74 -25 -92 15 85 98 -94 -31 64 -29 90 7 -79 22 -31 35\n-94 0 -2 54 1 65 6 43 -8 -76 36 66 1 -2 -67 11 -85 70 -7 -7\n-57 99 3 -7 73 -22 -10 66 98 23 60 88 12 46 22 -91 -67 -87 -50 -86\n-83 53 -13 35 -74 70 -54 50 40 -53 46 7 -18 -93 36 -59 86 23 76 42\n-64 67 -26 86 -64 23 99 51 -43 32 -79 31 -96 -6 85 35 -13 -77 -19 -3\n-81 -42 -91 61 -73 -42 -60 24 31 -91 -56 -13 72 -49 -17 -26 63 28 23 -95\n-2 -51 81 31 -5 57 -11 62 58 -57 -76 -99 -69 14 -7 -10 5 -77 -29 36\n34 -56 24 -28 33 32 -31 71 49 59 64 -89 -34 -50 -49 -45 -6 9 20 60\n-42 21 67 -61 -41 -93 -31 93 75 73 2 16 21 89 -58 -6 55 -84 -72 40\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100\n40 90 13 -32 41 15 47 45 77 55 68 34 23 79 -75 -70 -16 16 -25 -48\n-37 74 -25 27 64 -99 1 -85 14 -84 49 -81 -99 75 69 48 -77 72 23 4\n20 -71 30 -88 31 -38 46 -63 -95 97 -7 85 -43 -65 -58 52 -42 -20 33 82\n-97 -14 51 87 -91 21 68 -46 82 98 -22 22 -93 -26 -4 90 44 20 17 37\n", "20 20 -1\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n43 -71 72 21 -71 10 -99 -63 53 69 -42 87 -94 -100 54 -64 -28 19 62 -21\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n89 41 83 98 22 98 9 69 47 -54 51 -30 -60 -31 98 -84 -12 -57 -46 -6\n-97 -82 52 50 48 -46 94 -92 19 -64 -86 -83 68 78 -69 -71 85 -17 -67 30\n-3 -87 85 85 4 16 -84 -82 64 6 100 1 54 -63 -96 -2 -17 87 99 -19\n77 -5 -37 3 24 -65 -75 52 -79 -67 78 24 20 -54 -83 -75 36 -64 53 74\n23 15 88 39 84 -48 15 61 31 -9 97 41 48 24 -28 38 -78 -15 72 -8\n5 -25 31 -72 43 -81 -15 -76 -69 36 -13 -23 -96 -53 77 53 -56 18 86 54\n-8 28 91 -33 35 20 24 24 -24 99 48 -59 32 28 -87 92 26 -25 25 -64\n-10 -85 -21 -6 -93 -34 -81 15 -41 16 89 -51 99 8 68 73 -51 7 84 -25\n-98 47 24 -75 36 -44 -9 -75 55 12 -32 -26 19 -62 -69 15 -92 18 -28 80\n-34 24 90 28 78 27 -88 -47 -52 -49 65 60 64 33 91 -98 -74 -60 75 -34\n-100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100 -100\n-13 -39 -40 74 -64 46 -25 -65 -8 37 94 47 -18 22 31 -79 66 -76 -88 57\n15 95 -17 22 -14 2 -41 -8 -6 -99 -14 -22 -44 -93 -30 -100 82 82 -23 -53\n95 71 36 -16 -93 10 61 -23 -28 -38 34 -88 -50 -37 17 73 52 84 71 71\n76 9 -72 -69 1 -57 -4 38 -91 -1 -12 88 -21 66 -95 -72 87 -10 -57 62\n91 53 -100 76 43 -33 41 -13 -11 92 -92 -93 -21 28 54 42 -29 -70 44 54\n68 -2 -37 89 -90 0 6 -66 -39 -9 30 46 -41 -61 41 -47 64 92 -88 53\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n", "1 20 19\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\n"], "outputs": ["1\n", "2\n", "0\n", "5\n", "2\n", "9\n", "10\n", "6\n", "6\n", "8\n", "8\n", "8\n", "10\n", "14\n", "0\n", "0\n", "1\n"]}, "solutions": "[\"n,m,c=map(int,input().split())\\nb=list(map(int,input().split()))\\nr=0\\nfor _ in range(n):\\n  a=list(map(int,input().split()))\\n  d=0\\n  for jj in range(m):\\n    d+=a[jj]*b[jj]\\n  if d+c>0:\\n    r+=1\\nprint(r)\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\nA = [0]*N\\nfor i in range(N):\\n    A[i] = [ int(j) for j in input().split() ]\\n\\ncnt = 0\\nfor i in range(N):\\n    pm = C\\n    for j in range(M):\\n        pm += A[i][j]*B[j]\\n    if pm > 0:\\n        cnt += 1\\n\\nprint(cnt)\", \"ans = 0\\nn, m, c = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\n\\nfor i in range(n):\\n    a = list(map(int, input().split()))\\n    tmp = sum([a_ * b_ for (a_, b_) in zip(a, b)]) + c\\n    if tmp > 0:\\n        ans += 1\\n\\nprint(ans)\\n\", \"N,M,C=list(map(int, input().split()))\\nB=list(map(int, input().split()))\\n\\nans=0\\n\\nfor _ in range(N):\\n\\tA=list(map(int, input().split()))\\n\\ttemp=C\\n\\tfor a,b in zip(A,B):\\n\\t\\ttemp+=a*b\\n\\tif temp>0:\\n\\t\\tans+=1\\n\\nprint(ans)\\n\", \"N, M, C = list(map(int, input().split()))\\nB = list(map(int, input().split()))\\nA = [list(map(int, input().split())) for _ in range(N)]\\n\\ncnt = 0\\nfor n in range(N):\\n    value = 0\\n    for m in range(M):\\n        value += A[n][m]*B[m]\\n    value += C\\n    if value > 0:\\n        cnt += 1\\n\\nprint(cnt)\\n\", \"n,m,c = map(int, input().split())\\nb = list(map(int, input().split()))\\ncount = 0\\nfor i in range(n):\\n    s = 0\\n    a = list(map(int, input().split()))\\n    for x in range(m):\\n        s += a[x]*b[x]\\n    s += c\\n    if s > 0:\\n        count += 1\\nprint(count)\", \"n,m,c = map(int,input().split())\\n \\nb = [int(x) for x in input().split()]\\ncnt = 0\\nfor i in range(n):\\n    a = [int(x) for x in input().split()]\\n    ans = c\\n    for j in range(m):\\n        ans += (a[j]*b[j])\\n    if(ans > 0):\\n        cnt += 1\\n \\nprint(cnt)\", \"N,M,C = map (int, input ().split ())\\nans = 0\\nB = [int (x) for x in input().split()]\\nfor i in range (N):\\n  K = 0\\n  A = [int (x) for x in input().split()]\\n  for j in range (M):\\n    K += (A[j])*(B[j])\\n  if K+C > 0:\\n    ans += 1\\nprint (ans)\", \"n,m,c = map(int,input().split())\\nb = list(map(int,input().split()))\\nans = 0\\nfor i in range(n):\\n  a = list(map(int,input().split()))\\n  cnt = 0\\n  for j in range(m):\\n    cnt += a[j]*b[j]\\n  if cnt + c > 0:\\n    ans += 1\\nprint(ans)\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(n):\\n    ac = 0\\n    a = list(map(int, input().split()))\\n    for j in range(m):\\n        ac += a[j] * b[j]\\n    if ac+c > 0:\\n        cnt += 1\\nprint(cnt)\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\ncount = 0\\nfor n in range(N):\\n    A = list(map(int, input().split()))\\n    total = C\\n    for i ,j in zip(B, A):\\n        total += i * j\\n    if total > 0:\\n        count += 1\\nprint(count)\", \"n,m,c=list(map(int,input().split()))\\nb=list(map(int,input().split()))\\n\\ncnt=0\\nfor _ in range(n):\\n    sum=c\\n    a=list(map(int,input().split()))\\n    for i in range(m):\\n        sum+=a[i]*b[i]\\n\\n    if sum>0:\\n        cnt+=1\\n\\nprint(cnt)\\n\", \"N, M, C, = map(int, input().split())\\nB = list(map(int, input().split()))\\nA = [tuple(map(int, input().split())) for _ in range(N)]\\n\\ncnt = 0\\nfor a in range(N):\\n    math_list = []\\n    for b in range(M):\\n        math_list.append(A[a][b] * B[b])\\n    if sum(math_list) + C > 0:\\n        cnt += 1\\n\\nprint(cnt)\", \"n,m,c=map(int,input().split())\\nb=list(map(int,input().split()))\\na=[list(map(int,input().split())) for _ in range(n)]\\nans=0\\nsum_tmp=0\\nfor i in range(n):\\n    for j in range(m):\\n        sum_tmp+=a[i][j]*b[j]\\n    else:\\n        if sum_tmp+c>0:\\n            ans+=1\\n        sum_tmp=0\\nprint(ans)\", \"n,m,c=list(map(int, input().split()))\\nb=[int(i) for i in input().split()]\\n\\ncount=0\\nfor i in range(n):\\n    a=[int(i) for i in input().split()]\\n    sum=c\\n    for j in range(m):\\n        sum+=a[j]*b[j]\\n    \\n    if sum>0:\\n        count+=1\\n        \\nprint(count)\\n\", \"n,m,c = map(int,input().split())\\nb = list(map(int,input().split()))\\nans = 0\\nfor i in range(n):\\n  a = list(map(int,input().split()))\\n  x = c\\n  for j in range(m):\\n    x += a[j]*b[j]\\n  if x > 0:\\n    ans += 1\\nprint(ans)\", \"n, m, c = map(int, input().split())\\nlist01 = list(map(int, input().split()))\\na = 0\\nb = 0\\nfor i in range(n):\\n    list02 = list(map(int, input().split()))\\n    for j in range(m):\\n        a += list02[j] * list01[j]\\n    if a + c > 0:\\n        b += 1\\n        a = 0\\n    else:\\n        a = 0\\nprint(b)\", \"#!/usr/local/bin/python3\\n# https://atcoder.jp/contests/abc121/tasks/abc121_b\\n\\nN, M, C = list(map(int, input().split()))\\nB = list(map(int, input().split()))\\nA = []\\nfor _ in range(N):\\n    A.append(list(map(int, input().split())))\\n\\nans = 0\\n\\nfor i in range(N):\\n    y = 0\\n    for j in range(M):\\n        y += A[i][j]*B[j]\\n    y += C\\n\\n    if y > 0:\\n        ans += 1\\n\\nprint(ans)\\n\", \"n,m,c = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\na = [list(map(int,input().split())) for i in range(n)]\\n\\nans = 0\\nfor i in range(n):\\n    count = c\\n    for j in range(m):\\n        count += b[j]*a[i][j]\\n    if count > 0 :\\n        ans += 1\\n\\nprint(ans)\\n\", \"n,m,c = map(int,input().split())\\nb = list(map(int,input().split()))\\na = []\\ncnt = 0\\n\\nfor i in range(n):\\n    a.append(list(map(int,input().split())))\\n    tmp = 0\\n    for j in range(m):\\n        tmp += a[i][j]*b[j]\\n    if tmp + c > 0 :\\n        cnt += 1\\n\\nprint(cnt)\", \"N,M,C = list(map(int, input().split()))\\nB = list(map(int,input().split()))\\nans = 0\\nfor i in range(N):\\n  A = list(map(int,input().split()))\\n  sum = 0\\n  for j in range(M):\\n    sum += A[j] * B[j]\\n  if sum > -C:\\n    ans += 1\\nprint(ans)\\n\", \"code_number, characteristic_code, integer3 = map(int, input().split())\\ninteger2 = list(map(int, input().split()))\\ninteger1 = [list(map(int, input().split())) for i in range(code_number)]\\nsolution = 0\\nfor i in range(code_number):\\n    multiplication = integer3\\n    for j in range(characteristic_code):\\n        multiplication += integer2[j] * integer1[i][j]\\n    if multiplication > 0:\\n        solution += 1\\nprint(solution)\", \"n,m,c=map(int,input().split())\\nB=list(map(int,input().split()))\\nA=[list(map(int,input().split())) for i in range(n)]\\nans=0\\nfor a in A:\\n  s=c\\n  for i in range(m):\\n    s += a[i]*B[i]\\n  if s>0:\\n    ans += 1\\nprint(ans)\", \"#-*-coding:utf-8-*-\\nimport sys\\ninput=sys.stdin.readline\\n\\ndef main():\\n    n,m,c = map(int,input().split())\\n    base_data=[]\\n    source_codes=[]\\n    base_data=list(map(int,input().split()))\\n    source_codes=[list(map(int,input().split())) for _ in range(n)]\\n    ans=0\\n    cnt=0\\n\\n    for i in range(n):\\n        for j in range(m):\\n            ans+=source_codes[i][j]*base_data[j]\\n        ans=ans+c\\n        if ans > 0:\\n            ans=0\\n            cnt+=1\\n        else:\\n            ans=0\\n            continue\\n    \\n    print(cnt)    \\n    \\ndef __starting_point():\\n    main()\\n__starting_point()\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\na = [list(map(int, input().split())) for _ in range(n)]\\n\\nans = 0\\nfor i in range(n):\\n    s = 0\\n    for j in range(m):\\n        s += a[i][j] * b[j]\\n    if s + c > 0:\\n        ans += 1\\nprint(ans)\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\nA = []\\nfor i in range(N):\\n  A.append(list(map(int, input().split())))\\n\\ncnt = 0\\nfor i in range(N):\\n  pro = C\\n  for j in range(M):\\n    pro += A[i][j] * B[j]\\n  if pro > 0:\\n    cnt += 1\\nprint(cnt)\", \"def main():\\n    n, m, c = list(map(int, input().split()))\\n    b = list(map(int, input().split()))\\n    a = []\\n\\n    cnt = 0\\n    for i in range(n):\\n        a.append(list(map(int, input().split())))\\n\\n    for i in range(n):\\n        ans = 0\\n        for k in range(m):\\n            ans += a[i][k] * b[k]\\n        if ans + c > 0:\\n            cnt += 1\\n    print(cnt)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def mapt(fn, *args):\\n    return tuple(map(fn, *args))\\n\\n\\ndef Input():\\n    return mapt(int, input().split(\\\" \\\"))\\n\\n\\ndef main():\\n    n, m, c = Input()\\n    b = Input()\\n    a = [Input() for _ in range(n)]\\n    ans = 0\\n    for row in a:\\n        tmp = c\\n        for x, y in zip(row, b):\\n            tmp += x * y\\n        if tmp > 0:\\n            ans += 1\\n    print(ans)\\n\\nmain()\", \"n, m, c = map(int, input().split())\\nbase_list = list(map(int, input().split()))\\ndouble_lists = []\\ncalc_sum = 0\\nans = 0\\n\\nfor _ in range(n):\\n    a = list(map(int, input().split()))\\n    double_lists.append(a)\\n\\nfor i in double_lists:\\n    for index, j in enumerate(i):\\n        calc_sum += j * base_list[index]\\n    if calc_sum + c > 0:\\n        ans += 1\\n    calc_sum = 0\\n\\nprint(ans)\", \"N,M,C=list(map(int,input().split()))\\nans=0\\nB=list(map(int,input().split()))\\n\\nfor i in range(N):\\n    A=list(map(int,input().split()))\\n    s=C\\n    for j in range(M):\\n        s+=A[j]*B[j]\\n    if s>0:\\n        ans+=1\\n\\nprint(ans)\\n\", \"n,m,c = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nans = 0\\nfor i in range(n):\\n    tmp = 0\\n    a = list(map(int,input().split()))\\n    for j in range(m):\\n        tmp+=a[j]*b[j]\\n    if tmp+c>0 :\\n        ans+=1\\n\\nprint(ans)\\n\", \"a = [int(c) for c in input().split()]\\nN = a[0]\\nM = a[1]\\nC = a[2]\\nB = [int(c) for c in input().split()]\\nA = [list(map(int,input().split())) for c in range(N)]\\n\\nresult = []\\n\\nfor i in range(N):\\n    cnt = C\\n    for j in range(M):\\n        cnt += A[i][j]*B[j]\\n    \\n    if cnt > 0:\\n        result.append(1)\\n    else:\\n        result.append(0)\\n\\nprint(sum(result))\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\na = [list(map(int, input().split())) for i in range(n)]\\n\\nans =0\\nfor i in range(n):\\n    if sum([a[i][j]*b[j] for j in range(m)]) + c > 0:\\n        ans += 1\\nprint(ans)\", \"import numpy as np\\nn,m,c = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nb = np.array(b)\\nk = 0\\nfor i in range(n):\\n    a = list(map(int,input().split()))\\n    a = np.array(a)\\n    ans = np.dot(a,b)\\n    if ans  +c > 0:\\n        k +=1\\nprint(k)\\n\", \"n, m, c = list(map(int, input().split(\\\" \\\")))\\nb_arr = list(map(int, input().split(\\\" \\\")))\\nans = 0\\na_arr = []\\nfor _ in range(n):\\n    a_arr = list(map(int, input().split(\\\" \\\")))\\n    sum_num = c\\n\\n    for i in range(m):\\n        sum_num += a_arr[i] * b_arr[i]\\n\\n    if sum_num > 0:\\n        ans += 1\\nprint(ans)\\n\", \"#\\u5165\\u529b:N,M(int:\\u6574\\u6570)\\ndef input2():\\n\\treturn map(int,input().split())\\n\\n#\\u5165\\u529b:[n1,n2,...nk](int:\\u6574\\u6570\\u914d\\u5217)\\ndef input_array():\\n\\treturn list(map(int,input().split()))\\n  \\nn,m,c=input2()\\nB=input_array()\\nA=[input_array() for _ in range(n)]\\n\\ncount=0\\n\\nfor a in A:\\n\\ttmp=c\\n\\tfor i in range(m):\\n\\t\\ttmp+=a[i]*B[i]\\n\\n\\tif tmp>0:\\n\\t\\tcount+=1\\nprint(count)\", \"n,m,c=map(int,input().split())  \\nb =list(map(int, input().split()))\\ncnt = 0\\nfor i in range(n):\\n    s = 0\\n    a =list(map(int, input().split()))\\n    for j in range(m):\\n        s += a[j]*b[j]\\n    if s +c > 0:\\n        cnt +=1\\nprint(cnt)\", \"N,M,C=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\nans=0\\nfor _ in range(N):\\n    A=list(map(int,input().split()))\\n    x=C\\n    for i in range(M):\\n        x+=A[i]*B[i]\\n    if x>0:\\n        ans+=1\\nprint(ans)\\n\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\n\\ncount = 0\\n\\nfor i in range(0, N):\\n    A = list(map(int, input().split()))\\n    answer = 0\\n    for j in range(0, M):\\n        answer += A[j] * B[j]\\n    answer += C\\n    if answer > 0:\\n        count += 1\\n\\nprint(count)\", \"n, m, c = map(int, input().split())\\nb = [int(i) for i in input().split()]\\na = [[int(i) for i in input().split()] for j in range(n)]\\n\\nanswer = 0\\nfor i in range(n):\\n    x = 0\\n    for j in range(len(a[i])):\\n        x += a[i][j] * b[j]\\n    x += c\\n    if x > 0:\\n        answer += 1\\nprint(answer)\", \"import numpy as np\\n# import math\\n\\n# from scipy.special import perm\\n# from scipy.special import comb\\n\\n# from numba import njit\\n# @njit('f8(i8,i8,i8,i8,f8[:,:,:])', cache=True)\\n\\ndef lcm(a, b):\\n    return a*b//math.gcd(a, b)\\n\\nMOD = 10**9+7\\n\\nn ,m, c = list(map(int, input().split()))\\n\\nB = np.zeros(m)\\nA = np.zeros((n, m))\\n\\n\\nB = np.array(list(map(int, input().split())))\\n\\nfor i in range(n):\\n    A[i] = list(map(int, input().split()))\\n\\ncnt = 0\\nfor i in range(n):\\n    if np.dot(A[i],B)+c > 0:\\n        cnt += 1\\nprint(cnt)\\n\", \"n, m, c = list(map(int, input().split()))\\nbase_list = list(map(int, input().split()))\\ndouble_lists = []\\ncalc_sum = 0\\nans = 0\\n\\nfor _ in range(n):\\n    a = list(map(int, input().split()))\\n    double_lists.append(a)\\n\\nfor i in double_lists:\\n    for index, j in enumerate(i):\\n        calc_sum += j * base_list[index]\\n    if calc_sum + c > 0:\\n        ans += 1\\n    calc_sum = 0\\n\\nprint(ans)\\n\", \"N, M, C = map(int, input().split())\\nlists_B = list(map(int, input().split()))\\nlists_A = []\\nfor _ in range(1, N + 1):\\n    lists_A.append(input().split())\\n\\nSUM = 0\\nresult = 0\\n\\nfor i in range(0, N):\\n    for j in range(0, M):\\n        SUM += int(lists_A[i][j]) * lists_B[j]\\n\\n    if SUM + C > 0:\\n        result += 1\\n\\n    SUM = 0\\n\\nprint(result)\", \"n,m,c=map(int,input().split())\\nco=0\\nb=list(map(int,input().split()))\\nfor i in range(n):\\n  a=list(map(int,input().split()))\\n  s=0\\n  #co=0\\n  for i in range(len(a)):\\n    s+=(a[i]*b[i])\\n  res=(s+c)\\n  if res>0:\\n    co+=1\\nprint(co)\", \"N, M, C = list(map(int, input().split()))\\nB = list(map(int, input().split()))\\nans = 0\\nfor i in range(N):\\n  temp = C\\n  A = list(map(int, input().split()))\\n  for i in range(M):\\n    temp += (A[i] * B[i])\\n  if temp > 0:\\n    ans += 1\\nprint(ans)\\n\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\ne = 0\\nfor i in range(n):\\n  a = list(map(int, input().split()))\\n  d = 0\\n  for i in range(len(b)):\\n    d = a[i]*b[i] + d\\n  if d+c > 0:\\n    e = e+1\\nprint(e)\", \"n,m,c = map(int,input().split())\\nb = list(map(int,input().split()))\\nans = 0\\nfor i in range(n):\\n    temp = 0\\n    a = list(map(int,input().split()))\\n    for j in range(m):\\n        temp += a[j]*b[j]\\n    if temp + c > 0:\\n        ans += 1\\n        \\nprint(ans)\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\na = [list(map(int, input().split())) for _ in range(n)]\\n\\nans = 0\\nfor i in range(n):\\n    sum = 0\\n\\n    for j in range(m):\\n        sum += a[i][j] * b [j]\\n\\n    if sum + c > 0:\\n        ans += 1\\n\\n\\nprint(ans)\", \"N,M,C=map(int,input().split())\\nB=list(map(int,input().split()))\\nA=[list(map(int,input().split())) for _ in range(N)]\\n\\nans=0\\nfor i in range(N):\\n    tmp=0\\n    for a,b in zip(A[i],B):\\n        tmp+=a*b\\n    tmp+=C\\n    if tmp>0: ans+=1\\nprint(ans)\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\n\\ncode_count = 0\\nanswer = 0\\n\\nwhile N > code_count:\\n    A = list(map(int, input().split()))\\n    sum = C\\n    for i in range(M):\\n        sum += A[i] * B[i]\\n    if sum > 0:\\n        answer += 1\\n    code_count += 1\\n\\nprint(answer)\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\nd = 0\\nfor i in range(n):\\n    a = list(map(int, input().split()))\\n    e = []\\n    for j in range(m):\\n        e.append(a[j] * b[j])\\n    e.append(c)\\n    if sum(e) > 0:\\n        d += 1\\nprint(d)\", \"N, M, C = list(map(int, input().split()))\\nB = [int(i) for i in input().split()]\\n\\ncnt = 0\\n\\nfor i in range(N):\\n    A = [int(i) for i in input().split()]\\n    sum = C\\n    for j in range(M):\\n        sum += A[j] * B[j]\\n        j += 1\\n    if sum > 0:\\n        cnt += 1\\n    i += 1\\n\\nprint(cnt)\\n\", \"a = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nc = []\\nans = 0\\ne = 0\\nfor i in range(a[0]):\\n  d = list(map(int,input().split()))\\n  c .append(d)\\nfor i in c:\\n  for j in range(a[1]):\\n    e += b[j]*i[j]\\n    \\n  if e + a[2] > 0:\\n    ans += 1\\n  e = 0\\nprint(ans)\\n  \\n\\n\", \"N, M, C = list(map(int, input().split()))\\n\\nB = list(map(int, input().split()))\\n\\nans = 0\\nfor n in range(N):\\n    A = list(map(int, input().split()))\\n    c = 0\\n    for m in range(M):\\n        c += A[m]*B[m]\\n    c += C\\n    if c > 0:\\n        ans += 1\\nprint(ans)\\n\", \"n, m, c = map(int,input().split())\\nb = list(map(int,input().split()))\\nans = 0\\n\\nfor i in range(n):\\n  a = list(map(int,input().split()))\\n  count = 0\\n  for j in range(m):\\n    count += b[j]*a[j]\\n  if count+c > 0:\\n      ans += 1\\nprint(ans)\", \"import numpy as np\\n\\nn, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\nb = np.array(b)\\ntot = 0\\n\\nfor _ in range(n):\\n    a = list(map(int, input().split()))\\n    a = np.array(a)\\n    if np.dot(a, b) + c > 0:\\n        tot += 1\\n\\nprint(tot)\", \"n, m, c = map(int, input().split())\\n\\nb = [int(x) for x in input().split()]\\nans = 0\\nfor i in range(n):\\n    a = [int(x) for x in input().split()]\\n    cnt = c\\n    for aa, bb in zip(a, b):\\n        cnt += aa * bb\\n    if cnt > 0: ans += 1\\nprint(ans)\", \"N,M,C=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\n\\nans=0\\n\\nfor i in range(N):\\n    A=list(map(int,input().split()))\\n    S=0\\n    for j in range(M):\\n        S+=A[j]*B[j]\\n    if S>-C:\\n        ans+=1\\n            \\n        \\nprint(ans)\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\nans = 0\\nfor i in range(N):\\n    tmp = 0\\n    A = list(map(int, input().split()))\\n    for j in range(M):\\n        tmp += A[j]*B[j]\\n    if tmp+C > 0:\\n        ans += 1\\n\\nprint(ans)\", \"n,m,c = map(int,input().split())\\n\\nb = [int(x) for x in input().split()]\\ncnt = 0\\nfor i in range(n):\\n    a = [int(x) for x in input().split()]\\n    ans = c\\n    for j in range(m):\\n        ans += (a[j]*b[j])\\n    if(ans > 0):\\n        cnt += 1\\n\\nprint(cnt)\", \"from typing import List\\n\\n\\ndef judge(c: int, m: int, b: List[int], a: List[int]) -> bool:\\n    result = c\\n    for i in range(m):\\n        result += a[i] * b[i]\\n\\n    return 0 < result\\n\\n\\ndef answer(n: int, m: int, c: int, b: List[int], a: List[List[int]]) -> int:\\n    count = 0\\n    for i in range(n):\\n        if judge(c, m, b, a[i]):\\n            count += 1\\n\\n    return count\\n\\n\\ndef main():\\n    n, m, c = list(map(int, input().split()))\\n    b = list(map(int, input().split()))\\n    a = [list(map(int, input().split())) for _ in range(n)]\\n\\n    print((answer(n, m, c, b, a)))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"N, M, C = map(int, input().split())\\n\\nB = list(map(int, input().split()))\\n\\ncnt = 0\\nfor n in range(N):\\n    A = list(map(int, input().split()))\\n\\n    total = C\\n    for i, j in zip(B, A):\\n        total += i * j\\n\\n    if total > 0:\\n        cnt += 1\\n\\nprint(cnt)\", \"import sys\\nimport numpy as np\\ninput = sys.stdin.readline\\nN,M,C = list(map(int,input().split()))\\nB = np.array(list(map(int,input().split())))\\ndef main():\\n  count = 0\\n  for i in range(N):\\n    A = np.array(list(map(int,input().split())))\\n    if sum(A*B) + C > 0:\\n      count += 1\\n  return count\\n\\ndef __starting_point():\\n  print((main()))\\n\\n__starting_point()\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\nans = 0\\nfor i in range(N):\\n  A = list(map(int, input().split()))\\n  tmp = 0\\n  for j in range(M):\\n    tmp += A[j] * B[j]\\n  if tmp > -C:\\n    ans += 1\\nprint(ans)\", \"from operator import mul\\nans = 0\\n\\nN, M, C = map(int, input().split())\\nX = [list(map(int, input().split())) for i in range(N + 1)]\\n\\nfor i in range(N):  \\n  num = list(map(mul, X[0],X[i+1]))\\n  add = sum(num) + C\\n  if add > 0:\\n    ans += 1\\n\\nprint(ans)\", \"n,m,c=map(int, input().split())\\nb=list(map(int, input().split()))\\ncnt=0\\nfor i in range(n):\\n  pro=c\\n  a=list(map(int, input().split()))\\n  for j in range(m):\\n    pro+=a[j]*b[j]\\n  if pro>0:\\n      cnt+=1\\nprint(cnt)\", \"n, m, c = list(map(int, input().split()))\\nb = list(map(int,input().split()))\\n\\ncnt = 0\\nfor i in range(n):\\n    a = list(map(int, input().split()))\\n    cntt=0\\n    for j in range(m):\\n        cntt += a[j]*b[j]\\n    if cntt+c > 0:\\n        cnt += 1\\n\\nprint(cnt)  \\n\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\nA = [list(map(int, input().split())) for _ in range(N)]\\n\\nans = 0\\nfor i in range(N):\\n  s = C\\n  for j in range(M):\\n    s += A[i][j]*B[j]\\n  if s>0: ans += 1\\n    \\nprint(ans)\", \"import numpy as np\\n\\nn, m, c = map(int, input().split())\\nb = np.array(list(map(int, input().split())))\\n\\ncnt = 0\\nfor _ in range(n):\\n    a = np.array(list(map(int, input().split())))\\n    if sum(a * b) + c > 0:\\n        cnt += 1\\n\\nprint(cnt)\", \"n,m,c = map(int,input().split())\\nb = list(map(int,input().split()))\\nanswer = 0\\nmemo = 0\\nfor i in range(n):\\n  a = list(map(int,input().split()))\\n  for j in range(m):\\n    memo += a[j]*b[j]\\n  memo +=c\\n  if(memo >0):\\n    answer +=1\\n  memo = 0\\nprint(answer)\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\n\\n# N\\u500b\\u306e\\u30bd\\u30fc\\u30b9\\u30b3\\u30fc\\u30c9\\u306e\\u3046\\u3061\\u3001\\u3053\\u306e\\u554f\\u984c\\u306b\\u6b63\\u7b54\\u3059\\u308b\\u30bd\\u30fc\\u30b9\\u30b3\\u30fc\\u30c9\\u306e\\u500b\\u6570\\u3092\\u51fa\\u529b\\n\\ncount = 0\\n\\nfor N in range(N):\\n    A = list(map(int, input().split()))\\n    culc = list()\\n    culc.append(C)\\n\\n    for i in range(M):\\n        d = B[i] * A[i]\\n        culc.append(d)\\n\\n    if sum(culc) > 0:\\n        count += 1\\n\\nprint(count)\", \"n, m, c = (int(i) for i in input().split())\\nlist_b = [int(i) for i in input().split()]\\nlist_a = [[int(i) for i in input().split()] for j in range(0, n)]\\ncount = 0\\ntmp = 0\\nfor i in range(0, n):\\n    for j in range(0, m):\\n        tmp += list_b[j] * list_a[i][j]\\n    tmp += c\\n    if tmp > 0: count += 1\\n    tmp = 0\\nprint(count)\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\n\\ncode_count = 0\\nanswer = 0\\n\\nwhile N > code_count:\\n    A = list(map(int, input().split()))\\n    sum = C\\n    for i in range(M):\\n        sum += A[i] * B[i]\\n    if sum > 0:\\n        answer += 1\\n    code_count += 1\\n\\nprint(answer)\", \"n,m,c=map(int,input().split())\\nb=list(map(int, input().split()))\\na=[list(map(int,input().split())) for i in range(n)]\\ncount=0\\nfor i in range(n):\\n  sum=c\\n  for j in range(m):\\n    sum+=b[j]*a[i][j]\\n  if sum>0:\\n    count+=1\\nprint(count)\", \"import numpy as np\\nn,m,c=map(int, input().split())\\nb=np.array(list(map(int, input().split())))\\ncnt=0\\nfor i in range(n):\\n    a=np.array(list(map(int, input().split())))\\n    if np.dot(a,b)+c>0:\\n        cnt+=1\\nprint(cnt)\", \"N,M,C=map(int,input().split())\\nB=list(map(int,input().split()))\\nx=0\\nfor i in range(N):\\n    A=list(map(int,input().split()))\\n    s=C\\n    for j in range(M):\\n        s+=A[j]*B[j]\\n    if s>0:\\n        x+=1\\nprint(x)  \", \"n, m, c = map(int, input().split())\\n\\nb = list(map(int, input().split()))\\ncount = 0\\n\\nfor i in range(n):\\n  sum = 0\\n  a = list(map(int, input().split()))\\n  for j in range(len(b)):\\n    sum = sum + b[j]*a[j]\\n  sum = sum + c\\n  if sum > 0:\\n    count = count + 1 \\n\\nprint(count)\", \"N,M,C = list(map(int,input().split()))\\nB = list(map(int,input().split()))\\nans = 0\\nfor i in range(N):\\n  A = list(map(int,input().split()))\\n  tmp = 0\\n  for j in range(M):\\n    tmp += A[j]*B[j]\\n  if tmp + C > 0:\\n    ans += 1\\nprint(ans)\\n\", \"import numpy as np\\nN,M,C=map(int,input().split())\\nB=np.array(list(map(int,input().split())))\\nans = 0\\nfor _ in range(N):\\n    A = np.array(list(map(int,input().split())))\\n    if np.sum(A*B)+C > 0:\\n        ans += 1\\nprint(ans)\", \"N, M, C = map(int, input().split())\\nbase_list = list(map(int, input().split()))\\nmulti = 0\\nans = 0\\n\\nfor i in range(N):\\n    second_list = list(map(int, input().split()))\\n    for j in range(M):\\n        multi += base_list[j] * second_list[j]\\n    if multi + C > 0:\\n        ans += 1\\n        multi = 0\\n    else:\\n        multi = 0\\n\\nprint(ans)\", \"N, M, C = list(map(int, input().split()))\\nB = list(map(int, input().split()))\\nA = [list(map(int, input().split())) for i in range(N)]\\nS = 0\\nfor i in range(N):\\n    AB = 0\\n    for j in range(len(B)):\\n        AB += B[j] * A[i][j]\\n    if AB + C > 0:\\n        S += 1\\nprint(S)\\n\", \"n,m,c = map(int, input().split())\\nbl = list(map(int, input().split()))\\n\\nres = 0\\n\\nfor i in range(n):\\n    al = list(map(int, input().split()))\\n    temp = c\\n    for j in range(m):\\n        temp += al[j]*bl[j]\\n    if temp >0:\\n        res +=1\\n        \\nprint(res)\", \"n, m, c = map(int, input().split())\\nb = [int(i) for i in input().split()]\\na = [[int(i) for i in input().split()] for j in range(n)]\\n\\nanswer = 0\\nfor i in range(n):\\n        x = 0\\n        for j in range(len(a[i])):\\n                x += a[i][j] * b[j]\\n        x += c\\n        if x > 0:\\n                answer += 1\\nprint(answer)\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\na = [list(map(int, input().split())) for i in range(n)]\\nans = []\\nval = 0\\nfor arr in a:\\n    for s in range(m):\\n        val += arr[s]*b[s]\\n        if s == m-1:\\n            ans.append(val)\\n            val = 0\\nans = list(map(lambda x: x + c, ans))\\nprint(sum(l > 0 for l in ans))\", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\n\\ncount = 0\\n\\nfor n in range(N):\\n    A = list(map(int, input().split()))\\n    culc = list()\\n    culc.append(C)\\n    \\n    for i in range(M):\\n        d = B[i] * A[i]\\n        culc.append(d)\\n        \\n    if sum(culc) > 0:\\n        count += 1\\n\\nprint(count)\", \"n, m, c = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\ncount2 = 0\\nfor _ in range(n):\\n    count = 0\\n    arr2 = list(map(int, input().split()))\\n    for k, kk in zip(arr2, arr):\\n        count += k * kk\\n    if count + c > 0:\\n        count2 += 1\\nprint(count2)\\n\", \"n,m,c = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\na = []\\nd = 0\\nfor i in range(n):\\n    a.append(list(map(int, input().split())))\\n    combined1 = [x * y for (x, y) in zip(a[i], b)]\\n    if sum(combined1) + c > 0:\\n        d += 1\\n\\nprint(d)\\n\\n\", \"# ABC121\\n# B Can you solve this?\\nN, M, C = list(map(int, input().split()))\\nB = list(map(int, input().split()))\\nA = [list(map(int, input().split())) for _ in range(N)]\\nans = 0\\nANS = []\\nct = 0\\nfor i in range(N):\\n    for j in range(M):\\n        ans += A[i][j] * B[j]\\n        if j == M-1:\\n            ANS.append(ans)\\n            ans = 0\\nfor x in ANS:\\n    if x + C > 0:\\n        ct += 1\\nprint(ct)\\n\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\na = [list(map(int, input().split())) for l in range(n)]\\nans = 0\\nfor i in range(n):\\n    sum = c\\n    for j in range(m):\\n        sum += b[j]*a[i][j]\\n    if(sum > 0):\\n        ans = ans + 1\\nprint(ans)\", \"n, m, c = map(int,input().split())\\nb = list(map(int,input().split()))\\na = [list(map(int,input().split())) for i in range(n)]\\ncount = 0\\ntmp = 0\\nfor i in range(n):\\n    for j in range(m):\\n        tmp += a[i][j] * b[j]\\n    count += 1 if tmp + c > 0 else 0\\n    tmp = 0\\nprint(count)\", \"N,M,C = map(int,input().split())\\nBM = list(map(int,input().split()))\\nANM = [list(map(int,input().split())) for _ in range(N)]\\n\\nclass Answer:\\n    def __init__(self,N,M,C,BM,ANM):\\n        self.N = N\\n        self.M = M\\n        self.C = C\\n        self.BM = BM\\n        self.ANM = ANM\\n    \\n    def result(self):\\n        ans = 0\\n        for i in range(N):\\n            cnt = C\\n            for j in range(M):\\n                cnt += BM[j] * ANM[i][j]\\n            if cnt > 0 :\\n                ans += 1\\n        print(ans)\\n        \\n\\ninfo = Answer(N,M,C,BM,ANM)\\ninfo.result()\", \"n,m,c=list(map(int,input().split()))\\nB=list(map(int,input().split()))\\n\\ncut = 0\\nfor i in range(n):\\n\\tA = list(map(int,input().split()))\\n\\tans = 0\\n\\tfor i in range(m):\\n\\t\\tans += A[i]*B[i]\\n\\tif ans  > -c:\\n\\t\\tcut += 1\\n\\nprint(cut)\\n\", \"N, M, C = list(map(int, input().split()))\\nB = list(map(int, input().split()))\\nprint((sum(sum(i * j for i, j in zip(list(map(int, input().split())), B)) > -C for k in range(N))))\\n\", \"N,M,C=list(map(int,input().split()))\\nB=input()\\nA=[input() for i in range(N)]\\n\\ndef ans121(N:int, M:int, C:int, B:str, A:list):\\n    B=list(map(int,B.split()))\\n    judge_count=0\\n    for i in range(N):\\n        A_list=list(map(int,A[i].split()))#N\\u56de\\u691c\\u8a3c\\u3092\\u7e70\\u308a\\u8fd4\\u3059\\n        math_count=0\\n        for j in range(M):#\\u30ea\\u30b9\\u30c8\\u306e\\u4e2d\\u306e\\u8981\\u7d20M\\u306e\\u6570\\u3060\\u3051B[j]*A_list[j]\\u3092\\u7e70\\u308a\\u8fd4\\u3057\\u8db3\\u3057\\u3066\\u3044\\u304f\\n           math_count+=B[j]*A_list[j]\\n        if math_count+C>0:\\n           judge_count+=1\\n    return judge_count\\n\\nprint((ans121(N,M,C,B,A)))\\n\", \"n, m, c = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\n\\ncount = 0\\nfor i in range(n):\\n    total = c\\n    a = list(map(int, input().split()))\\n    for j in range(m):\\n        total += a[j] * b[j]\\n    if total > 0:\\n        count += 1\\nprint(count)\\n\", \"n, m, c = map(int, input().split())\\nb = list(map(int, input().split()))\\n\\nans = 0\\nfor i in range(n):\\n    a = list(map(int, input().split()))\\n    if sum([a[i] * b[i] for i in range(m)]) + c > 0:\\n        ans += 1\\nprint(ans)\", \"n,m,c=map(int,input().split())\\nb=list(map(int,input().split()))\\na=[list(map(int,input().split())) for _ in range(n)]\\n\\ncnt=0\\nsum=0\\n\\nfor i in range(m):\\n  for j in range(n):\\n    sum+=b[i]*a[j][i]\\n\\nfor j in range(n):\\n  sum=0\\n  for i in range(m):\\n    sum+=b[i]*a[j][i]\\n  if sum+c>0:\\n    cnt+=1\\n  \\nprint(cnt) \", \"N, M, C = map(int, input().split())\\nB = list(map(int, input().split()))\\nA = [list(map(int, input().split())) for i in range(N)]\\nS = 0\\nfor i in range(N):\\n    AB = 0\\n    for j in range(len(B)):\\n        AB += B[j] * A[i][j]\\n        j += 1\\n    if AB+C > 0:\\n        S += 1\\n    i += 1\\nprint(S)\", \"N, M, C = map(int,input().split())\\nlist_b = list(map(int, input().split()))\\n\\nans = 0\\n\\nfor i in range(N):\\n    temp = 0\\n    list_a = list(map(int,input().split()))\\n    \\n    for j in range(M):  # j \\u306f i \\u756a\\u76ee\\u306e\\u8981\\u7d20\\u306e\\u4e2d\\u306e j \\u756a\\u76ee\\u306e\\u8981\\u7d20\\n        temp += list_a[j] * list_b[j]\\n        \\n    if temp + C > 0:\\n        ans += 1\\n\\nprint(ans)\", \"n,m,c = map(int,input().split())\\nb = list(map(int,input().split()))\\nli = [list(map(int,input().split())) for i in range(n)]\\n\\ncnt = 0\\nsu = 0\\nfor i in range(n):\\n    for j in range(m):\\n        su += li[i][j]*b[j]\\n\\n    if su + c > 0:\\n        cnt += 1\\n    su = 0\\nprint(cnt)\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}