{"qid": 4156, "orig_input": "The busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.\n\nIf $x$ is the number of passengers in a bus just before the current bus stop and $y$ is the number of passengers in the bus just after current bus stop, the system records the number $y-x$. So the system records show how number of passengers changed.\n\nThe test run was made for single bus and $n$ bus stops. Thus, the system recorded the sequence of integers $a_1, a_2, \\dots, a_n$ (exactly one number for each bus stop), where $a_i$ is the record for the bus stop $i$. The bus stops are numbered from $1$ to $n$ in chronological order.\n\nDetermine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$ (that is, at any time in the bus there should be from $0$ to $w$ passengers inclusive).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $w$ $(1 \\le n \\le 1\\,000, 1 \\le w \\le 10^{9})$ \u2014 the number of bus stops and the capacity of the bus.\n\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ $(-10^{6} \\le a_i \\le 10^{6})$, where $a_i$ equals to the number, which has been recorded by the video system after the $i$-th bus stop.\n\n\n-----Output-----\n\nPrint the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.\n\n\n-----Examples-----\nInput\n3 5\n2 1 -3\n\nOutput\n3\n\nInput\n2 4\n-1 1\n\nOutput\n4\n\nInput\n4 10\n2 4 1 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example initially in the bus could be $0$, $1$ or $2$ passengers.\n\nIn the second example initially in the bus could be $1$, $2$, $3$ or $4$ passengers.\n\nIn the third example initially in the bus could be $0$ or $1$ passenger.", "input": "Calculate the number of valid initial passenger counts for a bus given its capacity and a sequence of passenger changes at each stop.", "test_cases": {"inputs": ["3 5\n2 1 -3\n", "2 4\n-1 1\n", "4 10\n2 4 1 2\n", "2 10\n-1 2\n", "3 4\n-3 -4 4\n", "10 1\n-1 -1 3 -4 2 3 0 -3 3 2\n", "5 21\n-3 2 -4 -1 -5\n", "5 9\n-2 -1 2 -1 -2\n", "8 7\n-5 0 -3 1 -1 5 0 -6\n", "3 4\n-2 -1 0\n", "1 1000000000\n0\n", "2 1000000000\n-1000000 -1000000\n", "2 1000000000\n1000000 -1000000\n", "2 1000000000\n-1000000 1000000\n", "2 1000000000\n1000000 1000000\n", "102 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n", "1 1234564\n1\n", "3 4\n1 2 3\n"], "outputs": ["3\n", "4\n", "2\n", "9\n", "0\n", "0\n", "11\n", "6\n", "0\n", "2\n", "1000000001\n", "998000001\n", "999000001\n", "999000001\n", "998000001\n", "0\n", "1234564\n", "0\n"]}, "solutions": "[\"stops, cap = map(int,input().split())\\n\\na = list(map(int,input().split()))\\n\\nstart_max = cap\\nstart_min = 0\\n\\ncurrent = 0\\nfor x in a:\\n    current += x\\n    start_max = min(cap-current, start_max)\\n    start_min = max(start_min,-current)\\n    if abs(current) > cap:\\n        print (0)\\n        break\\nelse:\\n    if start_max<start_min:\\n        print (0)\\n    else:\\n        print (start_max-start_min + 1)\", \"data1 = list(map(int, input().split()))\\ndata2 = list(map(int, input().split()))\\nk = 0\\no = 0\\nh = 0\\nfor i in range(data1[0]):\\n    k += data2[i]\\n    if k >= o:\\n        o = k\\n    if k < h:\\n        h = k\\nans = data1[1] - (o + abs(h)) + 1\\nif ans > 0:\\n    print(ans)\\nelse:\\n    print(0)\", \"n, w = list(map(int, input().split()))\\nv = list(map(int, input().split()))\\n\\nmini, maxi = 0, 0\\ns = 0\\nfor i in range(n):\\n    s += v[i]\\n    mini = min(mini, s)\\n    maxi = max(maxi, s)\\n\\nres = max(0, w - (maxi - mini) + 1)\\nprint(res)\\n\", \"N, W = (int(i) for i in input().split())\\nL = [int(i) for i in input().split()]\\n\\nn = 0\\nleft = 0\\nright = W\\n\\nfor i in L:\\n    n += i\\n    if n + right > W:\\n        right -= n + right - W\\n    if n + left < 0:\\n        left += -(n + left)\\n\\nprint(max(right - left + 1, 0))\\n\", \"n,m=map(int,input().split())\\na=list(map(int,input().split()))\\nmi=0\\nma=0\\nk=0\\nfor i in range(n):\\n    k+=a[i]\\n    if k>ma:\\n        ma=k\\n    if k<mi:\\n        mi=k\\nif m-ma+mi+1<0:\\n    print(0)\\nelse:\\n    print(m-ma+mi+1)\", \"n, w = map(int, input().split())\\na = list(map(int, input().split()))\\nmx, mn, bal = 0, 0, 0\\nfor aa in a:\\n\\tbal += aa\\n\\tmx, mn = max(mx, bal), min(mn, bal)\\nleft, right = - mn, w - mx\\nif right < 0 or left > right:\\n\\tprint(0)\\nelse:\\n\\tprint(right - left + 1)\", \"n, w = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\ns = 0\\nmin_s = 10000000\\nmax_s = -10000000\\n\\nfor i, e in enumerate(a):\\n\\ts += e\\n\\n\\tmin_s = min(s, min_s)\\n\\tmax_s = max(s, max_s)\\n\\nif -min_s > w:\\n\\tprint(0)\\n\\tquit()\\n\\nif max_s > w:\\n\\tprint(0)\\n\\tquit()\\n\\nif max_s >= 0 and min_s >= 0:\\n\\tmax_s = w - max_s + 1\\nelif max_s >=  0 and min_s < 0:\\n\\tmax_s = w - max_s + min_s + 1\\nelif max_s < 0:\\n\\tmax_s = w + min_s + 1\\n\\n\\n\\nif max_s < 0:\\n\\tprint(0)\\nelse:\\n\\tprint(max_s)\", \"T = input().split(' ')\\nn = int(T[0])\\nw = int(T[1])\\nS = input().split(' ')\\nfor i in range(len(S)):\\n    S[i] = int(S[i])\\nm = 0\\nM = 0\\nt = 0\\nfor i in range(len(S)):\\n    t+=S[i]\\n    M = max(M, t)\\n    m = min(m, t)\\nif -m <= w - M:\\n    print(w - M + m + 1)\\nelse:\\n    print(0)\\n\", \"stops,m = list(map(int,input().split()))\\npeople = [int(i) for i in input().split()]\\n\\ncM = 0\\ncm = 0\\nc = 0\\nfor i in range(stops):\\n    c += people[i]\\n    if c > cM:\\n        cM = c\\n    if c <cm:\\n        cm = c\\n\\nprint(m-cM+cm+1 if m-cM+cm+1>=1 else 0)\\n\", \"n, w = map(int, input().split())\\nmaxp, minp = 0, 0\\na = list(map(int, input().split()))\\nnow = 0\\nfor i in range(n):\\n    now += a[i]\\n    maxp = max(maxp, now)\\n    minp = min(minp, now)\\nprint(max(0, w - maxp + minp + 1))\", \"n, m = map(int, input().split())\\nf, s = 0, 0\\np = 0\\nfor i in list(map(int, input().split())):\\n    p += i\\n    if p < 0:\\n        f = min(f, p)\\n    if p > 0:\\n        s = max(s, p)\\nprint(0 if s > m or -f > m or m - s < -f else m - s + f + 1)\", \"n, w = list(map(int, input().split()))\\nar = list(map(int, input().split()))\\n\\ndifs = []\\ns = 0\\nfor x in range(n):\\n    s += ar[x]\\n    difs.append(s)\\n\\nminn, maxx = min(difs), max(difs)\\nmaxres, minres = w, 0\\nif maxx > 0:\\n    maxres -= maxx\\nif minn < 0:\\n    minres -= minn\\n\\nif maxres < 0 or minres > w or minres > maxres:\\n    print(0)\\nelse:\\n    print(maxres - minres + 1)\\n\", \"n, w = list(map(int, input().split()))\\ncur_delta = max_delta = min_delta = 0\\nfor ai in map(int, input().split()):\\n\\tcur_delta += ai\\n\\tmax_delta = max(max_delta, cur_delta)\\n\\tmin_delta = min(min_delta, cur_delta)\\nmin_res = 0-min_delta\\nmax_res = w-max_delta\\nif max_res < min_res:\\n\\tprint('0')\\nelse:\\n\\tprint(max_res+1-min_res)\\n\", \"n, w = map(int, input().split())\\na = [int(i) for i in input().split()]\\nres = [0] * (n + 1)\\nfor i in range(n):\\n    res[i] = a[i]\\n    res[i] += res[i - 1]\\nr = w\\nl = 0\\nfor i in range(n):\\n    r = min(r, w - res[i])\\n    l = max(l, -res[i])\\nprint(max(r - l + 1, 0))\", \"n, w = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\nmx = 0\\nmn = 0\\ncurr = 0\\nfor i in arr:\\n    curr += i\\n    mx = max(curr, mx)\\n    mn = min(curr, mn)\\nans = w + 1 - (mx - mn)\\nif ans < 0:\\n    print(0)\\nelse:\\n    print(ans)\", \"import sys\\n\\n_, max_capacity = list(map(int, next(sys.stdin).rstrip().split()))\\n\\nxs = list(map(int, next(sys.stdin).rstrip().split()))\\n\\ncurrent = 0\\nmax_x = 0\\nmin_x = 0\\n\\nfor x in xs:\\n    current += x\\n    max_x = max(max_x, current)\\n    min_x = min(min_x, current)\\n\\ncalibration = max_x - min_x\\n\\nif calibration > max_capacity:\\n    print(0)\\nelse:\\n    print(max_capacity - calibration + 1)\\n\", \"n, w = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nmax_p = 0\\nmin_p = 0\\n\\ns = 0\\nfor step in a:\\n    s += step\\n    if s > max_p:\\n        max_p = s\\n    if s < min_p:\\n        min_p = s\\n\\nd = max_p - min_p\\n\\n#print(max_p, min_p, d)\\n\\nif w - d + 1 > 0:\\n    print(w - d + 1)\\nelse:\\n    print(0)\\n\", \"(n, l) = list(map(int, input().split()))\\nmaxim = 0\\nmin = 0\\nx = 0\\na = list(map(int, input().split()))\\nfor i in range(n):\\n    x += a[i]\\n    if x > maxim:\\n        maxim = x\\n    if x < min:\\n        min = x\\nif (maxim-min) > l:\\n    print(0)\\nelse:\\n    print(l-(maxim-min)+1)\\n\\n\", \"from itertools import accumulate\\n\\ndef main():\\n\\tn, w = [int(_) for _ in input().split()]\\n\\ta = [int(_) for _ in input().split()]\\n\\n\\tc = list(accumulate(a))\\n\\n\\t# print(a)\\n\\t# print(c)\\n\\t# print(max(c), min(c))\\n\\n\\tans = min(w, w - max(c)) - max(-min(c), 0) + 1\\n\\tif ans <= 0:\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(ans)\\ndef __starting_point():\\n\\tmain()\\n\\n__starting_point()\", \"n, w = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nprefix = [0]\\nsumm = 0\\nfor i in range(n):\\n\\tsumm += a[i]\\n\\tprefix.append(summ)\\nr = max(prefix)\\nt = min(prefix)\\ncnt1 = 0\\nif t < 0:\\n\\tcnt1 += abs(t)\\ncnt2 = w - r\\nif cnt2 - cnt1 + 1 <= 0:\\n\\tprint(0)\\nelse:\\t\\n\\tprint(cnt2 - cnt1 + 1)\\t\\n\\n\", \"# Project name: CF-481-E-D3\\n\\nn,w = map(int, input().split())\\na = list(map(int, input().split()))\\nr=[0]\\nfor i in a:\\n    r+=[r[-1]+i]\\n\\nif (((w-max(r)+1)+min(r))) <0:\\n    print (0)\\nelse: print ((w-max(r)+1)+min(r))\", \"n, w = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\nmaxim = 0\\nminin = 0\\nsumma = 0\\nfor i in range(n):\\n    summa += L[i]\\n    if summa > maxim:\\n        maxim = summa\\n    if summa < minin:\\n        minin = summa\\nprint(max(0, w - maxim + minin + 1))\\n\", \"n, w = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ncur = 0\\nmn, mx = 0, w\\nfor el in a:\\n    cur += el\\n    if cur < 0:\\n        mn = max(mn, abs(cur))\\n    else:\\n        mx = min(mx, w - cur)\\nif mn > mx:\\n    print(0)\\nelse:\\n    print(mx - mn + 1)\\n\", \"from itertools import accumulate\\n\\nn, w = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\ns_a = [0] + list(accumulate(a))\\nmn, mx = min(s_a), max(s_a)\\n\\nmn_ = max(0, -mn)\\nmx_ = w - mx\\n\\nif mx_ < 0 or mx_ < mn_ or mn_ > w or mx - mn > w or mx_ - mn_ > w or mn < -w or mx > w or min(a) < -w or max(a) > w:\\n    print(0)\\n    return\\n\\nprint(mx_ - mn_ + 1)\\n\", \"n, w = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\nmx = 0\\nmn = 0\\ncur = 0\\nfor aa in a:\\n    cur += aa\\n    mx = max(cur, mx)\\n    mn = min(cur, mn)\\n\\nup = w - mx + 1\\ndown = abs(mn)\\nif down > up:\\n    print(0)\\nelse:\\n    print(up - down)\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}