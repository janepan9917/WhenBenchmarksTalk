{"qid": 4065, "orig_input": "You are given a problemset consisting of $n$ problems. The difficulty of the $i$-th problem is $a_i$. It is guaranteed that all difficulties are distinct and are given in the increasing order.\n\nYou have to assemble the contest which consists of some problems of the given problemset. In other words, the contest you have to assemble should be a subset of problems (not necessary consecutive) of the given problemset. There is only one condition that should be satisfied: for each problem but the hardest one (the problem with the maximum difficulty) there should be a problem with the difficulty greater than the difficulty of this problem but not greater than twice the difficulty of this problem. In other words, let $a_{i_1}, a_{i_2}, \\dots, a_{i_p}$ be the difficulties of the selected problems in increasing order. Then for each $j$ from $1$ to $p-1$ $a_{i_{j + 1}} \\le a_{i_j} \\cdot 2$ should hold. It means that the contest consisting of only one problem is always valid.\n\nAmong all contests satisfying the condition above you have to assemble one with the maximum number of problems. Your task is to find this number of problems.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of problems in the problemset.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 difficulties of the problems. It is guaranteed that difficulties of the problems are distinct and are given in the increasing order.\n\n\n-----Output-----\n\nPrint a single integer \u2014 maximum number of problems in the contest satisfying the condition in the problem statement.\n\n\n-----Examples-----\nInput\n10\n1 2 5 6 7 10 21 23 24 49\n\nOutput\n4\n\nInput\n5\n2 10 50 110 250\n\nOutput\n1\n\nInput\n6\n4 7 12 100 150 199\n\nOutput\n3\n\n\n\n-----Note-----\n\nDescription of the first example: there are $10$ valid contests consisting of $1$ problem, $10$ valid contests consisting of $2$ problems ($[1, 2], [5, 6], [5, 7], [5, 10], [6, 7], [6, 10], [7, 10], [21, 23], [21, 24], [23, 24]$), $5$ valid contests consisting of $3$ problems ($[5, 6, 7], [5, 6, 10], [5, 7, 10], [6, 7, 10], [21, 23, 24]$) and a single valid contest consisting of $4$ problems ($[5, 6, 7, 10]$).\n\nIn the second example all the valid contests consist of $1$ problem.\n\nIn the third example are two contests consisting of $3$ problems: $[4, 7, 12]$ and $[100, 150, 199]$.", "input": "Find the longest sequence of problems where each problem's difficulty is at most double the previous one's difficulty.", "test_cases": {"inputs": ["10\n1 2 5 6 7 10 21 23 24 49\n", "5\n2 10 50 110 250\n", "6\n4 7 12 100 150 199\n", "1\n1000000000\n", "2\n1 2\n", "4\n1 2 4 8\n", "5\n1 2 3 4 5\n", "3\n2 4 8\n", "10\n1 2 5 11 12 24 25 26 27 28\n", "9\n1 2 3 7 8 20 21 22 23\n", "3\n10 20 40\n", "8\n2 4 6 23 60 120 200 210\n", "5\n2 4 8 16 32\n", "9\n4 6 9 12 100 150 200 400 800\n", "7\n1 3 9 27 100 200 400\n", "3\n1 2 4\n", "3\n1 2 9\n", "5\n1 2 3 4 8\n", "2\n2 3\n", "2\n99999999 1000000000\n", "5\n1 2 4 8 16\n", "7\n4 7 12 100 150 300 600\n", "5\n1 2 4 5 8\n", "6\n1 2 5 10 21 42\n", "3\n1 3 6\n", "3\n1 2 5\n", "5\n1 2 5 10 20\n", "2\n1 3\n", "2\n10 20\n", "6\n1 2 5 11 22 44\n", "5\n1 2 4 9 18\n", "1\n1\n"], "outputs": ["4\n", "1\n", "3\n", "1\n", "2\n", "4\n", "5\n", "3\n", "7\n", "4\n", "3\n", "4\n", "5\n", "5\n", "3\n", "3\n", "2\n", "5\n", "2\n", "1\n", "5\n", "4\n", "5\n", "2\n", "2\n", "2\n", "3\n", "1\n", "2\n", "3\n", "3\n", "1\n"]}, "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\n\\nans = [1]\\nt = 1\\n\\nfor i in range(n - 1):\\n    if a[i + 1] / a[i] <= 2:\\n        t += 1\\n\\n    else:\\n        t = 1\\n\\n    ans.append(t)\\n\\nprint(max(ans))\\n\", \"n = int(input())\\ns = input().split()\\nfor i in range(n):\\n    s[i] = int(s[i])\\n\\nans = 1\\ncurStreak = 1\\n\\nfor i in range(1,n):\\n    if s[i]<= 2*s[i-1]:\\n        curStreak+=1\\n        ans = max(ans,curStreak)\\n    else:\\n        curStreak = 1\\n\\nprint(ans)\", \"'''input\\n6\\n4 7 12 100 150 199\\n'''\\nn = int(input())\\na = list(map(int, input().split()))\\ns = ''.join(['1' if 2*a[i] >= a[i+1] else '0' for i in range(n-1)])\\nprint(len(max(s.split('0'))) + 1) \\n\\n\\n\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nif n == 1:\\n\\tprint(1)\\nelse:\\n\\tans = 1\\n\\tnum = 1\\n\\n\\tfor i in range(1, n):\\n\\t\\tif a[i] <= 2 * a[i - 1]:\\n\\t\\t\\tnum += 1\\n\\t\\t\\tans = max(ans, num)\\n\\t\\telse:\\n\\t\\t\\tnum = 1\\n\\n\\tans = max(ans, num)\\n\\tprint(ans)\", \"n = int(input())\\ntasks = [int(i) for i in input().split()]\\nmax_seq = [1] * n\\nfor i in range(n-1):\\n    if tasks[i+1] <= tasks[i] * 2:\\n        max_seq[i+1] += max_seq[i]\\nprint(max(max_seq))\\n\\n\", \"n = int(input())\\nline = list(map(int, input().split()))\\nans = 1\\nprev_i = 0\\nfor i in range(1, n):\\n    if line[i - 1] * 2 >= line[i]:\\n        continue\\n    ans = max(i - prev_i, ans)\\n    prev_i = i\\nans = max(n - prev_i, ans)\\nprint(ans)\", \"n = int(input())\\nlst = list(map(int, input().split()))\\nans = 1\\ncnt = 1\\nfor i in range(1, n):\\n    if lst[i] <= lst[i - 1] * 2:\\n        cnt += 1\\n        if cnt > ans:\\n            ans = cnt\\n    else:\\n        cnt = 1\\nprint(ans)\\n\", \"import bisect\\nn=int(input())\\narr=list(map(int,input().strip().split(' ')))\\nmx=0\\ni=n-2\\ncnt=1\\nwhile(i>=0):\\n    if(2*arr[i]>=arr[i+1]):\\n        cnt+=1\\n    else:\\n        mx=max(cnt,mx)\\n        cnt=1\\n    i-=1\\nprint(max(cnt,mx))\\n\", \"def __starting_point():\\n    n = int(input().strip())\\n    arr = [int(__) for __ in input().strip().split()]\\n    if n == 1:\\n        print(1)\\n    else:\\n        cur, ma = 1, 1\\n        for i in range(1, n):\\n            if arr[i] <= 2 * arr[i - 1]:\\n                cur += 1\\n                ma = max(cur, ma)\\n            else:\\n                cur = 1\\n        print(ma)\\n__starting_point()\", \"n=int(input())\\ns=input().split()\\nl=[int(s[i]) for i in range(n)]\\n\\nres=1\\ncnt=1\\nnow=l[0]\\nfor i in range(1,n):\\n    if now*2>=l[i]:\\n        now=l[i]\\n        cnt+=1\\n    else:\\n        now=l[i]\\n        res=max(res,cnt)\\n        cnt=1\\nres=max(res,cnt)\\nprint(res)\", \"import sys\\nf=sys.stdin\\nout=sys.stdout\\n\\nn=int(f.readline().rstrip('\\\\r\\\\n'))\\narr=list(map(int,f.readline().rstrip('\\\\r\\\\n').split()))\\n\\ncnt=1\\nma=1\\n\\nfor i in range(1,n):\\n\\tif arr[i]<=(2*arr[i-1]):\\n\\t\\tcnt+=1\\n\\t\\tma=max(ma,cnt)\\n\\telse:\\n\\t\\tcnt=1\\nout.write(str(ma)+\\\"\\\\n\\\")\", \"n = int(input())\\nu = list(map(int, input().split()))\\nans = 0\\np = 1\\nfor i in range(1, n):\\n    if u[i - 1] * 2 >= u[i]:\\n        p += 1\\n    else:\\n        if p > ans:\\n            ans = p\\n        p = 1\\nif p > ans:\\n    ans = p\\nprint(ans)\\n\", \"n=int(input())\\nD=list(map(int,input().split()))\\n\\ncount=1\\nANS=0\\n\\nfor i in range(1,n):\\n    if D[i]<=2*D[i-1]:\\n        count+=1\\n    else:\\n        if ANS<count:\\n            ANS=count\\n        count=1\\n\\nif ANS<count:\\n    ANS=count\\n\\n    #print(i,count,ANS)\\n\\nprint(ANS)\\n\", \"from collections import defaultdict,deque\\nimport sys,heapq,bisect,math,itertools,string,queue,datetime\\nsys.setrecursionlimit(10**8)\\nINF = float('inf')\\nmod = 10**9+7\\neps = 10**-7\\ndef inpl(): return list(map(int, input().split()))\\ndef inpl_s(): return list(input().split())\\n\\nN = int(input())\\naa = inpl()\\naa.append(INF)\\nans = 0\\ntmp = 1\\n\\nfor i in range(1,N+1):\\n\\tif aa[i] <= aa[i-1]*2:\\n\\t\\ttmp += 1\\n\\telse:\\n\\t\\tans = max(tmp,ans)\\n\\t\\ttmp = 1\\n\\nprint(ans)\\n\", \"n = int(input())\\narray = list(map(int,input().split()))\\n\\ntemp = 1;\\nmaxi = 1;\\n\\nfor i in range(n-1):\\n\\n\\tif array[i]*2 >= array[i+1]:\\n\\t\\ttemp +=1;\\n\\n\\t\\tif temp > maxi:\\n\\t\\t\\tmaxi =temp;\\n\\telse:\\n\\t\\ttemp = 1;\\n\\nif temp>maxi:\\n\\tmaxi = temp;\\n\\nprint(maxi)\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nl = 1\\nmax_l = 1\\nfor i in range(n-1):\\n    if a[i+1] > a[i]*2:\\n        l = 1\\n    else:\\n        l += 1\\n        max_l = max(max_l, l)\\nprint(max_l)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncnt = 1\\nans = 1\\nfor i in range(1, n):\\n    if a[i] > 2 * a[i - 1]:\\n        ans = max( ans, cnt )\\n        cnt = 1\\n    else:\\n        cnt += 1\\nans = max( ans, cnt )\\nprint(ans)\", \"n=int(input())\\nl=list(map(int,input().strip().split()))\\nle=1\\nlm=0\\nprev=l[0]\\nfor i in range(1,n):\\n    if (l[i]<=prev*2):\\n        le=le+1\\n        prev=l[i]\\n    else:\\n        if (le>lm):\\n            lm=le\\n        le=1\\n        prev=l[i]\\nif (le>lm):\\n    lm=le\\nprint (lm)\\n\\n\", \"\\nn = int(input())\\nnums = list(map(int, input().split()))\\n\\ni = 0\\nlongest = 1\\nwhile i < n - 1:\\n    length = 1\\n    while i+1 < n and nums[i]*2 >= nums[i+1]:\\n        i += 1\\n        length += 1\\n    longest = max(longest, length)\\n    i += 1\\n\\nprint(longest)\\n\\n\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.append(a[n - 1] * 3)\\n\\nmax_ans = 1\\nans = 1\\nfor i in range(n):\\n\\tif a[i] * 2 < a[i + 1]:\\n\\t\\tif ans > max_ans:\\n\\t\\t\\tmax_ans = ans\\n\\t\\tans = 1\\n\\telse:\\n\\t\\tans += 1\\n\\n\\nprint(max_ans)\", \"n = int(input())\\na = list(map(int, input().split()))\\nans = 1\\ncnt = 1\\nfor i in range(1, n):\\n    if a[i - 1] * 2 >= a[i]:\\n        cnt += 1\\n    else:\\n        ans = max(ans, cnt)\\n        cnt = 1\\nprint(max(ans, cnt))\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\nans = 1\\ncurr = 1\\nfor i in range(n - 1):\\n    if 2 * A[i] >= A[i + 1]:\\n        curr += 1\\n    else:\\n        ans = max(curr, ans)\\n        curr = 1\\nans = max(ans, curr)\\nprint(ans)\", \"n = int(input())\\na = list(map(int, input().split()))\\ncurr = 1\\nmaxx = 1\\nfor i in range(n - 1):\\n    if a[i] * 2 < a[i + 1]:\\n        maxx = max(maxx, curr)\\n        curr = 1\\n    else:\\n        curr += 1\\nmaxx = max(curr, maxx)\\nprint(maxx)\", \"n=int(input())\\nl=list(map(int,input().split()))\\ns=1\\nm=1\\ni=1\\nwhile i<=n-1:\\n    if l[i]>2*l[i-1]:\\n        s=1\\n    else:\\n        s+=1\\n    if s>m:\\n        m=s\\n    i+=1\\nprint(m)\", \"#JMD\\n#Nagendra Jha-4096\\n\\n \\nimport sys\\nimport math\\n\\n#import fractions\\n#import numpy\\n \\n###File Operations###\\nfileoperation=0\\nif(fileoperation):\\n    orig_stdout = sys.stdout\\n    orig_stdin = sys.stdin\\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\\n    sys.stdin = inputfile\\n    sys.stdout = outputfile\\n\\n###Defines...###\\nmod=1000000007\\n \\n###FUF's...###\\ndef nospace(l):\\n    ans=''.join(str(i) for i in l)\\n    return ans\\n \\n \\n \\n##### Main ####\\nt=1\\nfor tt in range(t):\\n    n=int(input())\\n    a=list(map(int,sys.stdin.readline().split(' ')))\\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\\n    \\n    ans=1\\n    i=0\\n    while(i<n-1):\\n        count=1\\n        while(2*a[i]>=a[i+1]):\\n            count+=1\\n            i+=1\\n            if(i==n-1):\\n                break\\n        ans=max(ans,count)\\n        i+=1\\n    print(ans)\\n    \\n    \\n#####File Operations#####\\nif(fileoperation):\\n    sys.stdout = orig_stdout\\n    sys.stdin = orig_stdin\\n    inputfile.close()\\n    outputfile.close()\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}