{"qid": 4033, "orig_input": "There is an infinite board of square tiles. Initially all tiles are white.\n\nVova has a red marker and a blue marker. Red marker can color $a$ tiles. Blue marker can color $b$ tiles. If some tile isn't white then you can't use marker of any color on it. Each marker must be drained completely, so at the end there should be exactly $a$ red tiles and exactly $b$ blue tiles across the board.\n\nVova wants to color such a set of tiles that:\n\n  they would form a rectangle, consisting of exactly $a+b$ colored tiles;  all tiles of at least one color would also form a rectangle. \n\nHere are some examples of correct colorings:\n\n [Image] \n\nHere are some examples of incorrect colorings:\n\n [Image] \n\nAmong all correct colorings Vova wants to choose the one with the minimal perimeter. What is the minimal perimeter Vova can obtain?\n\nIt is guaranteed that there exists at least one correct coloring.\n\n\n-----Input-----\n\nA single line contains two integers $a$ and $b$ ($1 \\le a, b \\le 10^{14}$) \u2014 the number of tiles red marker should color and the number of tiles blue marker should color, respectively.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimal perimeter of a colored rectangle Vova can obtain by coloring exactly $a$ tiles red and exactly $b$ tiles blue.\n\nIt is guaranteed that there exists at least one correct coloring.\n\n\n-----Examples-----\nInput\n4 4\n\nOutput\n12\n\nInput\n3 9\n\nOutput\n14\n\nInput\n9 3\n\nOutput\n14\n\nInput\n3 6\n\nOutput\n12\n\nInput\n506 2708\n\nOutput\n3218\n\n\n\n-----Note-----\n\nThe first four examples correspond to the first picture of the statement.\n\nNote that for there exist multiple correct colorings for all of the examples.\n\nIn the first example you can also make a rectangle with sides $1$ and $8$, though its perimeter will be $18$ which is greater than $8$.\n\nIn the second example you can make the same resulting rectangle with sides $3$ and $4$, but red tiles will form the rectangle with sides $1$ and $3$ and blue tiles will form the rectangle with sides $3$ and $3$.", "input": "Find the minimum perimeter of a rectangle formed by coloring tiles with two colors, where one color must form a rectangle and the total number of colored tiles is fixed.", "test_cases": {"inputs": ["4 4\n", "3 9\n", "9 3\n", "3 6\n", "506 2708\n", "11 24\n", "92 91\n", "58 53\n", "39 97\n", "47 96\n", "49 39\n", "76 100\n", "97821761637600 97821761637600\n", "65214507758400 97821761637600\n", "97821761637600 65214507758400\n", "10293281928930 11003163441270\n", "11003163441270 11003163441270\n", "1 1\n", "1 2\n", "2 2\n", "1 3\n", "2 3\n", "3 3\n", "4 1\n", "4 2\n", "4 3\n", "5 1\n", "5 2\n", "5 3\n", "5 4\n", "5 5\n", "1 6\n", "2 6\n", "4 6\n", "5 6\n", "6 6\n", "99999999999973 99999999999971\n", "11 17\n", "99999999999972 100000000000000\n", "100000000000000 100000000000000\n", "99999999999962 99999999999973\n", "99999999999973 99999999999930\n", "25 25\n", "11 49\n", "87897897895 29835496161\n", "49999819999926 50000000000155\n", "67280421310721 67280421310723\n", "100004 5\n"], "outputs": ["12\n", "14\n", "14\n", "12\n", "3218\n", "24\n", "128\n", "80\n", "50\n", "48\n", "38\n", "54\n", "55949068\n", "51074268\n", "51074268\n", "18459236\n", "18764374\n", "6\n", "8\n", "8\n", "8\n", "12\n", "10\n", "12\n", "10\n", "16\n", "10\n", "16\n", "12\n", "12\n", "14\n", "16\n", "12\n", "14\n", "24\n", "14\n", "199999999999948\n", "32\n", "502512564406\n", "56850000\n", "133333333333296\n", "399999999999808\n", "30\n", "34\n", "728999990\n", "199999640000164\n", "813183752\n", "1588\n"]}, "solutions": "[\"import math\\na,b = [int(x) for x in input().split()]\\n\\narea = a+b\\nt = int(math.sqrt(area))\\nsa = int(math.sqrt(a))\\nsb = int(math.sqrt(b))\\n\\nD = []\\nDA = []\\nDB = []\\nfor i in range(1,t+1):\\n    if area % i == 0:\\n        if i*i != area:\\n            D.append(i)\\n            D.append(area//i)\\n        else:\\n            D.append(i)\\n\\nfor i in range(1,sa+1):\\n    if a % i == 0:\\n        if i*i != a:\\n            DA.append(i)\\n            DA.append(a//i)\\n        else:\\n            DA.append(i)\\n            \\nfor i in range(1,sb+1):\\n    if b % i == 0:\\n        if i*i != b:\\n            DB.append(i)\\n            DB.append(b//i)\\n        else:\\n            DB.append(i)\\nDA.sort()\\nDB.sort()\\nD.sort()\\n\\nstart = ((len(D)+1)//2)-1\\ndiv = len(D)\\n\\ndef closestdiv(t,D):\\n    low = 0\\n    high = len(D)-1\\n    while high - low > 1:\\n        guess = (high+low)//2\\n        if D[guess] > t:\\n            high = guess\\n        else:\\n            low = guess\\n    if D[high] <= t:\\n        return high\\n    else:\\n        return low\\n    \\nwhile start > -1:\\n    t = D[start]\\n    s = D[-start-1]\\n    if DA[-closestdiv(t,DA)-1] <= s:\\n        print(2*t+2*s)\\n        break\\n    elif DB[-closestdiv(t,DB)-1] <= s:\\n        print(2*t+2*s)\\n        break\\n    start -= 1\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}