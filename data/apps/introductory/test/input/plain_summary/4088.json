{"qid": 4088, "orig_input": "Polycarp wrote on the board a string $s$ containing only lowercase Latin letters ('a'-'z'). This string is known for you and given in the input.\n\nAfter that, he erased some letters from the string $s$, and he rewrote the remaining letters in any order. As a result, he got some new string $t$. You have to find it with some additional information.\n\nSuppose that the string $t$ has length $m$ and the characters are numbered from left to right from $1$ to $m$. You are given a sequence of $m$ integers: $b_1, b_2, \\ldots, b_m$, where $b_i$ is the sum of the distances $|i-j|$ from the index $i$ to all such indices $j$ that $t_j > t_i$ (consider that 'a'<'b'<...<'z'). In other words, to calculate $b_i$, Polycarp finds all such indices $j$ that the index $j$ contains a letter that is later in the alphabet than $t_i$ and sums all the values $|i-j|$.\n\nFor example, if $t$ = \"abzb\", then:  since $t_1$='a', all other indices contain letters which are later in the alphabet, that is: $b_1=|1-2|+|1-3|+|1-4|=1+2+3=6$;  since $t_2$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_2=|2-3|=1$;  since $t_3$='z', then there are no indexes $j$ such that $t_j>t_i$, thus $b_3=0$;  since $t_4$='b', only the index $j=3$ contains the letter, which is later in the alphabet, that is: $b_4=|4-3|=1$. \n\nThus, if $t$ = \"abzb\", then $b=[6,1,0,1]$.\n\nGiven the string $s$ and the array $b$, find any possible string $t$ for which the following two requirements are fulfilled simultaneously:  $t$ is obtained from $s$ by erasing some letters (possibly zero) and then writing the rest in any order;  the array, constructed from the string $t$ according to the rules above, equals to the array $b$ specified in the input data. \n\n\n-----Input-----\n\nThe first line contains an integer $q$ ($1 \\le q \\le 100$)\u00a0\u2014 the number of test cases in the test. Then $q$ test cases follow.\n\nEach test case consists of three lines:  the first line contains string $s$, which has a length from $1$ to $50$ and consists of lowercase English letters;  the second line contains positive integer $m$ ($1 \\le m \\le |s|$), where $|s|$ is the length of the string $s$, and $m$ is the length of the array $b$;  the third line contains the integers $b_1, b_2, \\dots, b_m$ ($0 \\le b_i \\le 1225$). \n\nIt is guaranteed that in each test case an answer exists.\n\n\n-----Output-----\n\nOutput $q$ lines: the $k$-th of them should contain the answer (string $t$) to the $k$-th test case. It is guaranteed that an answer to each test case exists. If there are several answers, output any.\n\n\n-----Example-----\nInput\n4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\nOutput\naac\nb\naba\ncodeforces\n\n\n\n-----Note-----\n\nIn the first test case, such strings $t$ are suitable: \"aac', \"aab\".\n\nIn the second test case, such trings $t$ are suitable: \"a\", \"b\", \"c\".\n\nIn the third test case, only the string $t$ equals to \"aba\" is suitable, but the character 'b' can be from the second or third position.", "input": "Given a string and an array of integers, reconstruct a new string from the original by removing and rearranging letters such that the sum of distances to greater alphabetical characters matches the given array.", "test_cases": {"inputs": ["4\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n", "1\nabac\n3\n2 1 0\n", "1\ncbba\n2\n0 0\n", "1\nzbb\n2\n0 0\n", "2\naccccccc\n1\n0\naaaaac\n3\n0 0 0\n", "1\naaad\n3\n0 0 0\n", "1\naaabb\n3\n0 0 0\n", "1\nybb\n2\n0 0\n", "1\naccd\n2\n0 0\n", "1\naaaax\n4\n0 0 0 0\n", "1\naba\n2\n0 0\n", "3\nybb\n2\n0 0\nzbb\n2\n0 0\nzyybb\n2\n0 0\n", "1\naaabbc\n4\n3 2 1 0\n", "4\nybb\n2\n0 0\nzbb\n2\n0 0\nzyybb\n2\n0 0\naabb\n3\n0 0 3\n", "1\nabbc\n3\n0 2 0\n", "1\naaab\n3\n0 0 0\n", "1\naaax\n3\n0 0 0\n", "1\nycc\n2\n0 0\n", "1\naaabcc\n5\n0 0 3 5 7\n", "7\nycc\n2\n0 0\nzcc\n2\n0 0\nacc\n2\n0 0\nbcc\n2\n0 0\nabbc\n3\n0 0 3\nabbcc\n3\n0 0 3\nabac\n3\n2 1 0\n", "1\nxbbbbccc\n5\n0 1 2 3 4\n", "2\naabc\n3\n2 1 0\naaabcc\n5\n0 0 3 5 7\n", "1\naaabbc\n5\n0 0 3 5 7\n", "10\ntuwxtyvuwzxvsv\n2\n1 0\nztuyzttu\n6\n0 7 5 4 0 11\nxuxwsuyzutz\n3\n0 2 0\nzzsxwy\n4\n0 0 4 5\nzzvwuuwvxuszxvu\n1\n0\nvwyszvvty\n1\n0\nutztttuuyuztxsts\n2\n0 1\nvvxyxxswsxywuy\n2\n0 0\nuuttsus\n2\n0 0\nystwzxvxvxtzwtw\n2\n0 1\n", "10\nvzsxyuyy\n3\n1 0 3\nwwvutuxsuxywut\n2\n0 0\nsuzvsvutvvstuz\n3\n3 1 0\nstyuwsutv\n4\n6 3 0 1\nzsustytvzsyw\n6\n0 9 5 7 7 5\nsvwxwwwyxuvszx\n1\n0\nxuyyvuztxwuuvsxwz\n5\n5 7 0 0 7\nuxuztuwsxz\n5\n4 2 2 0 10\nxystzstwtzwsz\n2\n1 0\nuuzss\n1\n0\n", "1\naabc\n3\n2 1 0\n", "1\ncbba\n3\n0 0 3\n", "1\nnoobbbs\n4\n3 2 1 0\n"], "outputs": ["aac\nc\naba\ncodeforces\n", "aac\n", "bb\n", "bb\n", "c\naaa\n", "aaa\n", "aaa\n", "bb\n", "cc\n", "aaaa\n", "aa\n", "bb\nbb\nyy\n", "aaac\n", "bb\nbb\nyy\nbba\n", "bab\n", "aaa\n", "aaa\n", "cc\n", "ccaaa\n", "cc\ncc\ncc\ncc\nbba\nccb\naac\n", "xbbbb\n", "aac\nccaaa\n", "bbaaa\n", "yz\nztuyzt\nzyz\nzzxy\nz\nz\nzy\nyy\nuu\nzy\n", "yzx\nxx\nuvz\nuvyw\nztwtvy\nz\nywzzx\nuxuzt\nyz\nz\n", "aac\n", "bba\n", "bbbs\n"]}, "solutions": "[\"import sys\\ninput = sys.stdin.readline\\n\\nt=int(input())\\nfor tests in range(t):\\n    S=input().strip()\\n    m=int(input())\\n    B=list(map(int,input().split()))\\n\\n    LIST=[0]*26\\n\\n    for s in S:\\n        LIST[ord(s)-97]+=1\\n\\n    ANS=[0]*m\\n    ind=25\\n\\n    while max(B)>=0:\\n        L=[]\\n        for i in range(m):\\n            if B[i]==0:\\n                L.append(i)\\n                B[i]=-1\\n\\n        LEN=len(L)\\n\\n        while LIST[ind]<LEN:\\n            ind-=1\\n\\n        for l in L:\\n            ANS[l]=ind\\n\\n        ind-=1\\n\\n        for l in L:\\n            for i in range(m):\\n                B[i]-=abs(i-l)\\n\\n    #print(ANS)\\n    print(\\\"\\\".join([chr(a+97) for a in ANS]))\\n                \\n        \\n\\n    \\n\\n    \\n    \\n\", \"from math import *\\n\\ndef r1(t):\\n    return t(input())\\n\\ndef r2(t):\\n    return [t(i) for i in input().split()]\\n\\ndef r3(t):\\n    return [t(i) for i in input()]\\n\\nfor _ in range(r1(int)):\\n    s = r3(str)\\n    m = r1(int)\\n    b = r2(int)\\n\\n    s.sort()\\n    mp = {}\\n    for i in s:\\n        mp[i] = 0\\n    for i in s:\\n        mp[i] += 1\\n    \\n    t = ['' for i in range(m)]\\n    for i in range(m):\\n        ind = []\\n        cnt = 0\\n        for j in range(m):\\n            if b[j] == 0:\\n                ind.append(j)\\n                cnt += 1\\n        if (cnt == 0):\\n            break\\n        for x in ind:\\n            for j in range(m):\\n                b[j] -= max(abs(x - j), 1)\\n\\n        tk = ''\\n        tkeys = list(sorted(list(mp.keys()), reverse=True))\\n        for k in tkeys:\\n            if mp[k] >= len(ind):\\n                tk = k\\n            del mp[k]\\n            if len(tk) > 0:\\n                break\\n            \\n        for x in ind:\\n            t[x] = tk\\n        #print(mp, b, t)\\n\\n    print(''.join(t))\\n\", \"for _ in range(int(input())):\\n    s = input()\\n    m = int(input())\\n    b = list(map(int,input().split()))\\n    values = {}\\n    for num in b:\\n        if num not in values:\\n            values[num] = 0\\n        values[num] += 1\\n    letters = {}\\n    for c in s:\\n        if c not in letters:\\n            letters[c] = 0\\n        letters[c] += 1\\n    sortedLetters = []\\n    sortedValues = []\\n    for elem in letters:\\n        sortedLetters.append((elem, letters[elem]))\\n    sortedLetters.sort()\\n    ans = [\\\"\\\" for _ in range(m)]\\n    while True:\\n        done = True\\n        toChange = []\\n        for i in range(m):\\n            dist = 0\\n            if ans[i] != \\\"\\\":\\n                continue\\n            for j in range(m):\\n                if ans[j] != \\\"\\\":\\n                    dist += abs(i-j)\\n            if dist == b[i]:\\n                toChange.append(i)\\n        if len(toChange) == 0:\\n            break\\n        cnt = len(toChange)\\n        while sortedLetters[-1][1] < cnt:\\n            sortedLetters.pop(-1)\\n        for i in toChange:\\n            ans[i] = sortedLetters[-1][0]\\n        sortedLetters.pop(-1)\\n    print(\\\"\\\".join(ans))\\n\", \"t=int(input())\\nfor _ in range(t):\\n    s=input()\\n    m=int(input())\\n    b=list(map(int,input().split()))\\n    slist=[]\\n    for i in range(len(s)):\\n        slist.append(s[i])\\n    slist.sort()\\n    slist.reverse()\\n    slist2=[]\\n    slist2.append([slist[0],1])\\n    for i in range(1,len(s)):\\n        if slist2[-1][0]==slist[i]:\\n            slist2[-1][1]+=1\\n        else:\\n            slist2.append([slist[i],1])\\n    pointer=0\\n    done=[0]*m\\n    ans=[0]*m\\n    while sum(done)<m:\\n        zeros=[]\\n        for i in range(m):\\n            if b[i]==0 and done[i]==0:\\n                zeros.append(i)\\n        num=len(zeros)\\n        while slist2[pointer][1]<num:\\n            pointer+=1\\n        for i in zeros:\\n            done[i]=1\\n            ans[i]=slist2[pointer][0]\\n            for j in range(m):\\n                b[j]-=abs(i-j)\\n        pointer+=1\\n    print(''.join(ans))\", \"T = int(input())\\nfor _ in range(T):\\n    s = input()\\n    m = int(input())\\n    b = [int(s) for s in input().split()]\\n    count = [0] * 26\\n    for c in s:\\n        count[ord(c) - 97] += 1\\n    res = [''] * m\\n    p = 0\\n    while p < m:\\n        zeros = []\\n        for i in range(m):\\n            if b[i] == 0:\\n                zeros.append(i)\\n        for i in range(25,-1,-1):\\n            if count[i] >= len(zeros):\\n                c = chr(i + 97)\\n                count[i] = 0\\n                break\\n            else:\\n                count[i] = 0\\n        for zero in zeros:\\n            res[zero] = c\\n            b[zero] = -1\\n            for i in range(m):\\n                b[i] -= abs(i - zero)\\n        p += len(zeros)\\n    print(''.join(res))\", \"from collections import Counter\\n\\nT = int(input())\\n\\nfor t in range(T):\\n    S = input()\\n    M = int(input())\\n    B = [int(_) for _ in input().split()]\\n\\n    Y = ['' for _ in range(M)]\\n    expected_scores = [0] * M\\n    cc = Counter(S)\\n    for _c in range(ord('z'), ord('a')-1, -1):\\n        c = chr(_c)\\n        if not cc[c]:\\n            continue\\n        # print('before', c, Y, expected_scores)\\n        poss = []\\n        next_expected_scores = list(expected_scores)\\n        for pos in range(M):\\n            if Y[pos] != '':\\n                continue\\n            if B[pos] == expected_scores[pos]:\\n                poss.append(pos)\\n                for p in range(M):\\n                    next_expected_scores[p] += abs(p-pos)\\n\\n        if len(poss) <= cc[c]:\\n            expected_scores = next_expected_scores\\n            for p in poss:\\n                Y[p] = c\\n        # print('after', c, Y, expected_scores)\\n\\n    print(''.join(Y))\\n\", \"tests = int(input())\\nfor _ in range(tests):\\n    s = input()\\n    n = int(input())\\n    b = list(map(int, input().split()))\\n    g = sorted(b)\\n    ans = ['a'] * n\\n    d = dict()\\n    for i in set(s):\\n        d[i] = 0\\n    for i in s:\\n        d[i] += 1\\n    tec = 122\\n    r = b.count(0)\\n    while r != 0:\\n        flag = True\\n        while flag:\\n            if chr(tec) in d:\\n                if d[chr(tec)] >= r:\\n                    flag = False\\n                    break\\n            tec -= 1\\n        sp = []\\n        for i in range(n):\\n            if b[i] == 0:\\n                sp.append(i)\\n                b[i] = -1\\n        for i in range(n):\\n            summ = 0\\n            if b[i] < 0:\\n                continue\\n            for j in sp:\\n                summ += abs(i - j)\\n            b[i] -= summ\\n        for i in sp:\\n            ans[i] = chr(tec)\\n        tec -= 1\\n        r = b.count(0)\\n    for i in ans:\\n        print(i, end ='')\\n    print()\\n\", \"m=10**9+7\\nt = int(input())\\nwhile(t):\\n    t-=1\\n    s=input()\\n    m = int(input())\\n    b = list(map(int,input().split()))\\n    fin = sorted(s)\\n    ans=[\\\"\\\"]*m\\n    while \\\"\\\" in ans:\\n        new=[index for index, value in enumerate(b) if value == 0]\\n        while fin.count(fin[-1])<len(new):\\n            fin = list(filter(lambda x: x != fin[-1], fin))\\n        for i in new:\\n            b[i]=-1\\n            ans[i]=fin[-1]\\n        fin = list(filter(lambda x: x != fin[-1], fin))\\n        for i in range(len(b)):\\n            if b[i]!=-1:\\n                for j in new:\\n                    b[i] -= abs(i-j)\\n    print(\\\"\\\".join(ans))\", \"from collections import Counter\\nq = int(input())\\nfor _ in range(q):\\n    s = input()\\n    m = int(input())\\n    b = list(map(int, input().split()))\\n    c = Counter(s)\\n    c = list(c.items())\\n    c.sort(key=lambda x: x[0])\\n\\n    ans = [None for _ in range(m)]\\n    while not all(ans):\\n        indices = []\\n        for i in range(m):\\n            if b[i] == 0:\\n                indices.append(i)\\n                b[i] = -1\\n        while True:\\n            if c[-1][1] >= len(indices):\\n                for idx in indices:\\n                    ans[idx] = c[-1][0]\\n                c.pop()\\n                break\\n            else:\\n                c.pop()\\n            \\n        for j in range(m):\\n            for idx in indices:\\n                b[j] -= abs(idx-j)\\n    print(''.join(map(str, ans)))\\n        \\n\", \"import sys\\n\\ninp = [x for x in sys.stdin.read().split()]; ii = 0\\n\\nttt = int(inp[ii]); ii += 1\\nfor _ in range(ttt):\\n\\ts, m = inp[ii], int(inp[ii + 1]); ii += 2\\n\\tb = [int(x) for x in inp[ii: ii + m]]; ii += m\\n\\tcnt = [0] * 26\\n\\tfor c in s:\\n\\t\\tcnt[ord(c) - ord('a')] += 1\\n\\tres = [-1] * m\\n\\tfor c in range(25, -1, -1):\\n\\t\\tcur_ind = []\\n\\t\\tfor i in range(m):\\n\\t\\t\\tif res[i] == -1:\\n\\t\\t\\t\\tcur_sum = 0\\n\\t\\t\\t\\tfor j in range(m):\\n\\t\\t\\t\\t\\tif res[j] != -1:\\n\\t\\t\\t\\t\\t\\tcur_sum += abs(i - j)\\n\\t\\t\\t\\tif cur_sum == b[i]:\\n\\t\\t\\t\\t\\tcur_ind.append(i)\\n\\t\\tif len(cur_ind) <= cnt[c]:\\n\\t\\t\\tfor i in cur_ind:\\n\\t\\t\\t\\tres[i] = c\\n\\tprint(\\\"\\\".join(chr(c + ord('a')) for c in res))\", \"from sys import stdin, stdout, setrecursionlimit\\nfor _ in range(int(input())):\\n    s = input()\\n    n = int(input())\\n    a = [int(i) for i in input().split()]\\n    l = {}\\n    for x in s:\\n        if x not in l:\\n            l[x] = 1\\n        else:\\n            l[x] += 1\\n    s = set(s)\\n    t = \\\"\\\"\\n    for x in s:\\n        t += x\\n    t = sorted(t, reverse=True)\\n    ans = [0] * n\\n    j = 1\\n    h = {}\\n    while 0 in ans:\\n        cur = []\\n        for i in range(n):\\n            if a[i] == 0 and ans[i] == 0:\\n                ans[i] = j\\n                cur.append(i)\\n        for i in range(n):\\n            if ans[i] > 0:\\n                continue\\n            for x in cur:\\n                a[i] -= abs(i - x)\\n        h[j] = len(cur)\\n        j += 1\\n\\n    itog = [0] * n\\n    curi = 0\\n    for key in h:\\n        while l[t[curi]] < h[key]:\\n            curi += 1\\n        for i in range(n):\\n            if ans[i] == key:\\n                itog[i] = t[curi]\\n        curi += 1\\n    for x in itog:\\n        print(x, end =\\\"\\\")\\n    print()\", \"def alldone(l):\\n    for i in l:\\n        if(i==0):\\n            return 0\\n    return 1\\nt=int(input())\\nfor you in range(t):\\n    s=input()\\n    freq=[0 for i in range(26)]\\n    done=[0 for i in range(26)]\\n    for i in s:\\n        freq[ord(i)-97]+=1\\n    n=int(input())\\n    l=input().split()\\n    li=[int(i) for i in l]\\n    fist=[0 for i in range(n)]\\n    lfi=[]\\n    l=[]\\n\\n    donefors=[0 for i in range(n)]\\n    for i in range(n):\\n        if(li[i]==0):\\n            l.append(i)\\n            donefors[i]=1\\n            lfi.append(i)\\n    for i in range(25,-1,-1):\\n        if(freq[i]>=len(l) and done[i]==0):\\n            done[i]=1\\n            for j in l:\\n                fist[j]=chr(97+i)\\n            l=[]\\n            break\\n        else:\\n            done[i]=1\\n    while(alldone(donefors)==0):\\n        for i in range(n):\\n            if(donefors[i]==1):\\n                continue\\n            else:\\n                z=li[i]\\n                for j in lfi:\\n                    li[i]=li[i]-abs(i-j)\\n                if(li[i]==0):\\n                    continue\\n                li[i]=z\\n        for i in range(n):\\n            if(li[i]==0 and donefors[i]==0):\\n                l.append(i)\\n                donefors[i]=1\\n        for i in l:\\n            lfi.append(i)\\n\\n\\n        for i in range(25,-1,-1):\\n            if(freq[i]>=len(l) and done[i]==0):\\n                done[i]=1\\n                for j in l:\\n                    fist[j]=chr(97+i)\\n                l=[]\\n                break\\n            else:\\n                done[i]=1\\n    for i in fist:\\n        print(i,end=\\\"\\\")\\n    print()\", \"import sys\\nimport collections\\n\\ninput = sys.stdin.readline\\n\\n\\ndef main():\\n    t = int(input())\\n    for _ in range(t):\\n        S = input().strip()\\n        M = int(input())\\n        B = [int(x) for x in input().split()]\\n\\n        c = collections.Counter(S)\\n        ans = [\\\"\\\"] * M\\n        ans_rank = [-1] * M\\n        current = 0\\n\\n        while sum(B) != -M:\\n            zero = []\\n            for i in range(M):\\n                if B[i] == 0:\\n                    zero.append(i + 1)\\n                    B[i] = -1\\n                    ans_rank[i] = current\\n\\n            current += 1\\n            for i in range(M):\\n                if B[i] == -1:\\n                    continue\\n                for z in zero:\\n                    B[i] -= abs(i + 1 - z)\\n\\n\\n        for i in range(M):\\n            if ans_rank[i] == -1:\\n                ans_rank[i] = current\\n\\n        c_rank = collections.Counter(ans_rank)\\n\\n        ma = max(ans_rank)\\n        c_s = 26\\n        for i in range(ma + 1):\\n            ccr = c_rank[i]\\n            while c[chr(ord('a') + c_s)] < ccr:\\n                c_s -= 1\\n\\n            for j in range(M):\\n                if ans_rank[j] == i:\\n                    ans[j] = chr(ord('a') + c_s)\\n            c_s -= 1\\n\\n        print(\\\"\\\".join(ans))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    q = int(input())\\n    for _ in range(q):\\n        s = input()\\n        m = int(input())\\n        t = [\\\"0\\\" for __ in range(m)]\\n        b = list(map(int, input().split()))\\n        l = sorted(s)\\n        d = {}\\n        for x in s:\\n            if x in d:\\n                d[x] += 1\\n            else:\\n                d[x] = 1\\n        while True:\\n            idxs = []; num0s = 0\\n            for c, el in enumerate(b):\\n                if el == 0:\\n                    num0s += 1\\n                    #t[c] = l.pop()\\n                    idxs.append(c)\\n                    b[c] = -1\\n            if not num0s:\\n                break\\n            while True:\\n                chosen = l[-1]\\n                freq = d[chosen]\\n                if freq < num0s:\\n                    l = l[:-freq]\\n                else:\\n                    for ix in idxs:\\n                        t[ix] = chosen\\n                    l = l[:-freq]\\n                    break\\n            for i in range(len(b)):\\n                for idx in idxs:\\n                    b[i] -= abs(i - idx)\\n            #print(b)\\n        print(\\\"\\\".join(t))\\nmain()\", \"import sys\\nfrom collections import Counter as CO\\nfrom collections import defaultdict as dd\\ninput=sys.stdin.readline\\nt=int(input())\\nfor _ in range(t):\\n    word=list(map(str,input().strip()))\\n    df=dd(int)\\n    for k in word:\\n        df[k]+=1\\n        \\n    n=int(input())\\n    arr=list(map(int,input().split()))\\n    d=dict()\\n    l=[]\\n    maxi=[]\\n    while(sum(arr)!=0):\\n        for i in range(len(arr)):\\n            if(arr[i]==0 and i not in d):\\n                maxi+=[i]\\n                d[i]=1\\n        l+=[maxi]\\n        for i in maxi:\\n            for j in range(len(arr)):\\n                if(arr[j]!=0):\\n                    arr[j]-=abs(i-j)\\n        maxi=[]\\n    for i in  range(len(arr)):\\n        if(arr[i]==0 and i not in d):\\n            maxi+=[i]\\n    \\n    l+=[maxi]\\n    ind=0\\n    final=[0]*n\\n    for k in sorted(df,reverse=True):\\n        \\n        if(ind==len(l)):\\n            break\\n        if(len(l[ind])>df[k]):\\n            continue\\n        for i in range(len(l[ind])):\\n            final[l[ind][i]]=k\\n        ind+=1\\n    #print(final)       \\n    print(''.join(final))\\n        \\n        \\n        \\n    \\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}