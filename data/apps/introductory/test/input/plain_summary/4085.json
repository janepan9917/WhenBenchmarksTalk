{"qid": 4085, "orig_input": "We guessed some integer number $x$. You are given a list of almost all its divisors. Almost all means that there are all divisors except $1$ and $x$ in the list.\n\nYour task is to find the minimum possible integer $x$ that can be the guessed number, or say that the input data is contradictory and it is impossible to find such number.\n\nYou have to answer $t$ independent queries.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 25$) \u2014 the number of queries. Then $t$ queries follow.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 300$) \u2014 the number of divisors in the list.\n\nThe second line of the query contains $n$ integers $d_1, d_2, \\dots, d_n$ ($2 \\le d_i \\le 10^6$), where $d_i$ is the $i$-th divisor of the guessed number. It is guaranteed that all values $d_i$ are distinct.\n\n\n-----Output-----\n\nFor each query print the answer to it.\n\nIf the input data in the query is contradictory and it is impossible to find such number $x$ that the given list of divisors is the list of almost all its divisors, print -1. Otherwise print the minimum possible $x$.\n\n\n-----Example-----\nInput\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\nOutput\n48\n4", "input": "Find the smallest integer with a given set of divisors, excluding 1 and itself, or determine if such a number is impossible.", "test_cases": {"inputs": ["2\n8\n8 2 12 6 4 24 16 3\n1\n2\n", "25\n2\n999389 999917\n2\n999307 999613\n2\n999529 999611\n2\n999221 999853\n2\n999683 999433\n2\n999907 999749\n2\n999653 999499\n2\n999769 999931\n2\n999809 999287\n2\n999233 999239\n2\n999553 999599\n2\n999371 999763\n2\n999491 999623\n2\n999961 999773\n2\n999671 999269\n2\n999883 999437\n2\n999953 999331\n2\n999377 999667\n2\n999979 999431\n2\n999451 999359\n2\n999631 999563\n2\n999983 999521\n2\n999863 999727\n2\n999541 999721\n2\n999329 999959\n", "2\n13\n802 5 401 4010 62 2 12431 62155 310 10 31 2005 24862\n61\n15295 256795 6061 42427 805 115 30305 63365 19285 667 19 5 4669 77 1463 253 139403 1771 209 1045 168245 975821 3857 7337 2233 1015 8855 1595 665 161 212135 33649 7 55 24035 7315 35 51359 4807 1265 12673 145 551 385 319 95 36685 23 443555 3335 2185 133 23345 3059 437 203 11 11165 88711 2755 29\n", "25\n1\n2\n1\n3\n1\n2\n1\n4\n2\n4 2\n1\n5\n1\n2\n1\n3\n2\n2 3\n1\n6\n2\n6 2\n2\n3 6\n3\n6 2 3\n1\n7\n1\n2\n1\n4\n2\n2 4\n1\n8\n2\n8 2\n2\n4 8\n3\n2 4 8\n1\n3\n1\n9\n2\n3 9\n1\n2\n", "25\n1\n5\n2\n2 5\n1\n10\n2\n10 2\n2\n5 10\n3\n5 2 10\n1\n11\n1\n2\n1\n3\n2\n2 3\n1\n4\n2\n2 4\n2\n3 4\n3\n2 3 4\n1\n6\n2\n6 2\n2\n6 3\n3\n6 3 2\n2\n6 4\n3\n2 4 6\n3\n3 6 4\n4\n4 3 6 2\n1\n12\n2\n2 12\n2\n3 12\n", "25\n3\n12 3 2\n2\n4 12\n3\n12 4 2\n3\n4 12 3\n4\n3 12 2 4\n2\n6 12\n3\n12 2 6\n3\n3 6 12\n4\n3 6 12 2\n3\n12 4 6\n4\n12 2 4 6\n4\n12 3 6 4\n5\n4 2 3 12 6\n1\n13\n1\n2\n1\n7\n2\n2 7\n1\n14\n2\n14 2\n2\n14 7\n3\n2 14 7\n1\n3\n1\n5\n2\n5 3\n1\n15\n", "25\n2\n3 15\n2\n5 15\n3\n5 15 3\n1\n2\n1\n4\n2\n4 2\n1\n8\n2\n2 8\n2\n4 8\n3\n8 2 4\n1\n16\n2\n16 2\n2\n16 4\n3\n16 4 2\n2\n16 8\n3\n2 16 8\n3\n8 4 16\n4\n2 4 16 8\n1\n17\n1\n2\n1\n3\n2\n2 3\n1\n6\n2\n6 2\n2\n3 6\n", "25\n3\n2 3 6\n1\n9\n2\n2 9\n2\n3 9\n3\n3 9 2\n2\n9 6\n3\n9 2 6\n3\n3 9 6\n4\n3 2 9 6\n1\n18\n2\n18 2\n2\n18 3\n3\n18 3 2\n2\n6 18\n3\n18 2 6\n3\n18 6 3\n4\n3 6 2 18\n2\n9 18\n3\n18 2 9\n3\n9 18 3\n4\n9 3 18 2\n3\n6 18 9\n4\n2 18 6 9\n4\n9 6 18 3\n5\n2 3 18 6 9\n", "25\n1\n19\n1\n2\n1\n4\n2\n2 4\n1\n5\n2\n2 5\n2\n4 5\n3\n5 2 4\n1\n10\n2\n2 10\n2\n10 4\n3\n2 10 4\n2\n10 5\n3\n2 5 10\n3\n10 4 5\n4\n2 5 10 4\n1\n20\n2\n20 2\n2\n4 20\n3\n4 2 20\n2\n5 20\n3\n2 20 5\n3\n5 20 4\n4\n4 2 5 20\n2\n20 10\n", "25\n3\n20 2 10\n3\n10 4 20\n4\n2 20 4 10\n3\n10 5 20\n4\n5 10 2 20\n4\n4 10 20 5\n5\n2 4 20 10 5\n1\n3\n1\n7\n2\n3 7\n1\n21\n2\n3 21\n2\n7 21\n3\n3 21 7\n1\n2\n1\n11\n2\n2 11\n1\n22\n2\n22 2\n2\n22 11\n3\n22 11 2\n1\n23\n1\n2\n1\n3\n2\n2 3\n", "25\n1\n4\n2\n4 2\n2\n4 3\n3\n2 3 4\n1\n6\n2\n6 2\n2\n3 6\n3\n3 2 6\n2\n4 6\n3\n4 2 6\n3\n3 6 4\n4\n6 3 2 4\n1\n8\n2\n8 2\n2\n3 8\n3\n2 3 8\n2\n8 4\n3\n8 4 2\n3\n4 8 3\n4\n2 4 8 3\n2\n8 6\n3\n2 6 8\n3\n6 3 8\n4\n6 8 2 3\n3\n8 6 4\n", "25\n4\n6 2 4 8\n4\n3 4 6 8\n5\n8 2 4 3 6\n1\n12\n2\n2 12\n2\n12 3\n3\n12 2 3\n2\n12 4\n3\n4 12 2\n3\n12 4 3\n4\n12 3 2 4\n2\n12 6\n3\n12 6 2\n3\n12 6 3\n4\n2 6 3 12\n3\n6 12 4\n4\n12 2 6 4\n4\n12 4 6 3\n5\n12 3 4 2 6\n2\n12 8\n3\n12 8 2\n3\n3 12 8\n4\n12 3 2 8\n3\n8 12 4\n4\n4 8 12 2\n", "25\n4\n4 3 8 12\n5\n3 12 4 8 2\n3\n6 12 8\n4\n2 12 8 6\n4\n12 8 6 3\n5\n6 12 2 3 8\n4\n8 6 4 12\n5\n12 6 4 8 2\n5\n4 8 6 12 3\n6\n4 8 12 6 3 2\n1\n24\n2\n24 2\n2\n24 3\n3\n2 24 3\n2\n4 24\n3\n2 24 4\n3\n24 3 4\n4\n2 24 4 3\n2\n6 24\n3\n24 6 2\n3\n24 6 3\n4\n2 24 6 3\n3\n4 6 24\n4\n4 24 2 6\n4\n24 3 6 4\n", "25\n5\n3 24 4 2 6\n2\n8 24\n3\n8 24 2\n3\n24 8 3\n4\n2 8 24 3\n3\n4 8 24\n4\n24 2 8 4\n4\n24 8 3 4\n5\n2 24 3 8 4\n3\n24 6 8\n4\n24 6 8 2\n4\n24 8 3 6\n5\n8 2 3 6 24\n4\n4 6 24 8\n5\n6 2 24 8 4\n5\n6 4 24 8 3\n6\n4 6 2 3 8 24\n2\n12 24\n3\n24 12 2\n3\n12 24 3\n4\n3 12 2 24\n3\n12 24 4\n4\n4 2 12 24\n4\n3 4 24 12\n5\n24 12 4 3 2\n", "25\n3\n12 6 24\n4\n12 2 24 6\n4\n6 3 12 24\n5\n3 6 2 24 12\n4\n24 12 6 4\n5\n6 24 2 4 12\n5\n6 24 4 3 12\n6\n6 4 24 12 2 3\n3\n8 12 24\n4\n8 12 2 24\n4\n8 3 12 24\n5\n8 2 3 24 12\n4\n8 24 12 4\n5\n4 2 12 8 24\n5\n4 8 24 3 12\n6\n24 4 12 3 8 2\n4\n6 24 12 8\n5\n6 2 8 12 24\n5\n6 24 8 12 3\n6\n3 12 24 2 8 6\n5\n6 4 24 12 8\n6\n2 24 6 12 4 8\n6\n6 3 4 24 12 8\n7\n12 6 24 4 8 3 2\n1\n5\n", "2\n1\n25\n2\n5 25\n", "25\n1\n2\n1\n2\n1\n3\n2\n3 2\n1\n2\n1\n3\n2\n2 3\n1\n4\n2\n4 2\n2\n3 4\n3\n4 2 3\n1\n2\n1\n3\n2\n2 3\n1\n4\n2\n4 2\n2\n3 4\n3\n2 3 4\n1\n5\n2\n2 5\n2\n3 5\n3\n3 2 5\n2\n5 4\n3\n4 2 5\n3\n5 4 3\n", "25\n4\n2 5 4 3\n1\n2\n1\n3\n2\n3 2\n1\n4\n2\n2 4\n2\n3 4\n3\n3 4 2\n1\n5\n2\n5 2\n2\n3 5\n3\n2 5 3\n2\n4 5\n3\n2 5 4\n3\n3 4 5\n4\n2 3 4 5\n1\n6\n2\n2 6\n2\n6 3\n3\n3 2 6\n2\n4 6\n3\n4 6 2\n3\n6 3 4\n4\n6 3 4 2\n2\n6 5\n", "25\n3\n2 6 5\n3\n3 5 6\n4\n3 6 5 2\n3\n5 4 6\n4\n5 2 4 6\n4\n5 6 3 4\n5\n3 2 5 6 4\n1\n2\n1\n3\n2\n2 3\n1\n4\n2\n2 4\n2\n4 3\n3\n4 2 3\n1\n5\n2\n2 5\n2\n3 5\n3\n5 2 3\n2\n5 4\n3\n4 5 2\n3\n4 5 3\n4\n5 4 3 2\n1\n6\n2\n2 6\n2\n3 6\n", "25\n3\n6 2 3\n2\n4 6\n3\n4 2 6\n3\n3 4 6\n4\n6 3 4 2\n2\n6 5\n3\n5 2 6\n3\n3 5 6\n4\n2 3 5 6\n3\n4 5 6\n4\n5 6 4 2\n4\n5 6 3 4\n5\n4 5 2 3 6\n1\n7\n2\n2 7\n2\n3 7\n3\n7 2 3\n2\n7 4\n3\n7 2 4\n3\n7 4 3\n4\n2 4 7 3\n2\n5 7\n3\n5 7 2\n3\n7 5 3\n4\n2 3 7 5\n", "25\n3\n7 5 4\n4\n2 7 4 5\n4\n4 7 3 5\n5\n2 5 7 4 3\n2\n7 6\n3\n7 2 6\n3\n3 7 6\n4\n2 6 7 3\n3\n6 4 7\n4\n7 4 2 6\n4\n7 6 3 4\n5\n6 4 7 3 2\n3\n7 5 6\n4\n6 5 7 2\n4\n5 3 7 6\n5\n3 5 2 6 7\n4\n6 5 7 4\n5\n5 7 6 4 2\n5\n3 7 6 4 5\n6\n7 5 6 3 4 2\n1\n2\n1\n3\n2\n2 3\n1\n4\n2\n4 2\n", "25\n2\n4 3\n3\n2 3 4\n1\n5\n2\n5 2\n2\n3 5\n3\n3 2 5\n2\n4 5\n3\n4 2 5\n3\n3 5 4\n4\n5 3 2 4\n1\n6\n2\n6 2\n2\n3 6\n3\n2 3 6\n2\n6 4\n3\n6 4 2\n3\n4 6 3\n4\n2 4 6 3\n2\n6 5\n3\n2 5 6\n3\n5 3 6\n4\n5 6 2 3\n3\n6 5 4\n4\n5 2 4 6\n4\n3 4 5 6\n", "25\n5\n6 2 4 3 5\n1\n7\n2\n2 7\n2\n7 3\n3\n7 2 3\n2\n7 4\n3\n4 7 2\n3\n7 4 3\n4\n7 3 2 4\n2\n7 5\n3\n7 5 2\n3\n7 5 3\n4\n2 5 3 7\n3\n5 7 4\n4\n7 2 5 4\n4\n7 4 5 3\n5\n7 3 4 2 5\n2\n7 6\n3\n7 6 2\n3\n3 7 6\n4\n7 3 2 6\n3\n6 7 4\n4\n4 6 7 2\n4\n4 3 6 7\n5\n3 7 4 6 2\n", "25\n3\n5 7 6\n4\n2 7 6 5\n4\n7 6 5 3\n5\n5 7 2 3 6\n4\n6 5 4 7\n5\n7 5 4 6 2\n5\n4 6 5 7 3\n6\n4 6 7 5 3 2\n1\n8\n2\n8 2\n2\n8 3\n3\n2 8 3\n2\n4 8\n3\n2 8 4\n3\n8 3 4\n4\n2 8 4 3\n2\n5 8\n3\n8 5 2\n3\n8 5 3\n4\n2 8 5 3\n3\n4 5 8\n4\n4 8 2 5\n4\n8 3 5 4\n5\n3 8 4 2 5\n2\n6 8\n", "25\n3\n6 8 2\n3\n8 6 3\n4\n2 6 8 3\n3\n4 6 8\n4\n8 2 6 4\n4\n8 6 3 4\n5\n2 8 3 6 4\n3\n8 5 6\n4\n8 5 6 2\n4\n8 6 3 5\n5\n6 2 3 5 8\n4\n4 5 8 6\n5\n5 2 8 6 4\n5\n5 4 8 6 3\n6\n4 5 2 3 6 8\n2\n7 8\n3\n8 7 2\n3\n7 8 3\n4\n3 7 2 8\n3\n7 8 4\n4\n4 2 7 8\n4\n3 4 8 7\n5\n8 7 4 3 2\n3\n7 5 8\n4\n7 2 8 5\n", "22\n4\n5 3 7 8\n5\n3 5 2 8 7\n4\n8 7 5 4\n5\n5 8 2 4 7\n5\n5 8 4 3 7\n6\n5 4 8 7 2 3\n3\n6 7 8\n4\n6 7 2 8\n4\n6 3 7 8\n5\n6 2 3 8 7\n4\n6 8 7 4\n5\n4 2 7 6 8\n5\n4 6 8 3 7\n6\n8 4 7 3 6 2\n4\n5 8 7 6\n5\n5 2 6 7 8\n5\n5 8 6 7 3\n6\n3 7 8 2 6 5\n5\n5 4 8 7 6\n6\n2 8 5 7 4 6\n6\n5 3 4 8 7 6\n7\n7 5 8 4 6 3 2\n", "2\n5\n999983 999979 999961 999959 999952\n1\n23\n", "1\n2\n141440 554400\n"], "outputs": ["48\n4\n", "999306050713\n998920268191\n999140183219\n999074114513\n999116179739\n999656023343\n999152173847\n999700015939\n999096136183\n998472583687\n999152179247\n999134149073\n999114191893\n999734008853\n998940240499\n999320065871\n999284031443\n999044207459\n999410011949\n998810351909\n999194161253\n999504008143\n999590037401\n999262128061\n999288027511\n", "-1\n-1\n", "4\n9\n4\n-1\n8\n25\n4\n9\n6\n-1\n-1\n-1\n-1\n49\n4\n-1\n8\n-1\n-1\n-1\n16\n9\n-1\n27\n4\n", "25\n10\n-1\n-1\n-1\n-1\n121\n4\n9\n6\n-1\n8\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n12\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n169\n4\n49\n14\n-1\n-1\n-1\n-1\n9\n25\n15\n-1\n", "-1\n-1\n-1\n4\n-1\n8\n-1\n-1\n-1\n16\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n32\n289\n4\n9\n6\n-1\n-1\n-1\n", "-1\n-1\n-1\n27\n-1\n-1\n-1\n-1\n18\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "361\n4\n-1\n8\n25\n10\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n20\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n9\n49\n21\n-1\n-1\n-1\n-1\n4\n121\n22\n-1\n-1\n-1\n-1\n529\n4\n9\n6\n", "-1\n8\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n12\n-1\n-1\n-1\n-1\n-1\n16\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n24\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n25\n", "-1\n125\n", "4\n4\n9\n6\n4\n9\n6\n-1\n8\n-1\n-1\n4\n9\n6\n-1\n8\n-1\n-1\n25\n10\n15\n-1\n-1\n-1\n-1\n", "-1\n4\n9\n6\n-1\n8\n-1\n-1\n25\n10\n15\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n12\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n4\n9\n6\n-1\n8\n-1\n-1\n25\n10\n15\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n12\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n49\n14\n21\n-1\n-1\n-1\n-1\n-1\n35\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n4\n9\n6\n-1\n8\n", "-1\n-1\n25\n10\n15\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n12\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n49\n14\n21\n-1\n-1\n-1\n-1\n-1\n35\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n16\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n", "-1\n529\n", "-1\n"]}, "solutions": "[\"for q in range(int(input())):\\n    n = int(input())\\n    D = list(map(int, input().split()))\\n    D.sort()\\n    z = D[0] * D[-1]\\n    if z == -1:\\n        print(-1)\\n    else:\\n        Dz = set()\\n        for i in range(2, int(z ** 0.5) + 1):\\n            if z % i == 0:\\n                Dz.add(i)\\n                Dz.add(z // i)\\n        if Dz == set(D):\\n            print(z)\\n        else:\\n            print(-1)\", \"from functools import reduce\\nimport operator\\n\\nt = int(input())\\nfor _ in range(t):\\n    n = int(input())\\n    ds = sorted(map(int, input().split()))\\n    suspect = ds[0] * ds[-1]\\n    pfs = []\\n    g = suspect\\n    for i in range(2, int(g**0.5) + 1):\\n        if g % i == 0:\\n            pfs.append([0, i])\\n            while g % i == 0:\\n                pfs[-1][0] += 1\\n                g //= i\\n    if 1 < g: pfs.append([1, g])\\n    nf = reduce(operator.mul, [u[0] + 1 for u in pfs])\\n    ok = nf == len(ds) + 2\\n    for d in ds:\\n        if suspect % d != 0:\\n            ok = False\\n    if ok: print(suspect)\\n    else: print(-1)\\n\", \"for _ in range(int(input())):\\n    n=int(input())\\n    a=sorted(list(map(int,input().split())))\\n    ans=a[0]*a[-1]\\n    b=set(a)\\n    r=[]\\n    for i in range(2,int(ans**.5+1)):\\n        if ans%i==0:\\n            r.append(i)\\n            r.append(ans//i)\\n    if set(r)!=b:\\n        print(-1)\\n    else:\\n        print(ans)\\n\", \"t = int(input())\\nfor _ in range(t):\\n    n = int(input())\\n    d = list(map(int, input().split()))\\n    d.sort()\\n    ans = d[0]*d[-1]\\n    flag = 1\\n    for i in range((n+1)//2):\\n        if d[i]*d[-1-i] != ans:\\n            flag = 0\\n            break\\n    if flag == 1:\\n        count = 0\\n        for i in range(1, int(ans**(1/2))+1):\\n            if ans % i == 0:\\n                if i**2 == ans:\\n                    count += 1\\n                else:\\n                    count += 2\\n        if count-2 == n:\\n            print(ans)\\n        else:\\n            print(-1)\\n    else:\\n        print(-1)\\n\", \"import math\\nfor test in range(int(input())):\\n    n = int(input())\\n    a = sorted(list(map(int, input().split())))\\n    x, flag = a[0] * a[-1], 0\\n    for i in range(len(a)):\\n        if a[i] * a[-1 - i] != x:\\n            flag = 1\\n            break\\n    if flag == 1:\\n        print(-1)\\n        continue\\n    b = []\\n    for i in range(2, int(math.sqrt(x)) + 1):\\n        if x % i == 0:\\n            b.append(i)\\n            if i != x // i:\\n                b.append(x // i)\\n    b = sorted(b)\\n    if len(a) != len(b):\\n        print(-1)\\n        continue\\n    flag = 0\\n    for i in range(len(a)):\\n        if a[i] != b[i]:\\n            flag = 1\\n            break\\n    if flag:\\n        print(-1)\\n    else:\\n        print(x)\", \"def divisors(n):\\n    res = set()\\n\\n    for i in range(2, int(n**0.5) + 1):\\n        if n % i == 0:\\n            res.add(i)\\n            res.add(n//i)\\n    \\n    return res\\n\\ndef solve():\\n    for _ in range(int(input())):\\n        N = int(input())\\n        D = set([int(k) for k in input().split()])\\n        \\n        ans = max(D) * min(D)\\n        \\n        if divisors(ans) != D:\\n            print(-1)\\n            continue\\n            \\n        print (ans)\\n    \\ndef __starting_point():  \\n    solve() \\n\\n__starting_point()\", \"def main():\\n    from sys import stdin, stdout\\n\\n    def read():\\n        return stdin.readline().rstrip('\\\\n')\\n\\n    def read_array(sep=None, maxsplit=-1):\\n        return read().split(sep, maxsplit)\\n\\n    def read_int():\\n        return int(read())\\n\\n    def read_int_array(sep=None, maxsplit=-1):\\n        return [int(a) for a in read_array(sep, maxsplit)]\\n\\n    def write(*args, **kwargs):\\n        sep = kwargs.get('sep', ' ')\\n        end = kwargs.get('end', '\\\\n')\\n        stdout.write(sep.join(str(a) for a in args) + end)\\n\\n    def write_array(array, **kwargs):\\n        sep = kwargs.get('sep', ' ')\\n        end = kwargs.get('end', '\\\\n')\\n        stdout.write(sep.join(str(a) for a in array) + end)\\n\\n    def prime_sieve(n):\\n        \\\"\\\"\\\"returns a sieve of primes >= 5 and < n\\\"\\\"\\\"\\n        flag = n % 6 == 2\\n        sieve = bytearray((n // 3 + flag >> 3) + 1)\\n        for i in range(1, int(n ** 0.5) // 3 + 1):\\n            if not (sieve[i >> 3] >> (i & 7)) & 1:\\n                k = (3 * i + 1) | 1\\n                for j in range(k * k // 3, n // 3 + flag, 2 * k):\\n                    sieve[j >> 3] |= 1 << (j & 7)\\n                for j in range(k * (k - 2 * (i & 1) + 4) // 3, n // 3 + flag, 2 * k):\\n                    sieve[j >> 3] |= 1 << (j & 7)\\n        return sieve\\n\\n    def prime_list(n):\\n        \\\"\\\"\\\"returns a list of primes <= n\\\"\\\"\\\"\\n        res = []\\n        if n > 1:\\n            res.append(2)\\n        if n > 2:\\n            res.append(3)\\n        if n > 4:\\n            sieve = prime_sieve(n + 1)\\n            res.extend(\\n                3 * i + 1 | 1 for i in range(1, (n + 1) // 3 + (n % 6 == 1)) if not (sieve[i >> 3] >> (i & 7)) & 1)\\n        return res\\n\\n    primes = prime_list(10**6)\\n\\n    t = read_int()\\n    for _ in range(t):\\n        n = read_int()\\n        divisors = sorted(read_int_array())\\n        x = divisors[0] * divisors[-1]\\n        should_have = 1\\n        x2 = x\\n        for p in primes:\\n            if p > x2:\\n                break\\n            if x2 % p == 0:\\n                options = 1\\n                while x2 % p == 0:\\n                    options += 1\\n                    x2 //= p\\n                should_have *= options\\n\\n        if should_have != n + 2:\\n            write(-1)\\n            continue\\n\\n        l, r = 0, len(divisors) - 1\\n        while l <= r:\\n            if divisors[l] * divisors[r] != x:\\n                write(-1)\\n                break\\n            l += 1\\n            r -= 1\\n        else:\\n            write(x)\\n\\nmain()\\n\", \"from functools import reduce\\ndef factors(n):\\n\\tfrom functools import reduce\\n\\treturn set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))\\n\\nfor _ in range(int(input().strip())):\\n\\tn = int(input().strip())\\n\\tarr = list(map(int, input().strip().split()))\\n\\tnum = max(arr)*min(arr)\\n\\ts1 = set(arr)\\n\\ts1.add(1)\\n\\ts1.add(num)\\n\\ts2 = factors(num)\\n\\tif s1 == s2:\\n\\t\\tprint(num)\\n\\telse:\\n\\t\\tprint(-1)\\n\", \"t = int(input())\\nfor q in range(t):\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    ans = min(a)*max(a)\\n    deliver = [q for q in range(2, round(ans**(1/2))+1) if ans % q == 0]\\n    if deliver+[ans//deliver[q] for q in range(len(deliver)-1-(deliver[-1]**2 == ans), -1, -1)] == sorted(a):\\n        print(ans)\\n    else:\\n        print(-1)\\n\", \"for Valerchiclox in range(int(input())):\\n    n = int(input())\\n    c = list(map(int,input().split()))\\n    c.sort()\\n    const = c[0]*c[-1]\\n    k = -1\\n    for i in c:\\n        if i*c[k]!= const:\\n            const = -1\\n            break\\n        k-=1\\n    if const == -1:\\n        print(const)\\n    else:\\n        s = 0\\n        for i in range(2,int(const**0.5)+1):\\n            if const%i==0:\\n                s+=1\\n        if s*2-n%2==n:\\n            print(const)\\n        else:\\n            print(-1)\", \"isPrime=[1 for i in range(1000005)]\\nprimes=[]\\nfor i in range(2,1000005):\\n    if(isPrime[i]==1):\\n        primes.append(i)\\n        j=2*i\\n        while(j<1000005):\\n            isPrime[j]=0\\n            j+=i\\n\\ndef gcd(a,b):\\n    if(b==0):\\n        return a\\n    else:\\n        return gcd(b,a%b)\\n\\ndef lcm(a,b):\\n    return a*b/gcd(a,b)\\n\\nt=int(input())\\nwhile(t>0):\\n    n=int(input())\\n    d=list(map(int,input().split()))\\n    d.sort()\\n    ans=1\\n    flag=1\\n    for i in range(len(d)-1):\\n        if(d[i]*d[n-i-1]!=d[i+1]*d[n-i-2]):\\n            flag=0\\n            break\\n    if(flag==0):\\n        print(-1)\\n    else:\\n        ans=d[0]*d[-1]\\n        amt=1\\n        x=ans\\n        for i in primes:\\n            if(ans%i==0):\\n                cnt=1\\n                while(x%i==0):\\n                    cnt+=1\\n                    x/=i\\n                amt*=cnt\\n        if(x>1):\\n            amt*=2\\n        if(amt-2==len(d)):\\n            print(int(ans))\\n        else:\\n            print(-1)\\n    \\\"\\\"\\\"    \\n    for i in d:\\n        ans=lcm(ans,i)\\n        if(ans>10**30):\\n            print(-1)\\n            break\\n    if(ans>10**30):\\n        t-=1\\n        continue \\n    if(ans==d[-1]):\\n        po=1\\n        flag=1\\n        for i in d:\\n            po*=d[0]\\n            if(po!=i):\\n                flag=0\\n        if(flag==1):\\n            print(int(ans*d[0]))\\n        else:\\n            print(-1)\\n    else:\\n        amt=1\\n        x=ans\\n        for i in primes:\\n            if(ans%i==0):\\n                cnt=1\\n                while(x%i==0):\\n                    cnt+=1\\n                    x/=i\\n                amt*=cnt\\n        if(x>1):\\n            amt*=2\\n        if(amt-2==len(d)):\\n            print(int(ans))\\n        else:\\n            print(-1)\\n    \\\"\\\"\\\"\\n    t-=1\\n\", \"t=int(input())\\n\\ndef prov1(a):\\n    pp=a[0]*a[-1]\\n    for i in range(len(a)):\\n        if a[i]*a[-1-i]!=pp: return -1\\n    return pp\\n\\ndef kkk(a):\\n    i=2\\n    d=0\\n    while i*i<a:\\n       if a%i==0:\\n           d+=2\\n       i+=1\\n    if i*i==a: d+=1\\n    return d\\n\\ndef koka(a,b):\\n    ans=0\\n    while a%b==0:\\n        a=a//b\\n        ans+=1\\n    return ans\\n\\n\\n\\nfor i in range(t):\\n    n=int(input())\\n    a=sorted(list(map(int,input().split())))\\n    y=prov1(a)\\n    if y==-1:\\n        print(-1)\\n    else:\\n        yy=kkk(a[0])\\n        if yy>0: print(-1)\\n        else:\\n            u=kkk(a[-1])+2\\n            z=koka(a[-1],a[0])\\n            if z==0: d=u*2-2\\n            else:\\n                d=(u//(z+1))*(z+2)-2\\n            if d==n:\\n                print(y)\\n            else:\\n                print(-1)\\n            \\n\\n\", \"t = int(input())\\nprime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009]\\nfor i in range(t):\\n\\tn = int(input())\\n\\tl = list(map(int,input().split()))\\n\\tmini = min(l)\\n\\tmaksi = max(l)\\n\\ta = mini * maksi\\n\\tc = 0\\n\\tfor d in l:\\n\\t\\tif a % d != 0:\\n\\t\\t\\tc = 1\\n\\t\\t\\tbreak\\n\\t\\n\\tif c == 1:\\n\\t\\tprint(-1)\\n\\t\\tcontinue\\n\\t# ile divisors\\n\\tfac = []\\n\\ti = 2\\n\\tfor p in prime:\\n\\t\\tif p > max(maksi, mini):\\n\\t\\t\\tbreak\\n\\t\\tif maksi % p != 0 and mini % p != 0:\\n\\t\\t\\tcontinue\\n\\t\\tchuj = 0\\n\\t\\twhile True:\\n\\t\\t\\tif maksi % p == 0:\\n\\t\\t\\t\\tmaksi = maksi // p\\n\\t\\t\\t\\tchuj += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\n\\t\\twhile True:\\n\\t\\t\\tif mini % p == 0:\\n\\t\\t\\t\\tmini = mini // p\\n\\t\\t\\t\\tchuj += 1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tbreak\\t\\n\\t\\tif chuj > 0:\\n\\t\\t\\tfac.append([p, chuj])\\n\\tczek = 1\\n\\tdiwi = 1\\n\\tfor f in fac:\\n\\t\\tdiwi = diwi * (f[1] + 1)\\n\\tif mini == maksi:\\n\\t\\tif mini > 1:\\n\\t\\t\\tdiwi *= 3\\n\\telse:\\n\\t\\tif mini >1:\\n\\t\\t\\tdiwi *= 2\\n\\t\\tif maksi > 1:\\n\\t\\t\\tdiwi *= 2\\n\\tif diwi - 2 == n:\\n\\t\\tprint(a)\\n\\telse:\\n\\t\\tprint(-1)\\n\", \"from collections import Counter\\nR = lambda: map(int, input().split())\\n\\ndef primefactors(n):\\n    f = 2\\n    while f * f <= n:\\n        while not n % f:\\n            yield f\\n            n //= f\\n        f += 1\\n    if n > 1:\\n        yield n\\n\\nfor _ in range(int(input())):\\n    n = int(input())\\n    dd = list(R())\\n    c = Counter()\\n    for d in dd:\\n        ct = Counter(primefactors(d))\\n        for k in ct: c[k] = max(c[k], ct[k])\\n    x = 1\\n    for k, v in c.items():\\n        x *= k**v\\n    if x==max(dd):\\n        t = min(dd)\\n        x *= t\\n        c[t] += 1\\n    m = 1\\n    for v in c.values(): m *= v+1\\n    print(x if m==len(dd)+2 else -1)\", \"Q = int(input())\\n\\ndef decompose(x):\\n  ans = {}\\n  cx = x\\n  d = 2\\n  while d * d <= cx:\\n    t = 0\\n    while x % d == 0:\\n      t += 1\\n      x = x // d\\n    if t > 0:\\n      ans[d] = t\\n    d += 1\\n  if x > 1:\\n    ans[x] = 1\\n  return ans\\n\\ndef fastpow(x, p):\\n  if p == 0:\\n    return 1\\n  ans = fastpow(x, p // 2)\\n  ans *= ans\\n  if p % 2 == 1:\\n    ans *= x\\n  return ans\\n\\ndef makePrimePower(divs):\\n  primePowers = {}\\n  for d in divs:\\n    ppows = decompose(d)\\n    for key in ppows:\\n      if key not in primePowers:\\n        primePowers[key] = ppows[key]\\n      else:\\n        primePowers[key] = max(primePowers[key], ppows[key])\\n  return primePowers\\n\\ndef solve(divs):\\n  primePowers = makePrimePower(divs)\\n  x = 1\\n  for key in primePowers:\\n    x *= fastpow(key, primePowers[key])\\n  if x in divs:\\n    prim = list(primePowers.keys())[0]\\n    x *= prim\\n    primePowers[prim] += 1\\n  nrdivs = 1\\n  for key in primePowers:\\n    nrdivs *= primePowers[key] + 1\\n  if len(divs) + 2 != nrdivs:\\n    return -1\\n  return x\\n\\nfor x in range(Q):\\n  N = int(input())\\n  divs = list(map(int, input().split()))\\n  print(solve(divs))\\n\", \"import math\\nn=int(input())\\nresult=[]\\ndef divisors(n):\\n    count=0\\n    for i in range(2,int(math.sqrt(n))+1):\\n        if n%i==0:\\n            if n//i==i:\\n                count+=1\\n            else:\\n                count+=2\\n    return count\\n\\n\\nfor i in range(n):\\n    n1=int(input())\\n    n2=list((list(map(int,input().split()))))\\n    n2.sort()\\n    a1=n2[0]*n2[-1]\\n    final=True\\n    for i in range(len(n2)):\\n        if n2[i]*n2[len(n2)-1-i]!=a1:\\n            final=False\\n            break\\n    if n1==1 and n2[0]==1:\\n        result.append(1)\\n    elif final and n1==divisors(a1):\\n        result.append(a1)\\n    else:\\n        result.append(-1)\\nfor i in result:\\n    print(i)\\n\\n\", \"q = int(input())\\n\\ndef eratosthene(n):\\n    if n<2:\\n        return []\\n    n += 1\\n    tableau = [False,False] + [True]*(n-2)\\n    tableau[2::2] = [False]*((n-2)//2 + n%2) # sup. des nb pairs\\n    premiers = [2] # initialisation de la tableau des nb 1ers (2 est 1er)\\n    racine = int(n**0.5)\\n    racine = racine + [1,0][racine%2] # pour que racine soit impair\\n    for i in range(3, racine+1, 2):\\n        if tableau[i]:\\n            premiers.append(i)\\n            tableau[i::i] = [False]*((n-i)//i + int((n-i)%i>0)) \\n    for i in range(racine, n, 2):\\n        if tableau[i]:\\n            premiers.append(i)\\n    return premiers\\n\\nprimes = eratosthene(10**6+2)\\n\\ndef divisors(n):\\n\\n\\tans = 1\\n\\tfor p in primes:\\n\\t\\ttmp = 0\\n\\t\\tif n%p == 0:\\n\\t\\t\\twhile True:\\n\\t\\t\\t\\ttmp +=1\\n\\t\\t\\t\\tn//=p\\n\\t\\t\\t\\tif n%p != 0:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\tif tmp > 0:\\n\\t\\t\\tans*=(tmp+1)\\n\\t\\t\\ttmp = 0\\n\\t\\tif p > n:\\n\\t\\t\\tbreak\\n\\treturn ans - 2\\n\\nfor _ in range(q):\\n\\n\\tn = int(input())\\n\\tl = sorted(list(map(int, input().split())))\\n\\n\\tif n == 1:\\n\\t\\tif l[0] in primes:\\n\\t\\t\\tprint(l[0]**2)\\n\\t\\telse:\\n\\t\\t\\tprint(-1)\\n\\n\\telif n > 1:\\n\\t\\tcandidate = l[0] * l[-1]\\n\\t\\tfor i in range(1, n // 2):\\n\\t\\t\\tif l[i]*l[n-1-i] != candidate:\\n\\t\\t\\t\\tprint(-1)\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tif divisors(candidate) == n:\\n\\t\\t\\t\\tif n%2:\\n\\t\\t\\t\\t\\tif l[n//2]**2 == candidate:\\n\\t\\t\\t\\t\\t\\tprint(candidate)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tprint(-1)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(candidate)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(-1)\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}