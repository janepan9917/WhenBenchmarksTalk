{"qid": 4044, "orig_input": "You are given three integers $a$, $b$ and $x$. Your task is to construct a binary string $s$ of length $n = a + b$ such that there are exactly $a$ zeroes, exactly $b$ ones and exactly $x$ indices $i$ (where $1 \\le i < n$) such that $s_i \\ne s_{i + 1}$. It is guaranteed that the answer always exists.\n\nFor example, for the string \"01010\" there are four indices $i$ such that $1 \\le i < n$ and $s_i \\ne s_{i + 1}$ ($i = 1, 2, 3, 4$). For the string \"111001\" there are two such indices $i$ ($i = 3, 5$).\n\nRecall that binary string is a non-empty sequence of characters where each character is either 0 or 1.\n\n\n-----Input-----\n\nThe first line of the input contains three integers $a$, $b$ and $x$ ($1 \\le a, b \\le 100, 1 \\le x < a + b)$.\n\n\n-----Output-----\n\nPrint only one string $s$, where $s$ is any binary string satisfying conditions described above. It is guaranteed that the answer always exists.\n\n\n-----Examples-----\nInput\n2 2 1\n\nOutput\n1100\n\nInput\n3 3 3\n\nOutput\n101100\n\nInput\n5 3 6\n\nOutput\n01010100\n\n\n\n-----Note-----\n\nAll possible answers for the first example:   1100;  0011. \n\nAll possible answers for the second example:   110100;  101100;  110010;  100110;  011001;  001101;  010011;  001011.", "input": "Construct a binary string with specified counts of zeros, ones, and adjacent different bits.", "test_cases": {"inputs": ["2 2 1\n", "3 3 3\n", "5 3 6\n", "100 1 2\n", "100 1 1\n", "1 100 1\n", "1 100 2\n", "7 8 7\n", "100 100 199\n", "50 47 18\n", "2 3 3\n", "100 100 100\n", "2 2 2\n", "3 4 6\n", "1 1 1\n", "5 6 2\n", "5 4 2\n", "2 3 4\n", "3 3 2\n", "100 99 100\n", "3 2 1\n", "12 74 22\n", "6 84 12\n", "3 2 4\n", "66 11 22\n", "83 83 83\n", "9 89 18\n", "2 1 2\n", "52 12 17\n", "55 56 110\n", "67 81 40\n", "15 26 24\n", "7 99 14\n", "99 41 17\n", "91 87 11\n", "73 61 122\n", "10 40 1\n", "10 6 10\n", "78 67 117\n", "3 5 6\n", "30 34 44\n", "2 15 4\n", "4 9 6\n"], "outputs": ["1100\n", "101100\n", "01010100\n", "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n", "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110\n", "10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "101010111110000\n", "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\n", "0101010101010101011111111111111111111111111111111111111100000000000000000000000000000000000000000\n", "10110\n", "10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111\n", "1001\n", "1010101\n", "10\n", "10000011111\n", "011110000\n", "10101\n", "100011\n", "0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000\n", "00011\n", "10101010101010101010100111111111111111111111111111111111111111111111111111111111111111\n", "101010101010111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "01010\n", "01010101010101010101010000000000000000000000000000000000000000000000000000000\n", "1010101010101010101010101010101010101010101010101010101010101010101010101010101010111111111111111111111111111111111111111111000000000000000000000000000000000000000000\n", "10101010101010101011111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "010\n", "0101010101010101000000000000000000000000000000000000000000001111\n", "101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\n", "1010101010101010101010101010101010101010000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111\n", "10101010101010101010101000011111111111111\n", "1010101010101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "01010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111\n", "0101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111\n", "01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101000000000000\n", "11111111111111111111111111111111111111110000000000\n", "0101010101100000\n", "0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100000000000000000000111111111\n", "10101011\n", "1010101010101010101010101010101010101010101000000000111111111111\n", "10101111111111111\n", "1010100111111\n"]}, "solutions": "[\"\\na,b,x=list(map(int,input().split()))\\nif(a>b):\\n    s='0'\\n    a-=1\\nelse:\\n    s='1'\\n    b-=1\\nfor i in range(x-1):\\n    if(s[-1]=='1'):\\n        s+='0'\\n        a-=1\\n    else:\\n        s+='1'\\n        b-=1\\nif(s[-1]=='1'):\\n    s+='1'*(b)\\n    s+='0'*a\\nelse:\\n    s+='0'*a\\n    s+='1'*b\\nprint(s)\\n\\n\", \"(a, b, x) = list(map(int, input().split()))\\nn = a + b\\n\\nif a > b:\\n    s = '0'\\n    a -= 1\\nelse:\\n    s = '1'\\n    b -= 1\\n\\nfor i in range(1, n):\\n    if x > 1:\\n        if s[i - 1] == '0':\\n            s = s + '1'\\n            b -= 1\\n        else:\\n            s = s + '0'\\n            a -= 1\\n        x -= 1\\n    elif s[i - 1] == '0':\\n        if a > 0:\\n            s = s + '0'\\n            a -= 1\\n        else:\\n            s = s + '1'\\n            b -= 1\\n    else:\\n        if b > 0:\\n            s = s + '1'\\n            b -= 1\\n        else:\\n            s = s + '0'\\n            a -= 1\\n\\nprint(s)\\n\", \"a, b, x = list(map(int, input().split()))\\nif a > b:\\n    c = 0\\nelse:\\n    c = 1\\nfor i in range(x):\\n    print(c, end='')\\n    if i == x-1:\\n        if c == 0:\\n            print(\\\"0\\\"*(a-1), end='')\\n            a = 0\\n        else:\\n            print(\\\"1\\\"*(b-1), end='')\\n            b = 0\\n    if c == 0:\\n        a -= 1\\n    else:\\n        b -= 1\\n    c ^= 1\\nprint(\\\"1\\\"*b, end='')\\nprint(\\\"0\\\"*a, end='')\\n\", \"a, b, x = map(int, input().split())\\n\\nif a > b:\\n    print(0, end='')\\n    prev = 0\\n    a -= 1\\nelse:\\n    print(1, end='')\\n    prev = 1\\n    b -= 1\\n\\nfor i in range(x - 1):\\n    if prev == 0:\\n        print(1, end='')\\n        prev = 1\\n        b -= 1\\n    else:\\n        print(0, end='')\\n        prev = 0\\n        a -= 1\\n\\nif prev == 0:\\n    for i in range(a):\\n        print(0, end='')\\n    \\n    for i in range(b):\\n        print(1, end='')\\n\\nelse:\\n    for i in range(b):\\n        print(1, end='')\\n        \\n    for i in range(a):\\n        print(0, end='')\", \"a,b,x=list(map(int,input().split(' ')))\\nans=\\\"\\\"\\nif a>b:\\n    s=\\\"01\\\"\\n    ans+=s*(x//2)\\n    if x%2==0: \\n        ans+=\\\"1\\\"*(b-x//2)\\n        ans+=\\\"0\\\"*(a-x//2)\\n    else:\\n        ans+=\\\"0\\\"*(a-x//2)\\n        ans+=\\\"1\\\"*(b-x//2)    \\nelse:\\n    s=\\\"10\\\"\\n    ans+=s*(x//2)\\n    if x%2==0: \\n        ans+=\\\"0\\\"*(a-x//2)\\n        ans+=\\\"1\\\"*(b-x//2)\\n    else:\\n        ans+=\\\"1\\\"*(b-x//2)\\n        ans+=\\\"0\\\"*(a-x//2)\\nprint(ans)\\n\", \"a, b, x = list(map(int, input().split()))\\nmn = \\\"0\\\"\\nmncnt = a\\nmx = \\\"1\\\"\\nmxcnt = b\\nres = \\\"\\\"\\nif a > b:\\n    mn, mx = mx, mn\\n    mncnt = b\\n    mxcnt = a\\nif x % 2 == 0:\\n    res += (mx+mn)*(x//2)\\n    res += mn*(mncnt-x//2)\\n    res += mx*(mxcnt-x//2)\\nelse:\\n    res += (mx+mn)*(x//2)\\n    res += mx * (mxcnt - (x//2))\\n    res += mn * (mncnt - (x//2))\\nprint(res)\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}