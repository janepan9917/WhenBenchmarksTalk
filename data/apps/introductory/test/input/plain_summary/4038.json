{"qid": 4038, "orig_input": "Let's call some square matrix with integer values in its cells palindromic if it doesn't change after the order of rows is reversed and it doesn't change after the order of columns is reversed.\n\nFor example, the following matrices are palindromic: $\\left[ \\begin{array}{l l l}{1} & {3} & {1} \\\\{3} & {1} & {3} \\\\{1} & {3} & {1} \\end{array} \\right] \\quad \\left[ \\begin{array}{l l l l}{1} & {2} & {2} & {1} \\\\{8} & {2} & {2} & {8} \\\\{8} & {2} & {2} & {8} \\\\{1} & {2} & {2} & {1} \\end{array} \\right]$ \n\nThe following matrices are not palindromic because they change after the order of rows is reversed: $\\left[ \\begin{array}{l l l}{1} & {3} & {1} \\\\{3} & {1} & {3} \\\\{2} & {3} & {2} \\end{array} \\right] \\rightarrow \\left[ \\begin{array}{l l l}{2} & {3} & {2} \\\\{3} & {1} & {3} \\\\{1} & {3} & {1} \\end{array} \\right] \\quad \\left[ \\begin{array}{l l l l}{1} & {8} & {8} & {9} \\\\{2} & {4} & {3} & {2} \\\\{1} & {3} & {4} & {1} \\\\{9} & {8} & {8} & {1} \\end{array} \\right] \\rightarrow \\left[ \\begin{array}{l l l l}{9} & {8} & {8} & {1} \\\\{1} & {3} & {4} & {1} \\\\{2} & {4} & {3} & {2} \\\\{1} & {8} & {8} & {9} \\end{array} \\right]$ \n\nThe following matrices are not palindromic because they change after the order of columns is reversed: $\\left[ \\begin{array}{l l l}{1} & {3} & {2} \\\\{3} & {1} & {3} \\\\{1} & {3} & {2} \\end{array} \\right] \\rightarrow \\left[ \\begin{array}{l l l}{2} & {3} & {1} \\\\{3} & {1} & {3} \\\\{2} & {3} & {1} \\end{array} \\right] \\quad \\left[ \\begin{array}{l l l l}{1} & {2} & {1} & {9} \\\\{8} & {4} & {3} & {8} \\\\{8} & {3} & {4} & {8} \\\\{9} & {2} & {1} & {1} \\end{array} \\right] \\rightarrow \\left[ \\begin{array}{l l l l}{9} & {1} & {2} & {1} \\\\{8} & {3} & {4} & {8} \\\\{8} & {4} & {3} & {8} \\\\{1} & {1} & {2} & {9} \\end{array} \\right]$ \n\nYou are given $n^2$ integers. Put them into a matrix of $n$ rows and $n$ columns so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic. If there are multiple answers, print any. If there is no solution, print \"NO\".\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 20$).\n\nThe second line contains $n^2$ integers $a_1, a_2, \\dots, a_{n^2}$ ($1 \\le a_i \\le 1000$) \u2014 the numbers to put into a matrix of $n$ rows and $n$ columns.\n\n\n-----Output-----\n\nIf it is possible to put all of the $n^2$ numbers into a matrix of $n$ rows and $n$ columns so that each number is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic, then print \"YES\". Then print $n$ lines with $n$ space-separated numbers \u2014 the resulting matrix.\n\nIf it's impossible to construct any matrix, then print \"NO\".\n\nYou can print each letter in any case (upper or lower). For example, \"YeS\", \"no\" and \"yES\" are all acceptable.\n\n\n-----Examples-----\nInput\n4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n\nOutput\nYES\n1 2 2 1\n8 2 2 8\n8 2 2 8\n1 2 2 1\n\nInput\n3\n1 1 1 1 1 3 3 3 3\n\nOutput\nYES\n1 3 1\n3 1 3\n1 3 1\n\nInput\n4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\n\nOutput\nNO\n\nInput\n1\n10\n\nOutput\nYES\n10 \n\n\n\n-----Note-----\n\nNote that there exist multiple answers for the first two examples.", "input": "Construct a palindromic square matrix using given integers, or determine if it's impossible.", "test_cases": {"inputs": ["4\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\n", "3\n1 1 1 1 1 3 3 3 3\n", "4\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\n", "1\n10\n", "2\n3 3 3 3\n", "7\n5 9 5 4 1 9 8 4 5 1 4 10 7 7 8 4 2 4 4 5 4 4 10 3 4 6 8 1 9 9 5 6 8 7 1 8 6 6 7 5 3 1 1 4 7 2 3 3 8\n", "7\n1 8 9 6 4 7 4 3 5 5 4 2 1 8 10 7 7 7 8 8 1 10 1 4 6 2 2 1 6 9 6 1 6 4 8 10 4 4 7 3 4 7 10 2 2 9 4 3 3\n", "3\n1 1 2 2 3 3 4 4 5\n", "4\n1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2\n", "3\n1 1 2 2 3 3 4 4 4\n", "5\n4 4 3 5 1 1 2 3 2 2 1 3 3 2 2 5 3 4 3 3 2 2 4 1 3\n", "5\n1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 6 6 7 7 8 8 9\n", "2\n1000 1000 1000 1000\n", "3\n17 17 18 18 19 19 20 20 21\n", "3\n1 4 3 3 5 3 1 4 5\n", "3\n17 17 18 18 19 19 20 20 219\n", "3\n3 4 2 1 1 3 2 3 4\n", "3\n1 2 2 3 3 4 4 5 5\n", "3\n19 19 7 7 20 20 21 21 3\n", "3\n13 13 42 42 69 69 420 420 666\n", "3\n1 1 2 2 4 4 8 8 16\n", "5\n2 2 2 2 2 2 2 2 2 3 3 3 3 9 9 9 9 7 7 8 8 6 6 5 5\n", "3\n2 2 4 4 8 8 16 16 32\n", "7\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3\n", "3\n1 1 1 1 2 3 3 4 4\n", "9\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5\n", "7\n1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 12 13\n", "3\n1 1 6 6 2 3 3 4 4\n", "5\n3 3 4 4 5 5 5 6 6 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2\n", "11\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 11\n", "3\n1 1 1 1 1 1 1 1 2\n", "13\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11\n", "13\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 15\n", "9\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 11\n", "9\n1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 12 13 13 13 13 14 14 14 14 15 15 15 15 16 16 16 16 17 17 17 17 18 18 18 18 19 19 19 19 20 20 20 20 21\n", "7\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 7\n", "9\n1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7\n", "13\n1 1 1 1 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 6 6 6 6 7 7 7 7 8 8 8 8 9 9 9 9 10 10 10 10 11 11 11 11 12 12 12 12 13 13 13 13 14 14 14 14 15 15 15 15 16 16 16 16 17 17 17 17 18 18 18 18 19 19 19 19 20 20 20 20 21 21 21 21 22 22 22 22 23 23 23 23 24 24 24 24 25 25 25 25 26 26 26 26 27 27 27 27 28 28 28 28 29 29 29 29 30 30 30 30 31 31 31 31 32 32 32 32 33 33 33 33 34 34 34 34 35 35 35 35 36 36 36 36 37 37 37 37 38 38 38 38 39 39 39 39 40 40 40 40 41 41 41 41 42 42 42 42 43\n", "3\n1 1 1 1 2 3 3 3 3\n", "5\n1 3 6 3 1 2 4 7 4 2 5 8 9 8 5 2 4 7 4 2 1 3 6 3 1\n", "5\n1 1 1 1 2 2 7 7 3 3 3 3 3 3 4 4 4 4 4 4 4 5 5 6 6\n", "5\n1 1 1 1 2 2 2 2 3 3 3 3 100 11 11 9 9 8 8 7 7 6 6 5 5\n", "5\n2 2 2 2 5 5 6 6 7 9 9 1 1 8 8 1 1 1 1 1 1 1 1 1 1\n", "2\n1 1 1 2\n", "2\n1 1 1 3\n"], "outputs": ["YES\n1 2 2 1 \n2 8 8 2 \n2 8 8 2 \n1 2 2 1 \n", "YES\n1 3 1 \n3 1 3 \n1 3 1 \n", "NO\n", "YES\n10 \n", "YES\n3 3 \n3 3 \n", "YES\n1 3 4 2 4 3 1 \n4 5 6 5 6 5 4 \n7 8 9 10 9 8 7 \n1 4 8 7 8 4 1 \n7 8 9 10 9 8 7 \n4 5 6 5 6 5 4 \n1 3 4 2 4 3 1 \n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n1 2 4 2 1 \n3 3 5 3 3 \n2 4 2 4 2 \n3 3 5 3 3 \n1 2 4 2 1 \n", "YES\n1 2 6 2 1 \n3 4 8 4 3 \n5 7 9 7 5 \n3 4 8 4 3 \n1 2 6 2 1 \n", "YES\n1000 1000 \n1000 1000 \n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "NO\n", "YES\n2 2 6 2 2 \n3 9 8 9 3 \n5 7 2 7 5 \n3 9 8 9 3 \n2 2 6 2 2 \n", "NO\n", "YES\n1 1 1 2 1 1 1 \n1 1 2 3 2 1 1 \n2 2 2 3 2 2 2 \n2 3 3 3 3 3 2 \n2 2 2 3 2 2 2 \n1 1 2 3 2 1 1 \n1 1 1 2 1 1 1 \n", "YES\n1 4 1 \n3 2 3 \n1 4 1 \n", "YES\n1 1 1 1 4 1 1 1 1 \n1 2 2 2 4 2 2 2 1 \n2 2 3 3 4 3 3 2 2 \n3 3 3 4 4 4 3 3 3 \n4 4 4 4 5 4 4 4 4 \n3 3 3 4 4 4 3 3 3 \n2 2 3 3 4 3 3 2 2 \n1 2 2 2 4 2 2 2 1 \n1 1 1 1 4 1 1 1 1 \n", "YES\n1 2 3 10 3 2 1 \n4 5 6 11 6 5 4 \n7 8 9 12 9 8 7 \n10 11 12 13 12 11 10 \n7 8 9 12 9 8 7 \n4 5 6 11 6 5 4 \n1 2 3 10 3 2 1 \n", "NO\n", "YES\n1 1 4 1 1 \n1 2 6 2 1 \n3 5 5 5 3 \n1 2 6 2 1 \n1 1 4 1 1 \n", "YES\n1 1 1 2 2 9 2 2 1 1 1 \n2 3 3 3 4 9 4 3 3 3 2 \n4 4 5 5 5 10 5 5 5 4 4 \n6 6 6 7 7 10 7 7 6 6 6 \n7 8 8 8 9 10 9 8 8 8 7 \n9 9 10 10 10 11 10 10 10 9 9 \n7 8 8 8 9 10 9 8 8 8 7 \n6 6 6 7 7 10 7 7 6 6 6 \n4 4 5 5 5 10 5 5 5 4 4 \n2 3 3 3 4 9 4 3 3 3 2 \n1 1 1 2 2 9 2 2 1 1 1 \n", "YES\n1 1 1 \n1 2 1 \n1 1 1 \n", "YES\n1 1 1 1 2 2 10 2 2 1 1 1 1 \n2 2 3 3 3 3 10 3 3 3 3 2 2 \n4 4 4 4 5 5 10 5 5 4 4 4 4 \n5 5 6 6 6 6 10 6 6 6 6 5 5 \n7 7 7 7 8 8 11 8 8 7 7 7 7 \n8 8 9 9 9 9 11 9 9 9 9 8 8 \n10 10 10 10 11 11 11 11 11 10 10 10 10 \n8 8 9 9 9 9 11 9 9 9 9 8 8 \n7 7 7 7 8 8 11 8 8 7 7 7 7 \n5 5 6 6 6 6 10 6 6 6 6 5 5 \n4 4 4 4 5 5 10 5 5 4 4 4 4 \n2 2 3 3 3 3 10 3 3 3 3 2 2 \n1 1 1 1 2 2 10 2 2 1 1 1 1 \n", "YES\n1 1 1 2 2 2 13 2 2 2 1 1 1 \n3 3 3 4 4 4 13 4 4 4 3 3 3 \n5 5 5 6 6 6 13 6 6 6 5 5 5 \n7 7 7 8 8 8 14 8 8 8 7 7 7 \n9 9 9 10 10 10 14 10 10 10 9 9 9 \n11 11 11 12 12 12 14 12 12 12 11 11 11 \n13 13 13 14 14 14 15 14 14 14 13 13 13 \n11 11 11 12 12 12 14 12 12 12 11 11 11 \n9 9 9 10 10 10 14 10 10 10 9 9 9 \n7 7 7 8 8 8 14 8 8 8 7 7 7 \n5 5 5 6 6 6 13 6 6 6 5 5 5 \n3 3 3 4 4 4 13 4 4 4 3 3 3 \n1 1 1 2 2 2 13 2 2 2 1 1 1 \n", "YES\n1 1 2 2 9 2 2 1 1 \n3 3 4 4 9 4 4 3 3 \n5 5 6 6 10 6 6 5 5 \n7 7 8 8 10 8 8 7 7 \n9 9 10 10 11 10 10 9 9 \n7 7 8 8 10 8 8 7 7 \n5 5 6 6 10 6 6 5 5 \n3 3 4 4 9 4 4 3 3 \n1 1 2 2 9 2 2 1 1 \n", "YES\n1 2 3 4 17 4 3 2 1 \n5 6 7 8 18 8 7 6 5 \n9 10 11 12 19 12 11 10 9 \n13 14 15 16 20 16 15 14 13 \n17 18 19 20 21 20 19 18 17 \n13 14 15 16 20 16 15 14 13 \n9 10 11 12 19 12 11 10 9 \n5 6 7 8 18 8 7 6 5 \n1 2 3 4 17 4 3 2 1 \n", "YES\n1 1 2 5 2 1 1 \n2 3 3 6 3 3 2 \n4 4 5 6 5 4 4 \n5 6 6 7 6 6 5 \n4 4 5 6 5 4 4 \n2 3 3 6 3 3 2 \n1 1 2 5 2 1 1 \n", "YES\n1 1 1 2 6 2 1 1 1 \n2 2 3 3 6 3 3 2 2 \n3 4 4 4 7 4 4 4 3 \n5 5 5 6 7 6 5 5 5 \n6 6 7 7 7 7 7 6 6 \n5 5 5 6 7 6 5 5 5 \n3 4 4 4 7 4 4 4 3 \n2 2 3 3 6 3 3 2 2 \n1 1 1 2 6 2 1 1 1 \n", "YES\n1 2 3 4 5 6 37 6 5 4 3 2 1 \n7 8 9 10 11 12 38 12 11 10 9 8 7 \n13 14 15 16 17 18 39 18 17 16 15 14 13 \n19 20 21 22 23 24 40 24 23 22 21 20 19 \n25 26 27 28 29 30 41 30 29 28 27 26 25 \n31 32 33 34 35 36 42 36 35 34 33 32 31 \n37 38 39 40 41 42 43 42 41 40 39 38 37 \n31 32 33 34 35 36 42 36 35 34 33 32 31 \n25 26 27 28 29 30 41 30 29 28 27 26 25 \n19 20 21 22 23 24 40 24 23 22 21 20 19 \n13 14 15 16 17 18 39 18 17 16 15 14 13 \n7 8 9 10 11 12 38 12 11 10 9 8 7 \n1 2 3 4 5 6 37 6 5 4 3 2 1 \n", "YES\n1 3 1 \n3 2 3 \n1 3 1 \n", "YES\n1 2 6 2 1 \n3 4 8 4 3 \n5 7 9 7 5 \n3 4 8 4 3 \n1 2 6 2 1 \n", "NO\n", "NO\n", "YES\n1 1 6 1 1 \n1 2 9 2 1 \n5 8 7 8 5 \n1 2 9 2 1 \n1 1 6 1 1 \n", "NO\n", "NO\n"]}, "solutions": "[\"n=int(input())\\na=list(map(int,input().split()))\\n\\nc=[0]*1001\\n\\nfor i in range (len(a)):\\n\\tc[a[i]]+=1\\n\\nsym=0\\nsin=0\\n\\nfor i in range (1001):\\n\\tsym+=(c[i]//4)\\n\\tif(c[i]%2==1):\\n\\t\\tsin+=1\\n\\nif(n%2==0 and sym==((n*n)//4)):\\n\\tmat= [([0]*(n//2)) for i in range (n//2)]\\n\\tar=[]\\n\\tfor i in range (1001):\\n\\t\\twhile(c[i]>=4):\\n\\t\\t\\tar.append(i)\\n\\t\\t\\tc[i]-=4\\n\\t\\n\\tk=0\\n\\tfor i in range (n//2):\\n\\t\\tfor j in range (n//2):\\n\\t\\t\\tmat[i][j]=ar[k]\\n\\t\\t\\tk+=1\\n\\n\\tnewm=[([0]*n) for i in range (n)]\\n\\tfor i in range (n//2):\\n\\t\\tfor j in range (n//2):\\n\\t\\t\\tnewm[i][j]=mat[i][j]\\n\\t\\t\\tnewm[n-i-1][j]=mat[i][j]\\n\\t\\t\\tnewm[n-i-1][n-j-1]=mat[i][j]\\n\\t\\t\\tnewm[i][n-j-1]=mat[i][j]\\n\\n\\tprint(\\\"YES\\\")\\n\\tfor i in range (n):\\n\\t\\tfor j in range (n):\\n\\t\\t\\tprint(newm[i][j],end=\\\" \\\")\\n\\t\\tprint()\\n\\n\\t\\nelif(n%2==1 and (((sym>=(((n//2) *(n//2)) ) ) and (sin==1)))):\\n\\tmat= [([0]*(n//2)) for i in range (n//2)]\\n\\tar=[]\\n\\tfor i in range (1001):\\n\\t\\twhile(c[i]>=4):\\n\\t\\t\\tar.append(i)\\n\\t\\t\\tc[i]-=4\\n\\t\\n\\tk=0\\n\\tfor i in range (n//2):\\n\\t\\tfor j in range (n//2):\\n\\t\\t\\tmat[i][j]=ar[k]\\n\\t\\t\\tar.pop(k)\\n\\n\\tnewm=[([0]*n) for i in range (n)]\\n\\tfor i in range (n//2):\\n\\t\\tfor j in range (n//2):\\n\\t\\t\\tnewm[i][j]=mat[i][j]\\n\\t\\t\\tnewm[n-i-1][j]=mat[i][j]\\n\\t\\t\\tnewm[n-i-1][n-j-1]=mat[i][j]\\n\\t\\t\\tnewm[i][n-j-1]=mat[i][j]\\n\\n\\tna=len(ar)\\n\\tar2=[]\\n\\tfor i in range (na):\\n\\t\\tar2.append(ar[i])\\n\\t\\tar2.append(ar[i])\\n\\n\\tfor i in range (1001):\\n\\t\\twhile(c[i]>=2):\\n\\t\\t\\tar2.append(i)\\n\\t\\t\\tc[i]-=2\\n\\n\\t#print(ar)\\n\\tfor i in range (n//2):\\n\\t\\tnewm[n//2 ][i]=ar2[0]\\n\\t\\tnewm[n//2 ][n-i-1]=ar2[0]\\n\\t\\tar2.pop(0)\\n\\t\\tnewm[i][n//2 ]=ar2[0]\\n\\t\\tnewm[n-i-1][n//2 ]=ar2[0]\\n\\t\\tar2.pop(0)\\n\\n\\tfor i in range (1001):\\n\\t\\tif(c[i]==1):\\n\\t\\t\\tnewm[n//2][n//2]=i\\n\\t\\n\\tprint(\\\"YES\\\")\\n\\tfor i in range (n):\\n\\t\\tfor j in range (n):\\n\\t\\t\\tprint(newm[i][j],end=\\\" \\\")\\n\\t\\tprint()\\n\\nelse:\\n\\tprint(\\\"NO\\\")\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}