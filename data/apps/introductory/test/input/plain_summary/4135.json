{"qid": 4135, "orig_input": "A string $s$ of length $n$ can be encrypted by the following algorithm:  iterate over all divisors of $n$ in decreasing order (i.e. from $n$ to $1$),  for each divisor $d$, reverse the substring $s[1 \\dots d]$ (i.e. the substring which starts at position $1$ and ends at position $d$). \n\nFor example, the above algorithm applied to the string $s$=\"codeforces\" leads to the following changes: \"codeforces\" $\\to$ \"secrofedoc\" $\\to$ \"orcesfedoc\" $\\to$ \"rocesfedoc\" $\\to$ \"rocesfedoc\" (obviously, the last reverse operation doesn't change the string because $d=1$).\n\nYou are given the encrypted string $t$. Your task is to decrypt this string, i.e., to find a string $s$ such that the above algorithm results in string $t$. It can be proven that this string $s$ always exists and is unique.\n\n\n-----Input-----\n\nThe first line of input consists of a single integer $n$ ($1 \\le n \\le 100$) \u2014 the length of the string $t$. The second line of input consists of the string $t$. The length of $t$ is $n$, and it consists only of lowercase Latin letters.\n\n\n-----Output-----\n\nPrint a string $s$ such that the above algorithm results in $t$.\n\n\n-----Examples-----\nInput\n10\nrocesfedoc\n\nOutput\ncodeforces\n\nInput\n16\nplmaetwoxesisiht\n\nOutput\nthisisexampletwo\n\nInput\n1\nz\n\nOutput\nz\n\n\n\n-----Note-----\n\nThe first example is described in the problem statement.", "input": "Given an encrypted string, reverse the encryption process by applying substring reversals in increasing order of divisors to recover the original string.", "test_cases": {"inputs": ["10\nrocesfedoc\n", "16\nplmaetwoxesisiht\n", "1\nz\n", "2\nir\n", "3\nilj\n", "4\njfyy\n", "6\nkrdych\n", "60\nfnebsopcvmlaoecpzmakqigyuutueuozjxutlwwiochekmhjgwxsgfbcrpqj\n", "64\nhnlzzhrvqnldswxfsrowfhmyzbxtyoxhogudasgywxycyhzgiseerbislcncvnwy\n", "97\nqnqrmdhmbubaijtwsecbidqouhlecladwgwcuxbigckrfzasnbfbslukoayhcgquuacygakhxoubibxtqkpyyhzjipylujgrc\n", "100\nedykhvzcntljuuoqghptioetqnfllwekzohiuaxelgecabvsbibgqodqxvyfkbyjwtgbyhvssntinkwsinwsmalusiwnjmtcoovf\n", "96\nqtbcksuvxonzbkokhqlgkrvimzqmqnrvqlihrmksldyydacbtckfphenxszcnzhfjmpeykrvshgiboivkvabhrpphgavvprz\n", "90\nmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n", "89\nwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\n", "99\nqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "100\noooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n", "60\nwwwwwxwwwwwwfhwwhwwwwwwawwwwwwwwwwwwwnwwwwwwwwwwwwwwwwwwwwww\n", "90\ncccchccccccccccccccccccccccccccwcccccccccgcccccchccccccccccccccccccccccxccccccncccccccuccc\n", "97\nfwffffffffffffffffffffffffrffffffffffffffzfffffffffffffffftfcfffffffqffffffffffffffffffffffyfffff\n", "100\ndjjjjjjjjjjgjjjjjjjjjjjjjjsvjjjjjjjjjjmjjjjjjjjjjjjjajjjjjjajjjjjjrjjjjjjjjjjjjrjjtjjjjjjjjjjjjjojjj\n"], "outputs": ["codeforces\n", "thisisexampletwo\n", "z\n", "ri\n", "jli\n", "yyjf\n", "hcyrkd\n", "jqprcbfgsxwgjhmkehcoiwwltuxjzokamzpalobnfespcvmoecqigyuutueu\n", "ywnvcnclsibreesigzhycyxwygsadugofxwsdlnqzlhnzhrvsrowfhmyzbxtyoxh\n", "crgjulypijzhyypkqtxbibuoxhkagycauuqgchyaokulsbfbnsazfrkcgibxucwgwdalcelhuoqdibceswtjiabubmhdmrqnq\n", "fvooctmjnwisulamswniswknitnssvhybgtwjybkfyvxqdoqgbqteoitnczvkyedhljuuoqghptnfllwekzohiuaxelgecabvsbi\n", "zrpvvaghpprhbavkviobighsvrkyepmjfhznczsxnehpfkctvrnqmqzmkokbvuctqbksxonzhqlgkrviqlihrmksldyydacb\n", "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm\n", "wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww\n", "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq\n", "oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\n", "wwwwwwwwwwwwwwwwwwwwwwnwwwwwwwwwwhwwwxwwwwwwwwwfhwwwwawwwwww\n", "cccucccccccnccccccxcccccccccccccccccccccchccccccccccccccccccccccchccccccccccwcccccccccgccc\n", "fffffyffffffffffffffffffffffqfffffffcftffffffffffffffffzffffffffffffffrffffffffffffffffffffffffwf\n", "jjjojjjjjjjjjjjjjtjjrjjjjjjjjjjjjrjjjjjjajjjjjjajjjjjjjjjjjjjjdjjjgjjjjjjjjjsvjjjjjjjjjjmjjjjjjjjjjj\n"]}, "solutions": "[\"n = int(input())\\ns = input()\\nfor d in range(1, n+1):\\n    if n%d == 0:\\n        t1 = s[:d]\\n        t2 = s[d:]\\n        s = t1[::-1] + t2\\nprint(s)\", \"n = int(input())\\ns = input()\\nfor i in range(1, n + 1):\\n  if n % i == 0:\\n    s = s[i-1::-1] + s[i:]\\nprint(s)\\n\", \"l = int(input())\\ns = input()\\nfor i in range(1,l+1):\\n\\tif (l%i)==0:\\n\\t\\ttemp = s[:i]\\n\\t\\ts = temp[::-1] + s[i:]\\nprint(s)\", \"n=int(input())\\na=list(input().strip())\\ni=1\\nwhile(i<=n):\\n    if(n%i==0):\\n        a=a[:i][::-1]+a[i:]\\n    i+=1\\nprint(\\\"\\\".join(a))\", \"n=int(input())\\ns=input()\\nfor x in range(1,n+1):\\n    if(n%x==0):\\n        #print(x,s[:x])\\n        s=s[:x][::-1]+s[x:]\\nprint(s)\\n\", \"n = int(input())\\ns = input()\\nfor i in range(1, n + 1):\\n    if n % i == 0: s = s[:i][::-1] + s[i:]\\nprint(s)\\n\", \"n = int(input())\\nstring = input()\\n\\ndivisors = []\\nfor i in range(1, n + 1):\\n    if n % i == 0:\\n        divisors.append(i)\\n        \\nfor d in divisors:\\n    string = string[:d][::-1] + string[d:]\\n    \\nprint(string)\", \"n=int(input())\\ns=input()\\nfor i in range(2,n+1):\\n  if(n%i==0):\\n    t = s[:i]\\n    t = t[::-1]\\n    tt = s[i:]\\n    s = t+tt\\nprint(s)\", \"n=int(input())\\nt=input()\\nfor i in range(1,n+1):\\n    if n%i==0:\\n        l=t[0:i]\\n        ost=t[i:]\\n        l=l[::-1]\\n        t=l+ost\\nprint(t)\", \"n = int(input())\\ns = input()\\nfor d in range(2, n + 1):\\n    if n % d == 0:\\n        s = s[d - 1::-1] + s[d:]\\nprint(s)\\n\", \"def go():\\n    n = int(input())\\n    s = [i for i in input()]\\n    for i in range(1, n + 1):\\n        if n % i == 0:\\n            s[0:i] = s[0:i][::-1]\\n    return ''.join(s)\\nprint(go())\\n\", \"n = int(input().strip())\\ns = input()\\n\\nfor d in range(1, n + 1):\\n    if n % d == 0:\\n        s = s[:d][::-1] + s[d:]\\n\\nprint(s)\\n\", \"n = int(input())\\nt = list(input())\\n\\nfor i in range(1, n + 1):\\n    if n % i == 0:\\n        t[:i] = t[:i][::-1]\\n\\nprint(''.join(t))\\n\", \"n=int(input())\\nt=list(map(str,input()))\\nfor i in range(1,n+1):\\n    if n%i==0:\\n        t=t[:i][::-1]+t[i:]\\nfor i in t:\\n    print(i,end='')\\n\", \"n = int(input())\\ns = input()\\n\\nfor i in range(2,n+1):\\n    if(n%i==0):\\n        d = \\\"\\\"\\n        for j in range(i-1,-1,-1):\\n            d =  d + s[j]\\n        d += s[i:]\\n        s = d\\nprint(s)\", \"def d(n):\\n    z = [1]\\n    for i in range(2,n//2+1):\\n        if n%i==0:\\n            z.append(i)\\n    z.append(n)\\n    return z\\nn = int(input())\\nt = list(input())\\nz = d(n)\\n#z.reverse()\\nfor i in z:\\n    k = t[:i]\\n    k.reverse()\\n    t = k + t[i:]\\nfor i in range(n):\\n    print(t[i],end='')\", \"a = int(input())\\nstr_inp = str(input())\\n\\nfor i in range(1, a+1):\\n\\tif a%i == 0:\\n\\t\\tstr_inp = ''.join(reversed(str_inp[0:i])) + str_inp[i:a]\\n\\nprint(str_inp)\\n\", \"n = int(input())\\ns = input()\\narr = []\\nfor i in range(n):\\n    arr.append(s[i])\\nfor i in range(1, n + 1):\\n    if n % i == 0:\\n        arr = list(reversed(arr[:i])) + arr[i:]\\nprint(*arr, sep='')\", \"n = int(input())\\ns = input()\\nfor i in range(1, n + 1):\\n    if n % i == 0:\\n        s = s[:i][::-1] + s[i:]\\nprint(s)\", \"def divi(n):\\n    l = []\\n    for i in range(1,n+1):\\n        if(n%i==0):\\n            l.append(i)\\n    return l\\n\\nn = int(input())\\ns = input()\\nsl = [i for i in s]\\nl = divi(n)\\nfor i in l:\\n    x = sl[:i]\\n    sl[:i] = x[::-1]\\n\\nans = ''\\nfor i in sl:\\n    ans+=i\\n\\nprint(ans)\\n\", \"import math;\\nimport random;\\nimport time;\\nimport heapq;\\ndef getIntList():\\n    return list(map(int, input().split()));\\ndef getTransIntList(n):\\n    first=getIntList();\\n    m=len(first);\\n    result=[[0]*n for _ in range(m)];\\n    for i in range(m):\\n        result[i][0]=first[i];\\n    for j in range(1, n):\\n        curr=getIntList();\\n        for i in range(m):\\n            result[i][j]=curr[i];\\n    return result;\\nn = int(input());\\nt= input();\\nfor d in range(1, n+1):\\n    if n%d==0:\\n        t1=t[:d];\\n        t=t1[::-1]+t[d:];\\nprint(t);\\n\", \"n = int(input())\\ns = input()\\ndiv = 1\\n\\nwhile div<=n:\\n    if n%div==0:\\n        tmp = s[:div]\\n        s = tmp[::-1] + s[div:]\\n    div += 1\\n\\nprint(s)\\n\", \"n = int(input())\\na = input()\\nd = []\\nfor i in range(2,n+1):\\n    if n % i == 0:\\n        d.append(i)\\nfor i in d:\\n    j = a[:i]\\n    j = j[::-1]\\n  #  print(j)\\n    a = j + a[i:]\\nprint(a)\\n\", \"n = int(input())\\nt = input()\\nfor i in range(1, n + 1):\\n    if n % i == 0:\\n        t = t[0:i][::-1] + t[i:]\\nprint(t)\", \"n = int(input())\\ns = list(input())\\nfor i in range(1, n + 1):\\n    if n % i == 0:\\n        t = s[:i]\\n        s[:i] = t[::-1]\\nprint(\\\"\\\".join(s))\\n\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}