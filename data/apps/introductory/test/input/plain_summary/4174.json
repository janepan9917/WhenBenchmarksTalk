{"qid": 4174, "orig_input": "A ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \\leq i \\leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\nHow many times will the ball make a bounce where the coordinate is at most X?\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq L_i \\leq 100\n - 1 \\leq X \\leq 10000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN X\nL_1 L_2 ... L_{N-1} L_N\n\n-----Output-----\nPrint the number of times the ball will make a bounce where the coordinate is at most X.\n\n-----Sample Input-----\n3 6\n3 4 5\n\n-----Sample Output-----\n2\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.", "input": "Count bounces of a ball on a number line with coordinates not exceeding a given value.", "test_cases": {"inputs": ["3 6\n3 4 5\n", "4 9\n3 3 3 3\n", "90 2575\n69 34 43 51 96 65 22 57 26 27 85 62 92 99 90 52 43 63 17 97 93 35 1 53 95 34 98 9 62 37 39 97 49 71 100 78 22 45 87 61 44 18 64 10 48 34 87 57 39 32 46 83 29 16 27 54 42 32 6 64 11 5 25 76 69 93 15 32 59 79 94 76 32 32 26 9 37 28 92 12 65 86 14 36 44 78 47 77 81 23\n", "100 1487\n23 84 17 3 13 61 35 2 8 85 89 81 27 57 91 1 70 60 2 49 100 4 44 59 39 65 34 23 83 34 37 24 83 65 12 78 38 70 99 62 77 16 89 100 51 96 94 99 1 11 9 77 24 38 56 74 27 96 77 90 60 56 9 99 38 100 70 18 49 74 72 64 64 8 72 57 72 79 96 81 45 87 28 36 72 100 63 98 35 46 90 5 58 90 91 46 80 5 97 82\n", "91 1939\n79 79 61 8 49 35 22 6 83 88 53 48 74 72 52 37 28 41 27 94 38 91 93 43 78 51 80 60 3 88 81 15 3 18 32 36 92 11 95 22 68 98 1 57 22 15 68 38 94 74 69 38 74 53 83 81 7 40 6 88 22 37 14 37 67 2 19 22 26 24 29 76 39 36 41 32 96 73 13 71 57 49 86 81 84 69 78 64 1 98 79\n", "94 3470\n77 65 18 36 92 8 51 19 68 93 15 23 23 29 83 41 33 50 93 2 19 36 40 94 56 65 69 98 76 24 4 3 63 58 58 44 50 51 13 5 9 99 55 51 89 45 69 83 31 71 64 54 49 86 3 82 49 7 25 55 29 52 75 87 65 51 43 34 6 35 72 32 56 24 19 14 10 35 73 66 1 5 43 44 26 11 59 89 8 68 57 56 72 67\n", "97 3803\n73 78 91 21 38 30 66 31 67 89 83 10 10 34 82 83 42 51 5 4 38 15 29 28 70 93 30 96 23 16 67 22 16 48 100 95 2 78 33 45 93 25 75 73 1 65 74 27 18 44 44 97 5 45 32 82 18 17 34 27 94 36 52 2 26 72 67 16 77 95 82 14 82 46 20 65 39 29 30 30 60 26 19 2 43 47 59 64 14 5 52 84 58 58 15 19 22\n", "96 2120\n57 61 75 61 44 11 2 68 19 85 96 71 21 32 27 35 18 52 8 37 26 83 39 26 27 95 43 51 61 54 94 84 47 52 55 5 57 99 86 100 56 32 12 47 86 96 48 98 100 62 31 39 9 37 1 67 81 56 30 75 33 64 64 80 74 43 98 38 93 75 76 88 93 43 81 50 89 15 55 7 97 54 13 70 25 25 61 6 100 63 29 15 72 59 15 62\n", "95 3384\n22 89 88 68 100 14 35 3 81 6 26 81 13 90 17 53 60 82 6 84 31 76 26 64 74 41 33 93 29 99 89 85 34 56 62 64 100 85 65 67 95 28 49 100 9 53 18 31 37 3 37 37 24 71 91 47 73 86 42 71 90 63 98 50 75 82 67 61 48 30 35 29 41 37 1 58 85 91 19 40 85 68 36 48 52 73 6 8 100 47 82 3 17 88 28\n", "91 643\n89 68 24 54 51 44 39 45 40 16 40 16 18 16 15 68 84 33 60 83 46 87 4 45 12 59 98 83 38 16 51 19 3 4 55 31 50 95 81 5 26 94 63 39 10 41 87 69 65 33 4 59 9 93 61 28 41 20 69 1 98 55 10 48 64 55 81 95 97 58 48 11 23 58 10 31 97 9 45 57 90 24 84 61 11 50 60 89 17 39 55\n", "93 4218\n85 34 46 88 45 99 54 60 44 3 39 90 21 26 93 55 94 77 52 66 67 41 7 88 93 80 56 42 2 59 31 52 65 39 33 75 38 84 31 82 95 55 39 13 35 32 10 19 17 61 100 66 40 24 50 8 93 6 44 75 45 90 22 46 14 43 85 27 58 56 12 91 4 54 41 6 60 27 5 47 61 40 90 12 63 62 2 94 76 37 72 55 26\n", "96 2435\n42 47 21 85 69 22 70 53 36 56 80 69 28 95 35 95 50 69 37 42 4 95 38 10 20 63 35 44 82 46 22 68 86 98 13 16 26 50 1 30 79 60 2 46 20 93 73 9 73 32 10 1 82 88 87 44 70 70 8 62 22 100 2 6 14 4 1 11 7 76 64 68 38 99 86 93 67 94 77 3 3 41 15 54 24 73 73 63 93 30 74 79 92 89 91 55\n", "92 2285\n22 90 39 78 80 100 95 40 53 1 44 50 25 53 28 61 26 45 70 96 73 29 16 71 94 53 67 28 55 39 44 15 87 55 100 27 59 80 16 23 97 60 80 87 30 22 19 98 57 6 14 20 93 50 80 91 43 65 68 49 95 78 44 26 99 30 70 74 66 67 65 42 91 31 86 10 100 79 15 39 62 75 86 47 3 99 49 54 59 8 83 83\n", "92 329\n52 31 7 48 93 98 53 24 69 30 79 40 53 49 49 85 67 32 98 25 48 78 22 91 34 57 19 85 7 6 43 18 65 17 67 2 28 50 50 77 38 51 44 83 68 70 25 100 58 15 27 88 34 25 6 98 16 47 67 15 61 62 45 59 59 17 86 91 45 32 62 62 20 36 43 59 26 82 32 78 19 23 29 12 12 7 40 39 11 97 46 60\n", "97 2117\n44 75 30 68 36 84 68 80 90 93 91 85 77 58 17 74 36 30 58 19 54 34 27 11 59 29 18 97 25 60 60 68 88 57 91 17 29 79 68 16 21 78 60 42 36 100 28 66 16 7 38 82 13 95 90 1 6 71 50 54 92 85 56 90 82 95 4 7 86 50 47 37 17 60 37 10 39 10 33 55 48 100 65 99 9 66 39 31 23 62 49 25 64 71 34 84 74\n", "100 4865\n19 84 42 32 90 10 2 52 2 25 34 76 43 89 6 48 16 12 52 79 35 16 60 46 95 49 55 48 54 56 82 18 15 59 100 89 28 22 31 52 78 15 67 44 56 44 97 46 85 30 86 22 31 8 69 40 16 42 27 82 84 3 1 81 85 41 85 66 23 2 87 14 89 48 9 84 36 15 57 74 24 70 45 20 44 96 50 91 5 83 69 1 39 26 85 61 88 53 90 33\n", "100 10000\n100 29 69 46 30 75 24 30 98 20 27 23 76 2 3 5 62 52 79 84 28 62 29 23 36 53 66 3 78 63 85 74 37 8 88 34 79 62 54 5 73 56 94 89 36 85 93 81 34 86 39 28 77 99 13 78 59 56 63 9 13 88 38 38 55 76 93 35 48 45 88 59 69 30 66 53 17 84 30 34 78 92 77 38 86 74 7 38 6 93 66 66 14 59 73 14 41 10 27 53\n"], "outputs": ["2\n", "4\n", "47\n", "34\n", "38\n", "72\n", "81\n", "42\n", "62\n", "17\n", "86\n", "51\n", "43\n", "7\n", "39\n", "101\n", "101\n"]}, "solutions": "[\"import itertools\\nimport bisect\\n\\nn, x = map(int, input().split())\\nl = list(map(int, input().split()))\\n\\na = list(itertools.accumulate(l, initial=0))\\nprint(bisect.bisect_right(a, x))\", \"n,x=list(map(int, input().split()))\\n\\nl_list=[int(i) for i in input().split()]\\n\\nd=0\\ncount=1\\nfor i in range(n):\\n    d=d+l_list[i]\\n    if d<=x:\\n        count+=1\\n\\nprint(count)\\n\", \"n, x = map(int, input().split())\\n\\nl = list(map(int, input().split()))\\n\\n\\nans = 0\\n\\nd = 0\\n\\nfor i in range(n):\\n    if d <= x:\\n        ans += 1\\n    d += l[i]\\n\\nif d <= x:\\n    ans += 1\\n\\nprint(ans)\", \"import bisect\\nfrom itertools import accumulate\\nN, X = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\nLsum = list(accumulate(L))\\nind = bisect.bisect_right(Lsum, X)\\nprint((ind+1))\\n\", \"import bisect\\nn, x = map(int, input().split())\\nl = [0] + list(map(int, input().split()))\\nfor i in range(n):\\n  l[i+1] += l[i]\\nprint(bisect.bisect_left(l, x+1))\", \"N,X=list(map(int,input().split()))\\nL=list(map(int,input().split()))\\nx=0\\nans=1\\nfor i in range(N):\\n    x+=L[i]\\n    if x<=X:\\n        ans+=1\\nprint(ans)\\n\", \"\\n\\n\\nn, x = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\n\\nl1 = [0]+l\\nfor i in range(1, len(l)+1):\\n    l1[i] = l1[i-1]+l[i-1]\\ncnt = 0\\n\\nfor i in range(0, len(l1)):\\n    if (l1[i] <= x):\\n        cnt += 1\\nprint(cnt)\\n\", \"N, M = map(int, input().split())\\nL = list(map(int, input().split()))\\nd = 0\\nans = 1\\nfor l in L:\\n  d += l\\n  if d <=M:\\n    ans += 1\\n  else:\\n    break\\nprint(ans)\", \"n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\n\\nd = [0]\\nfor i in range(n):\\n    d.append(d[-1]+l[i])\\nprint(len([i for i in d if i <= x]))\", \"n, x = list(map(int,input().split()))\\nl = list(map(int,input().split()))\\na = [0]\\nfor i in range(n):\\n    tmp = a[i] + l[i]\\n    a.append(tmp)\\nans = 0\\nfor i in range(n + 1):\\n    if (a[i] <= x):\\n        ans = ans + 1\\n\\nprint(ans)\\n\", \"n,x = map(int, input().split())\\nL = list(map(int, input().split()))\\ncnt = 1\\nd = 0\\nfor l in L:\\n  d += l\\n  if d <= x:\\n    cnt += 1\\n  else:\\n    break\\nprint(cnt)\", \"from itertools import accumulate\\nfrom bisect import *\\nN, X = list(map(int, input().split()))\\nL = list(tuple(map(int, input().split())))\\n\\nacc = sorted(list(accumulate(L)) + [0])\\n\\nn = bisect_right(acc,X)\\nprint(n)\\n\\n\", \"# AtCoder Beginner Contest 130\\n# B - Bounding\\nimport bisect\\n\\nN,X=map(int,input().split())\\nL=list(map(int,input().split()))\\n\\naccumu_L=[0]\\n\\nfor i in range (N):\\n    accumu_L.append(accumu_L[-1]+L[i])\\n\\n# print(accumu_L)\\n\\nprint(bisect.bisect_right(accumu_L,X))\", \"n,x=map(int,input().split())\\nl=list(map(int,input().split()))+[10**5]\\n\\nd,cnt=0,0\\nwhile d<=x and cnt<n+1:\\n  d+=l[cnt]\\n  cnt+=1\\n\\nprint(cnt)\", \"N,X = list(map(int,input().split()))\\nli = list(map(int,input().split()))\\nd = 0\\nc = 1\\nfor i in range(N):\\n  d = d + li[i]\\n  if d <=X:\\n    c = c + 1\\nprint(c)          \\n\", \"a,b=input().split()\\na=int(a)\\nb=int(b)\\nc=list(map(int,input().split()))\\nd=0\\ne=0\\nfor i in range(a):\\n  if d+c[i]<=b:\\n    d=d+c[i]\\n    e=e+1\\n  else:\\n    break\\nprint(e+1)\", \"n,x=map(int,input().split())\\nl=list(map(int,input().split()))\\nans=1\\nd=0\\nfor i in range(len(l)):\\n    d=d+l[i]\\n    if d<=x:\\n        ans+=1\\nprint(ans)\", \"n,x = map(int, input().split())\\na = [int(num) for num in input().split()]\\nsum = 0\\ncont = 1\\nfor i in range(n):\\n    sum += a[i]\\n    if sum <= x:\\n        cont += 1\\nprint(cont)\", \"from collections import defaultdict\\n\\n\\ndef mapt(fn, *args):\\n    return tuple(map(fn, *args))\\n\\n\\ndef Input():\\n    return mapt(int, input().split(\\\" \\\"))\\n\\n\\ndef main():\\n    n, x = Input()\\n    l = Input()\\n    d = defaultdict(int)\\n    d[0] = 0\\n    ans = 0\\n\\n    for i in range(1, n+1):\\n        d[i] = d[i-1] + l[i-1]\\n\\n    for i in d.values():\\n        if i <= x: ans += 1\\n\\n    print(ans)\\n\\nmain()\", \"n,x=map(int,input().split())\\nY = list(map(int,input().split()))\\nZ = [0]*n\\na = 0\\nfor i in range(n):\\n  a +=Y[i]\\n  Z[i]=a\\nimport bisect\\nprint(1+bisect.bisect_left(Z,x+1))\", \"n,x=map(int,input().split())\\nL=list(map(int,input().split()))\\nans = 1\\ncnt = 0\\nfor l in L:\\n  cnt += l\\n  if x >= cnt:\\n    ans += 1\\nprint(ans)\", \"n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\nbound = []\\nfor i in range(n+1):\\n    if i == 0:\\n        bound += [0]\\n    else:\\n        bound += [bound[i-1] + l[i-1]]\\n    if bound[i] > x:\\n        print(len(bound) - 1)\\n        return\\nprint(len(bound))\", \"N, X = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\n\\ncurrent = 0\\ncnt = 1\\nfor l in L:\\n    current += l\\n    if current > X:\\n        break\\n    cnt += 1\\n\\nprint(cnt)\\n\", \"# Di = Di-1 + Li-1\\nn, x = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\nans = 0\\nct = 1 \\nfor i in range(n):\\n    ans = ans + L[i]\\n    if ans > x:\\n        break\\n    else:\\n        ct += 1\\nprint(ct)\\n\", \"N, X = map(int, input().split())\\nL = list(map(int, input().split()))\\n\\ns = 0\\ncnt = 1\\nfor i in range(N):\\n    if s + L[i] > X:\\n        break\\n    s += L[i]\\n    cnt += 1\\n\\nprint(cnt)\", \"n,x =  map(int,input().split())\\nl = list(map(int,input().split()))\\nans = 0\\ncnt = 1\\nfor i in l:\\n  ans += i\\n  if ans > x:\\n    break\\n  cnt += 1\\n  \\nprint(cnt)\", \"import bisect\\n\\nN, X = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\n\\nD = [0]\\nfor i in range(len(L)):\\n    D.append(sum(L[:i+1]))\\nprint((bisect.bisect_right(D, X)))\\n\", \"a = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nc = 1\\nd = 0\\nfor i in b:\\n  d += i\\n  if d <= a[1]:\\n    c += 1\\nprint(c)\\n\", \"n,x = map(int, input().split())\\na = [int(num) for num in input().split()]\\nsum = 0\\ncont = 1\\nfor i in range(n):\\n    sum += a[i]\\n    if sum <= x:\\n        cont += 1\\nprint(cont)\", \"N,X = map(int,input().split())\\nL = [int(i) for i in input().split()]\\nD = 0\\nfor i in range(N) :\\n    D = L[i]+D\\n #   print(i,D)\\n    if D>X :\\n        print(i+1)\\n        return\\n\\nprint(N+1)\", \"r=input().split()\\nN=int(r[0])\\nX=int(r[1])\\nd=[int(s) for s in input().split()]\\nans=1\\nle=0\\nfor i in range(N):\\n    le+=d[i]\\n    if le>X:\\n        print(ans)\\n        break\\n    elif i==N-1:\\n        print(N+1)\\n    else:\\n        ans+=1\", \"n, x = map(int, input().split())\\nl = [int(s) for s in input().split()]\\n\\npos = 0\\ncount = 1\\nfor i in range(n):\\n    pos += l[i]\\n    if pos > x:\\n        break\\n    count += 1\\nprint(count)\", \"N, X  = map(int, input().split())\\nL = list(map(int, input().split()))\\ncount = 1\\ndistance = 0\\nfor l in L:\\n  distance += l\\n  if distance <= X:\\n    count += 1\\n  else:\\n    break\\nprint(count)\", \"n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\nxlist = [0]\\nnum = 0\\nfor i in l:\\n    num += i\\n    xlist.append(num)\\ncnt = 0\\nfor j in xlist:\\n    if j <= x:\\n        cnt += 1\\nprint(cnt)\", \"n, X = map(int, input().split())\\nl = list(map(int, input().split()))\\n\\nsumList = [0]\\nfor i in range(n):\\n    s = sumList[i]+l[i]\\n    if s > X:\\n        break\\n    sumList.append(s)\\n\\nprint(len(sumList))\", \"N, X = map(int, input().split())\\nL = list(map(int, input().split()))\\nS = [0]\\nfor i in range(N):\\n  S.append(S[i] + L[i])\\nans = 0\\nfor j in range(N+1):\\n  if S[j] <= X:\\n    ans += 1\\nprint(ans)\", \"N,X=map(int,input().split())\\nL=list(map(int,input().split()))\\nans=0\\n\\nfor i in range(1,N+1):\\n  if ans>=X:\\n    if ans==X:\\n      print(i)\\n      break\\n    else:\\n      print(i-1)\\n      break\\n  ans+=L[i-1]\\nelse:\\n  print(N+1)\", \"import sys\\n\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef I(): return int(input())\\ndef LI(): return list(map(int, input().split()))\\ndef IR(n): return [I() for i in range(n)]\\ndef LIR(n): return [LI() for i in range(n)]\\ndef SR(n): return [S() for i in range(n)]\\ndef S(): return input()\\ndef LS(): return input().split()\\n\\n\\nINF = float('inf')\\n\\n\\nn, x = LI()\\nl = LI()\\ncnt = 1\\nd = 0\\nfor i in range(n):\\n    # print(f'{(d, l[i])=}')\\n    if d + l[i] <= x:\\n        cnt += 1\\n        d += l[i]\\n    else:\\n        break\\nprint(cnt)\\n\", \"N, X = map(int, input().split())\\nL = list(map(int, input().split()))\\nD = 0\\ncount = 0\\nfor i in range(N+1):\\n  if D <= X:\\n    count += 1\\n  if i != N:\\n    D = D + L[i]\\nprint(count)\", \"n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\nL = [0] + l\\n\\na = 0\\ncount = 1\\nfor i in l:\\n    a += i\\n    if a <= x:\\n        count += 1\\nprint(count)\", \"n,x=map(int, input().split())\\nl=list(map(int, input().split()))\\nd=0\\ncount=0\\nfor i in range(n):\\n  d+=l[i]\\n  if d>x:\\n    print(i+1)\\n    break\\n  if i==n-1 and d<=x:\\n    print(n+1)\", \"n,x = map(int,input().split())\\nl = list(map(int,input().split()))\\nd = 0\\ni = 0\\nwhile d <= x and i <= n:\\n    if i == n:\\n        i += 1\\n    else:\\n        d += l[i]\\n        i += 1\\nprint(i)\", \"n,x=map(int,input().split())\\nans=1\\np=0\\nl=[int(x) for x in input().split()]\\nfor i in range(n):\\n    p+=l[i]\\n    if p > x:\\n        break\\n    else:\\n        ans+=1\\n\\nprint(ans)\", \"x, y = list(map(int, input().split()))\\nnum_list = list(map(int, input().split()))\\n\\ni = 1\\ndistance = 0\\nfor _ in num_list:\\n    distance += _\\n    if distance > y:\\n        break\\n    i += 1\\n\\nprint(i)\\n\", \"n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\nans = 1\\np = 0\\n\\nfor i in range(n):\\n    p += l[i]\\n    if p <= x:\\n        ans += 1\\n    else:\\n        break\\n\\nprint(ans)\", \"n, x = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\n\\nans = 0\\nbound = 0\\nfor i in l:\\n    bound += i\\n    ans += 1\\n    if bound > x:\\n        break\\nelse:\\n    ans = n + 1\\n\\nprint(ans)\\n\", \"n, x = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\n\\nd = [0]*(n+1)\\ncnt = 0 \\nfor i in range(n):\\n    d[i+1] += d[i]+L[i]\\n\\nfor i in range(n+1):\\n    if d[i] <= x:\\n        cnt += 1\\n\\nprint(cnt)\\n\", \"n,x = map(int,input().split())\\na = list(map(int,input().split()))\\nc = 1\\nb = 0\\nfor i in a:\\n    b = i+b\\n    if b <= x:\\n        c+=1\\nprint(c)\", \"n,x = map(int,input().split())\\na = list(map(int,input().split()))\\na.append(0)\\ncount = 0\\nb = 0\\nfor i in range(n+1):\\n    if b > x:\\n        break\\n    count+=1\\n    b+= a[i]\\nprint(count)\", \"import sys\\nsys.setrecursionlimit(10 ** 9)\\n# input = sys.stdin.readline    ####\\ndef int1(x): return int(x) - 1\\ndef II(): return int(input())\\ndef MI(): return list(map(int, input().split()))\\ndef MI1(): return list(map(int1, input().split()))\\ndef LI(): return list(map(int, input().split()))\\ndef LI1(): return list(map(int1, input().split()))\\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\\ndef MS(): return input().split()\\ndef LS(): return list(input())\\ndef LLS(rows_number): return [LS() for _ in range(rows_number)]\\ndef printlist(lst, k=' '): print((k.join(list(map(str, lst)))))\\nINF = float('inf')\\n# from math import ceil, floor, log2\\n# from collections import deque, defaultdict\\n# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\\n# from heapq import heapify, heappop, heappush\\n# import numpy as np    # cumsum\\n# from bisect import bisect_left, bisect_right\\n\\ndef solve():\\n    N, X = MI()\\n    L = LI()\\n\\n    A = [0] * (N+1)\\n    for i in range(1, N+1):\\n        A[i] = L[i-1] + A[i-1]\\n    ans = 0\\n    for a in A:\\n        if a > X:\\n            break\\n        ans += 1\\n    print(ans)\\n\\ndef __starting_point():\\n    solve()\\n\\n\\n__starting_point()\", \"n,x=map(int,input().split())\\nl=list(map(int,input().split()))\\nlist_d=[0]\\nans=0\\nfor i in range(1,n+1):\\n    list_d.append(list_d[i-1]+l[i-1])\\nfor i in list_d:\\n    if i<=x:\\n        ans+=1\\nprint(ans)\", \"N, X = map(int, input().split())\\nL = list(map(int, input().split()))\\n\\nbound = 1\\nd = 0\\nfor i in L:\\n    d += i\\n    if d <= X:\\n        bound += 1\\nprint(bound)\", \"n,x = map(int, input().split())\\nl = list(map(int, input().split()))\\n\\nans = 1\\nt = 0\\nfor i in l:\\n  t += i\\n  if t <= x: ans += 1\\n  if t >= x: break\\nprint(ans)\", \"n, x = list(map(int, input().split()))\\nl = [int(i) for i in input().split()]\\np = 0\\nfor i in range(n):\\n    p += l[i]\\n    if p > x:\\n        print((i + 1))\\n        break\\nelse:\\n    print((n + 1))\\n\", \"n, x = map(int, input().split())\\nL = list(map(int, input().split()))\\n\\ncnt = 0\\npos = 0\\nfor itr, l in enumerate(L):\\n  pos += l\\n  if pos > x:\\n    print(itr + 1)\\n    return\\n\\nprint(n + 1)\", \"N,X=list(map(int,input().split()))\\nL=list(map(int,input().split()))\\nS=[0]\\nsum_L=0\\nfor i in range(N):\\n  sum_L+=L[i]\\n  S.append(sum_L)\\ncounter=0\\nfor i in range(N+1):\\n  if S[i]<=X:\\n    counter+=1\\nprint(counter)\\n\", \"n,x=map(int,input().split())\\nl=list(map(int,input().split()))\\nd=[0]\\ncount=0\\nfor i in range(n):\\n    d.append(d[i]+l[i])\\nfor c in d:\\n    if c<=x:\\n        count+=1\\nprint(count)\", \"N,X = list(map(int,input().split()))\\nLi = list(map(int,input().split()))\\n\\nDi = 0\\ncount = 1\\nfor i in Li:\\n    Di = Di + i\\n    if Di <= X:\\n        count += 1\\n    else:\\n        break\\nprint(count)\\n\\n\", \"n, x = map(int,input().split())\\nl = list(map(int,input().split()))\\nans = 0\\ncount = 1\\nfor i in range(n):\\n  ans += l[i]\\n  if ans <= x:\\n    count += 1\\nprint(count)\", \"N,X = map(int,input().split())\\nL = list(map(int,input().split()))\\nkyori = 0\\n\\nfor i in range(N):\\n    kyori += L[i]\\n    if kyori > X:\\n        print(i+1)\\n        return\\n\\nprint(N+1)\", \"N,X = list(map(int,input().split()))\\nL = list(map(int,input().split()))\\nList = [0]*(N+1)\\nfor i in range(1,N+1):\\n    List[i] = List[i-1] + L[i-1]\\nimport bisect  \\n# A = [i for i in List if i <=X]\\n# print(len(A))\\nprint((bisect.bisect_left(List,X+1)))\\n\", \"n, x = map(int, input().split())\\na = list(map(int, input().split()))\\ns = 0\\nt = 1\\nfor i in range(n):\\n  s = s + a[i]\\n  if s <= x:\\n    t += 1\\nprint(t)\", \"n,x=map(int,input().split())\\nL=list(map(int,input().split()))\\nans=0\\nct=1\\nfor i in range(n):\\n  ans=ans+L[i]\\n  if ans>x:\\n    break\\n  else:\\n    ct+=1\\nprint(ct)\", \"n,x = map(int,input().split())\\nl = list(map(int,input().split()))\\ncnt = 0\\nfor i in range(n+1):\\n    #print(sum(l[:i]))\\n    if sum(l[:i])<=x:\\n        cnt += 1\\nprint(cnt)\", \"# n\\u306f\\u8df3\\u306d\\u308b\\u56de\\u6570\\u3000d1 = 1 dn+1 = dn + ln\\n\\nn,x = list(map(int,input().split()))\\nl = list(map(int,input().split()))\\n\\nd = 0\\ncount = 1\\n\\nfor y in range(n):\\n  d = d + l[y]\\n  if d <= x:\\n    count += 1\\n  else:\\n    break\\n    \\nprint(count)\\n\", \"n, x = (int(i) for i in input().split())\\nlist_l = [int(j) for j in input().split()]\\ntmp = 0\\ncount = 0\\nfor i in range(0, n + 1):\\n    if i == 0:\\n        pass\\n    else:\\n        tmp += list_l[i - 1]\\n        if tmp > x:\\n            break\\n    count += 1\\nprint(count)\", \"n, x = map(int, input().split())\\nllist = list(map(int, input().split()))\\ndlist = [0]\\nd = 0\\nfor i in llist:\\n    d += i\\n    dlist.append(d)\\nprint(sum([i<=x for i in dlist]))\", \"n,x = map(int,input().split())\\nl = list(map(int,input().split()))\\ndist = [0]*(n+1)\\nfor i in range(1,n+1):\\n    dist[i] = dist[i-1] + l[i-1]\\n    \\ncnt = 0\\nfor i in range(n+1):\\n    if dist[i]<= x:\\n        cnt += 1\\nprint(cnt) \", \"N,X = map(int,input().split())\\nL_List = list(map(int,input().split()))\\nans = 0\\nct = 1\\nfor i in range(N):\\n    ans += L_List[i]\\n    if ans <= X:\\n        ct += 1\\n    else:\\n        break\\n        \\nprint(ct)\", \"N,X = map(int,input().split())\\nL = [int(i) for i in input().split()]\\nD = [0]\\n\\nfor i in range(N):\\n    a = D[i]+L[i]\\n    if(a <= X):\\n        D.append(a)\\n    else:\\n        break\\n\\nprint(len(D))\", \"n, x = map(int, input().split())\\nL = list(map(int, input().split()))\\nval = 0\\ncount = 1\\n\\nfor l in L:\\n    val += l\\n    if val <= x:\\n        count += 1\\nprint(count)\", \"N,X = map(int,input().split())\\nL = list(map(int,input().split()))\\nList = [0]*(N+1)\\nfor i in range(1,N+1):\\n    List[i] = List[i-1] + L[i-1]\\nA = [i for i in List if i <=X]\\nprint(len(A))\", \"n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\nball = 0\\nc = 1\\nfor i in range(n):\\n    ball += l[i]\\n    if ball <= x:\\n        c += 1\\n    else:\\n        break\\nprint(c)\", \"\\nN, X = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\ncnt = 1\\ntotal = 0\\nfor i in range(N):\\n  total += L[i]\\n  if total <= X:\\n    cnt += 1\\n  else:\\n    break\\nprint(cnt)\\n\", \"N,X=map(int,input().split())\\nL=list(map(int,input().split()))\\nl=[0]\\ns=0\\nfor i in range(N):\\n   s+=L[i]\\n   if  s>X:\\n       break\\n   l.append(s)\\nprint(len(l))\", \"n, x = list(map(int, input().split()))\\n\\nl = list(map(int, input().split()))\\nans = 1\\np = 0\\nfor i in range(n):\\n    p += l[i]\\n    if (p > x):\\n        break\\n    else:\\n        ans += 1\\n\\nprint(ans)\\n\", \"N,X=list(map(int,input().split()))\\nls1=list(map(int,input().split()))\\n\\nx = 0\\nii = 1\\nfor i in ls1:\\n    x = x + i\\n    if x > X:\\n        break\\n    ii += 1\\nprint(ii)\\n\", \"n,x = map(int,input().split())\\nl = list(map(int,input().split()))\\nans = 1\\nd = [0]*(n+1)\\nfor i in range(1,n+1):\\n  d[i] = d[i-1]+l[i-1]\\n  if d[i] <= x:\\n    ans += 1\\nprint(ans)\", \"n, x = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\nif x == 0:\\n    print((0))\\n    return\\nsum = 0\\ncount = 1\\ni = 0\\nwhile i < n:\\n    sum += arr[i]\\n    i += 1\\n    if sum <= x:\\n        count += 1\\n    else:\\n        print(count)\\n        return\\nprint(count)\\n\", \"n, x = map(int,input().split())\\n\\nnum_list = list(map(int,input().split()))\\nnum_sum = 0\\ncount = 1\\n\\nfor i in range(n):\\n    num_sum += num_list[i]\\n    if num_sum>x:\\n        break\\n    count += 1\\nprint(count)\", \"n, x = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\ndist = 0\\nres = 0\\nfor i, l in enumerate(L, 1):\\n    dist += l\\n    if dist > x:\\n        print(i)\\n        return\\n    elif dist == x:\\n        print((i + 1))\\n        return\\nprint((n + 1))\\n\", \"N,X = map(int,input().split())\\nL = list(map(int,input().split()))\\n\\nD = []\\nD.append(0)\\n\\nfor i in range(0,N):\\n  D.append(D[i]+L[i])\\n\\ncnt = 0\\nfor d in D:\\n  if d <= X:\\n    cnt += 1\\n    \\nprint(cnt)\", \"N, X = map(int, input().split())\\nL = list(map(int, input().split()))\\nans = 1\\ntotal = 0\\nfor l in L:\\n    total += l\\n    if total > X: break\\n    ans += 1\\nprint(ans)\", \"a,b=map(int,input().split())\\nl=list(map(int,input().split()))\\nc=[0]\\ncount=1\\nfor i in range(a):\\n    c.append(c[i]+l[i])\\n    if(c[i+1]<=b):\\n        count+=1\\nprint(count)\", \"N, X = list(map(int, input().split()))\\nL = list(map(int, input().split()))\\n\\nnum = 1\\ns = 0\\nfor i in range(N):\\n  s += L[i]\\n  if s > X: break\\n  num += 1\\n\\nprint(num)\\n\\n\\n\", \"from typing import List\\n\\n\\ndef next_coordinates(d: int, l: int) -> int:\\n    return d + l\\n\\n\\ndef answer(n: int, x: int, l: List[int]) -> int:\\n    d = 0\\n    count = 1\\n    for i in l:\\n        d = next_coordinates(d, i)\\n        if x < d:\\n            return count\\n        count += 1\\n\\n    return count\\n\\n\\ndef main():\\n    n, x = map(int, input().split())\\n    l = list(map(int, input().split()))\\n    print(answer(n, x, l))\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"import itertools\\nimport bisect\\n\\nn, x = map(int, input().split())\\nll = list(map(int, input().split()))\\n\\ndl = [0] + list(itertools.accumulate(ll))\\n\\nprint(bisect.bisect_right(dl, x))\", \"\\nn,x = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ncnt = 1\\ntotal = 0\\n\\nfor i in range(n):\\n    total += a[i]\\n    if total <= x:\\n        cnt += 1\\nprint(cnt)\\n\", \"n,x = map(int,input().split())\\nli = list(map(int,input().split()))\\nlis = []\\nsum = 0\\nfor i in range(n):\\n    sum += li[i]\\n    lis.append(sum)\\n\\ncnt = 0\\nfor i in lis:\\n    if i <= x:\\n        cnt += 1\\n\\nprint(cnt+1)\", \"n, x = map(int, input().split())\\nfrom itertools import accumulate\\nL =[0] +  list(map(int, input().split()))\\nacc = list(accumulate(L))\\nprint(sum([1 for i in acc if i <=x]))\", \"A,B=list(map(int,input().split(' ')))\\nl=list(map(int,input().split(' ')))\\nans=0\\ncount=1\\nfor i in l:\\n    ans+=i\\n    if ans<=B:\\n        count+=1\\nprint(count)\\n\", \"N,X=map(int,input().split())\\nL=list(map(int, input().split()))\\n\\nD=0\\n\\nfor i in range(N):\\n\\tD+=L[i]\\n\\tif D>X:\\n\\t\\tprint(i+1)\\n\\t\\treturn\\n\\t\\t\\nprint(i+2)\", \"N, X = map(int, input().split())\\nL = list(map(int, input().split()))\\n\\nD = 0\\ncnt = 1\\nfor l in L:\\n    D = D + l\\n    if D > X:\\n        break\\n    cnt +=1\\n\\nprint(cnt)\", \"n,x = map(int,input().split())\\nl = list(map(int,input().split()))\\nwa = 0\\nd = [0]*(n+3)\\nd[1]=0\\nd.pop(0)\\nwa = 1\\nfor i in range(2,n+2):\\n  d[i]=d[i-1]+l[i-2]\\n  if(d[i]>x):\\n    break\\n  wa+=1\\nprint(wa)\", \"N, X = [int(i) for i in input().split()]\\nLS = [int(i) for i in input().split()]\\n\\ns = 0\\ncnt = 1\\n\\nfor l in LS:\\n  s += l\\n  if s <= X:\\n    cnt += 1\\n  else:\\n    break\\n\\nprint(cnt)\\n\", \"n, x = map(int, input().split())\\nl = list(map(int, input().split()))\\na = 1\\nd = 0\\nfor i in range(n):\\n    d += l[i]\\n    if d <= x:\\n        a += 1\\nprint(a)\"]", "task": "apps", "difficulty": "introductory", "split": "test", "transformation_type": "plain_summary"}