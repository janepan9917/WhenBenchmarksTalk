{"qid": "ClassEval_66", "orig_input": "class NumericEntityUnescaper:\n    \"\"\"\n    This is a class that provides functionality to replace numeric entities with their corresponding characters in a given string.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def replace(self, string):\n        \"\"\"\n        Replaces numeric character references (HTML entities) in the input string with their corresponding Unicode characters.\n        :param string: str, the input string containing numeric character references.\n        :return: str, the input string with numeric character references replaced with their corresponding Unicode characters.\n        >>> unescaper = NumericEntityUnescaper()\n        >>> unescaper.replace(\"&#65;&#66;&#67;\")\n        'ABC'\n\n        \"\"\"\n\n\n    @staticmethod\n    def is_hex_char(char):\n        \"\"\"\n        Determines whether a given character is a hexadecimal digit.\n        :param char: str, the character to check.\n        :return: bool, True if the character is a hexadecimal digit, False otherwise.\n        >>> NumericEntityUnescaper.is_hex_char('a')\n        True\n\n        \"\"\"", "input": "class NumericEntityUnescaper:\n    \"\"\"\n    This is a class that provides functionality to replace numeric entities with their corresponding characters in a given string.\n    \"\"\"\n\n    def __init__(self):\n        pass\n\n    def replace(self, string):\n        \"\"\"Converts numeric character references in a string to their corresponding Unicode characters.\"\"\"\n\n\n    @staticmethod\n    def is_hex_char(char):\n        \"\"\"Determines if a given character is a hexadecimal digit, returning a boolean result.\"\"\"", "method_info": [{"method_name": "replace", "method_description": "def replace(self, string):\n        \"\"\"\n        Replaces numeric character references (HTML entities) in the input string with their corresponding Unicode characters.\n        :param string: str, the input string containing numeric character references.\n        :return: str, the input string with numeric character references replaced with their corresponding Unicode characters.\n        >>> unescaper = NumericEntityUnescaper()\n        >>> unescaper.replace(\"&#65;&#66;&#67;\")\n        'ABC'\n\n        \"\"\"", "test_class": "NumericEntityUnescaperTestReplace", "test_code": "class NumericEntityUnescaperTestReplace(unittest.TestCase):\n    def test_replace_1(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#65;&#66;&#67;\")\n        self.assertEqual(res, \"ABC\")\n\n    def test_replace_2(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#65;&#65;&#65;\")\n        self.assertEqual(res, \"AAA\")\n\n    def test_replace_3(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#66;&#66;&#66;\")\n        self.assertEqual(res, \"BBB\")\n\n    def test_replace_4(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#67;&#67;&#67;\")\n        self.assertEqual(res, \"CCC\")\n\n    def test_replace_5(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_6(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_7(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#X65;&#66;&#67;\")\n        self.assertEqual(res, \"eBC\")\n\n    def test_replace_8(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#???;&#66;&#67;\")\n        self.assertEqual(res, \"&#???;BC\")\n\n    def test_replace_9(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#67;&#67;&#67;;\")\n        self.assertEqual(res, \"CCC\")\n\n    def test_replace_10(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#X\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_11(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#c1d;&#66;&#67;\")\n        self.assertEqual(res, \"\")", "solution_code": "def replace(self, string):\n        out = []\n        pos = 0\n        length = len(string)\n\n        while pos < length - 2:\n            if string[pos] == '&' and string[pos + 1] == '#':\n                start = pos + 2\n                is_hex = False\n                first_char = string[start]\n\n                if first_char == 'x' or first_char == 'X':\n                    start += 1\n                    is_hex = True\n\n                if start == length:\n                    return ''.join(out)\n\n                end = start\n                while end < length and self.is_hex_char(string[end]):\n                    end += 1\n\n                if end < length and string[end] == ';':\n                    try:\n                        entity_value = int(string[start:end], 16 if is_hex else 10)\n                    except:\n                        return ''.join(out)\n\n                    out.append(chr(entity_value))\n                    pos = end + 1\n                    continue\n\n            out.append(string[pos])\n            pos += 1\n\n        return ''.join(out)", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": [], "method_dependencies": ["is_hex_char"]}}, {"method_name": "is_hex_char", "method_description": "@staticmethod\n    def is_hex_char(char):\n        \"\"\"\n        Determines whether a given character is a hexadecimal digit.\n        :param char: str, the character to check.\n        :return: bool, True if the character is a hexadecimal digit, False otherwise.\n        >>> NumericEntityUnescaper.is_hex_char('a')\n        True\n\n        \"\"\"", "test_class": "NumericEntityUnescaperTestIsHexChar", "test_code": "class NumericEntityUnescaperTestIsHexChar(unittest.TestCase):\n    def test_is_hex_char_1(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('0')\n        self.assertEqual(res, True)\n\n    def test_is_hex_char_2(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('F')\n        self.assertEqual(res, True)\n\n    def test_is_hex_char_3(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('G')\n        self.assertEqual(res, False)\n\n    def test_is_hex_char_4(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('X')\n        self.assertEqual(res, False)\n\n    def test_is_hex_char_5(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('Z')\n        self.assertEqual(res, False)", "solution_code": "@staticmethod\n    def is_hex_char(char):\n        return char.isdigit() or ('a' <= char.lower() <= 'f')", "dependencies": {"Standalone": true, "lib_dependencies": [], "field_dependencies": [], "method_dependencies": []}}], "test_cases": "import unittest\n\n\nclass NumericEntityUnescaperTestReplace(unittest.TestCase):\n    def test_replace_1(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#65;&#66;&#67;\")\n        self.assertEqual(res, \"ABC\")\n\n    def test_replace_2(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#65;&#65;&#65;\")\n        self.assertEqual(res, \"AAA\")\n\n    def test_replace_3(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#66;&#66;&#66;\")\n        self.assertEqual(res, \"BBB\")\n\n    def test_replace_4(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#67;&#67;&#67;\")\n        self.assertEqual(res, \"CCC\")\n\n    def test_replace_5(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_6(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_7(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#X65;&#66;&#67;\")\n        self.assertEqual(res, \"eBC\")\n\n    def test_replace_8(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#???;&#66;&#67;\")\n        self.assertEqual(res, \"&#???;BC\")\n\n    def test_replace_9(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#67;&#67;&#67;;\")\n        self.assertEqual(res, \"CCC\")\n\n    def test_replace_10(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#X\")\n        self.assertEqual(res, \"\")\n\n    def test_replace_11(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#c1d;&#66;&#67;\")\n        self.assertEqual(res, \"\")\n\n\nclass NumericEntityUnescaperTestIsHexChar(unittest.TestCase):\n    def test_is_hex_char_1(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('0')\n        self.assertEqual(res, True)\n\n    def test_is_hex_char_2(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('F')\n        self.assertEqual(res, True)\n\n    def test_is_hex_char_3(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('G')\n        self.assertEqual(res, False)\n\n    def test_is_hex_char_4(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('X')\n        self.assertEqual(res, False)\n\n    def test_is_hex_char_5(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('Z')\n        self.assertEqual(res, False)\n\n\nclass unescaperTest(unittest.TestCase):\n    def test_numericentityunescaper(self):\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.replace(\"&#65;&#66;&#67;\")\n        self.assertEqual(res, \"ABC\")\n\n        unescaper = NumericEntityUnescaper()\n        res = unescaper.is_hex_char('0')\n        self.assertEqual(res, True)", "solutions": ["class NumericEntityUnescaper:\n    def __init__(self):\n        pass\n\n    def replace(self, string):\n        out = []\n        pos = 0\n        length = len(string)\n\n        while pos < length - 2:\n            if string[pos] == '&' and string[pos + 1] == '#':\n                start = pos + 2\n                is_hex = False\n                first_char = string[start]\n\n                if first_char == 'x' or first_char == 'X':\n                    start += 1\n                    is_hex = True\n\n                if start == length:\n                    return ''.join(out)\n\n                end = start\n                while end < length and self.is_hex_char(string[end]):\n                    end += 1\n\n                if end < length and string[end] == ';':\n                    try:\n                        entity_value = int(string[start:end], 16 if is_hex else 10)\n                    except:\n                        return ''.join(out)\n\n                    out.append(chr(entity_value))\n                    pos = end + 1\n                    continue\n\n            out.append(string[pos])\n            pos += 1\n\n        return ''.join(out)\n\n    @staticmethod\n    def is_hex_char(char):\n        return char.isdigit() or ('a' <= char.lower() <= 'f')"], "task": "class_eval", "split": "test", "transformation_type": "func_summary", "import_statement": [], "test_classes": ["NumericEntityUnescaperTestReplace", "NumericEntityUnescaperTestIsHexChar", "unescaperTest"]}