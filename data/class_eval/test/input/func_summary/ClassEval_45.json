{"qid": "ClassEval_45", "orig_input": "from PIL import Image, ImageEnhance\n\nclass ImageProcessor:\n    \"\"\"\n    This is a class to process image, including loading, saving, resizing, rotating, and adjusting the brightness of images.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize self.image\n        \"\"\"\n        self.image = None\n\n    def load_image(self, image_path):\n        \"\"\"\n        Use Image util in PIL to open a image\n        :param image_path: str, path of image that is to be\n        >>> processor.load_image('test.jpg')\n        >>> processor.image\n        <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=3072x4096 at 0x194F2412A48>\n        \"\"\"\n\n    def save_image(self, save_path):\n        \"\"\"\n        Save image to a path if image has opened\n        :param save_path: str, the path that the image will be saved\n        >>> processor.load_image('test.jpg')\n        >>> processor.save_image('test2.jpg')\n        \"\"\"\n\n    def resize_image(self, width, height):\n        \"\"\"\n        Risize the image if image has opened.\n        :param width: int, the target width of image\n        :param height: int, the target height of image\n        >>> processor.load_image('test.jpg')\n        >>> processor.resize_image(300, 300)\n        >>> processor.image.width\n        300\n        >>> processor.image.height\n        300\n        \"\"\"\n\n    def rotate_image(self, degrees):\n        \"\"\"\n        rotate image if image has opened\n        :param degrees: float, the degrees that the image will be rotated\n        >>> processor.load_image('test.jpg')\n        >>> processor.resize_image(90)\n        \"\"\"\n\n    def adjust_brightness(self, factor):\n        \"\"\"\n        Adjust the brightness of image if image has opened.\n        :param factor: float, brightness of an image. A factor of 0.0 gives a black image. A factor of 1.0 gives the original image.\n        >>> processor.load_image('test.jpg')\n        >>> processor.adjust_brightness(0.5)\n        \"\"\"", "input": "from PIL import Image, ImageEnhance\n\nclass ImageProcessor:\n    \"\"\"\n    This is a class to process image, including loading, saving, resizing, rotating, and adjusting the brightness of images.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize self.image\n        \"\"\"\n        self.image = None\n\n    def load_image(self, image_path):\n        \"\"\"The method opens an image file using PIL's Image utility and stores it in the object.\"\"\"\n\n    def save_image(self, save_path):\n        \"\"\"Saves an opened image to a specified file path.\"\"\"\n\n    def resize_image(self, width, height):\n        \"\"\"Resizes an opened image to specified width and height dimensions.\"\"\"\n\n    def rotate_image(self, degrees):\n        \"\"\"Rotates an opened image by a specified number of degrees.\"\"\"\n\n    def adjust_brightness(self, factor):\n        \"\"\"Adjusts image brightness using a factor between 0 (black) and 1 (original) if image is open.\"\"\"", "method_info": [{"method_name": "load_image", "method_description": "def load_image(self, image_path):\n        \"\"\"\n        Use Image util in PIL to open a image\n        :param image_path: str, path of image that is to be\n        >>> processor.load_image('test.jpg')\n        >>> processor.image\n        <PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=3072x4096 at 0x194F2412A48>\n        \"\"\"", "test_class": "ImageProcessorTestLoadImage", "test_code": "class ImageProcessorTestLoadImage(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n        # if os.path.exists(self.image_path):\n        #     os.remove(self.image_path)\n\n    def test_load_image(self):\n        self.processor.load_image(self.image_path)\n        self.assertIsNotNone(self.processor.image)\n\n    def test_load_image_2(self):\n        self.processor.load_image(self.image_path)\n        self.assertEqual(self.processor.image.size, (100, 100))\n\n    def test_load_image_3(self):\n        self.processor.load_image(self.image_path)\n        self.assertEqual(self.processor.image.mode, \"RGB\")\n\n    def test_load_image_4(self):\n        self.processor.load_image(self.image_path)\n        self.assertEqual(self.processor.image.format, \"PNG\")\n\n    def test_load_image_5(self):\n        self.processor.load_image(self.image_path)\n        self.assertEqual(self.processor.image.filename, self.image_path)", "solution_code": "def load_image(self, image_path):\n        self.image = Image.open(image_path)", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.image"], "method_dependencies": []}}, {"method_name": "save_image", "method_description": "def save_image(self, save_path):\n        \"\"\"\n        Save image to a path if image has opened\n        :param save_path: str, the path that the image will be saved\n        >>> processor.load_image('test.jpg')\n        >>> processor.save_image('test2.jpg')\n        \"\"\"", "test_class": "ImageProcessorTestSaveImage", "test_code": "class ImageProcessorTestSaveImage(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_save_image(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertIsNotNone(saved_image)\n\n    def test_save_image_2(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertEqual(saved_image.size, (100, 100))\n\n    def test_save_image_3(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertEqual(saved_image.mode, \"RGB\")\n\n    def test_save_image_4(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertEqual(saved_image.format, \"PNG\")\n\n    def test_save_image_5(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertEqual(saved_image.filename, save_path)", "solution_code": "def save_image(self, save_path):\n        if self.image:\n            self.image.save(save_path)", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.image"], "method_dependencies": []}}, {"method_name": "resize_image", "method_description": "def resize_image(self, width, height):\n        \"\"\"\n        Risize the image if image has opened.\n        :param width: int, the target width of image\n        :param height: int, the target height of image\n        >>> processor.load_image('test.jpg')\n        >>> processor.resize_image(300, 300)\n        >>> processor.image.width\n        300\n        >>> processor.image.height\n        300\n        \"\"\"", "test_class": "ImageProcessorTestResizeImage", "test_code": "class ImageProcessorTestResizeImage(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_resize_image(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(30, 15)\n        self.assertEqual(self.processor.image.size, (30, 15))\n\n    def test_resize_image_2(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(30, 15)\n        self.assertEqual(self.processor.image.mode, \"RGB\")\n\n    def test_resize_image_3(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(30, 15)\n        self.assertEqual(self.processor.image.format, None)\n\n    def test_resize_image_4(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(40, 20)\n        self.assertEqual(self.processor.image.mode, \"RGB\")\n\n    def test_resize_image_5(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(50, 25)\n        self.assertEqual(self.processor.image.format, None)", "solution_code": "def resize_image(self, width, height):\n        if self.image:\n            self.image = self.image.resize((width, height))", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.image"], "method_dependencies": []}}, {"method_name": "rotate_image", "method_description": "def rotate_image(self, degrees):\n        \"\"\"\n        rotate image if image has opened\n        :param degrees: float, the degrees that the image will be rotated\n        >>> processor.load_image('test.jpg')\n        >>> processor.resize_image(90)\n        \"\"\"", "test_class": "ImageProcessorTestRotateImage", "test_code": "class ImageProcessorTestRotateImage(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_rotate_image(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(90)\n        self.assertTrue(ImageChops.difference(original_image.rotate(90), self.processor.image).getbbox() is None)\n\n    def test_rotate_image_2(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(180)\n        self.assertTrue(ImageChops.difference(original_image.rotate(180), self.processor.image).getbbox() is None)\n\n    def test_rotate_image_3(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(270)\n        self.assertTrue(ImageChops.difference(original_image.rotate(270), self.processor.image).getbbox() is None)\n\n    def test_rotate_image_4(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(360)\n        self.assertTrue(ImageChops.difference(original_image.rotate(360), self.processor.image).getbbox() is None)\n\n    def test_rotate_image_5(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(45)\n        self.assertTrue(ImageChops.difference(original_image.rotate(45), self.processor.image).getbbox() is None)", "solution_code": "def rotate_image(self, degrees):\n        if self.image:\n            self.image = self.image.rotate(degrees)", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.image"], "method_dependencies": []}}, {"method_name": "adjust_brightness", "method_description": "def adjust_brightness(self, factor):\n        \"\"\"\n        Adjust the brightness of image if image has opened.\n        :param factor: float, brightness of an image. A factor of 0.0 gives a black image. A factor of 1.0 gives the original image.\n        >>> processor.load_image('test.jpg')\n        >>> processor.adjust_brightness(0.5)\n        \"\"\"", "test_class": "ImageProcessorTestAdjustBrightness", "test_code": "class ImageProcessorTestAdjustBrightness(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_adjust_brightness(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(0.3)\n        self.processor.adjust_brightness(0.3)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n    def test_adjust_brightness_2(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(0.5)\n        self.processor.adjust_brightness(0.5)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n    def test_adjust_brightness_3(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(0.7)\n        self.processor.adjust_brightness(0.7)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n    def test_adjust_brightness_4(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(1.0)\n        self.processor.adjust_brightness(1.0)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n    def test_adjust_brightness_5(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(1.5)\n        self.processor.adjust_brightness(1.5)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)", "solution_code": "def adjust_brightness(self, factor):\n        if self.image:\n            enhancer = ImageEnhance.Brightness(self.image)\n            self.image = enhancer.enhance(factor)", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.image"], "method_dependencies": []}}], "test_cases": "import unittest\nimport os\n\n\nclass ImageProcessorTestLoadImage(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n        # if os.path.exists(self.image_path):\n        #     os.remove(self.image_path)\n\n    def test_load_image(self):\n        self.processor.load_image(self.image_path)\n        self.assertIsNotNone(self.processor.image)\n\n    def test_load_image_2(self):\n        self.processor.load_image(self.image_path)\n        self.assertEqual(self.processor.image.size, (100, 100))\n\n    def test_load_image_3(self):\n        self.processor.load_image(self.image_path)\n        self.assertEqual(self.processor.image.mode, \"RGB\")\n\n    def test_load_image_4(self):\n        self.processor.load_image(self.image_path)\n        self.assertEqual(self.processor.image.format, \"PNG\")\n\n    def test_load_image_5(self):\n        self.processor.load_image(self.image_path)\n        self.assertEqual(self.processor.image.filename, self.image_path)\n\n\nclass ImageProcessorTestSaveImage(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_save_image(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertIsNotNone(saved_image)\n\n    def test_save_image_2(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertEqual(saved_image.size, (100, 100))\n\n    def test_save_image_3(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertEqual(saved_image.mode, \"RGB\")\n\n    def test_save_image_4(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertEqual(saved_image.format, \"PNG\")\n\n    def test_save_image_5(self):\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.load_image(self.image_path)\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertEqual(saved_image.filename, save_path)\n\n\nclass ImageProcessorTestResizeImage(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_resize_image(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(30, 15)\n        self.assertEqual(self.processor.image.size, (30, 15))\n\n    def test_resize_image_2(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(30, 15)\n        self.assertEqual(self.processor.image.mode, \"RGB\")\n\n    def test_resize_image_3(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(30, 15)\n        self.assertEqual(self.processor.image.format, None)\n\n    def test_resize_image_4(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(40, 20)\n        self.assertEqual(self.processor.image.mode, \"RGB\")\n\n    def test_resize_image_5(self):\n        self.processor.load_image(self.image_path)\n        self.processor.resize_image(50, 25)\n        self.assertEqual(self.processor.image.format, None)\n\n\nclass ImageProcessorTestRotateImage(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_rotate_image(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(90)\n        self.assertTrue(ImageChops.difference(original_image.rotate(90), self.processor.image).getbbox() is None)\n\n    def test_rotate_image_2(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(180)\n        self.assertTrue(ImageChops.difference(original_image.rotate(180), self.processor.image).getbbox() is None)\n\n    def test_rotate_image_3(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(270)\n        self.assertTrue(ImageChops.difference(original_image.rotate(270), self.processor.image).getbbox() is None)\n\n    def test_rotate_image_4(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(360)\n        self.assertTrue(ImageChops.difference(original_image.rotate(360), self.processor.image).getbbox() is None)\n\n    def test_rotate_image_5(self):\n        self.processor.load_image(self.image_path)\n        original_image = self.processor.image\n        self.processor.rotate_image(45)\n        self.assertTrue(ImageChops.difference(original_image.rotate(45), self.processor.image).getbbox() is None)\n\n\nclass ImageProcessorTestAdjustBrightness(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_adjust_brightness(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(0.3)\n        self.processor.adjust_brightness(0.3)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n    def test_adjust_brightness_2(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(0.5)\n        self.processor.adjust_brightness(0.5)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n    def test_adjust_brightness_3(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(0.7)\n        self.processor.adjust_brightness(0.7)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n    def test_adjust_brightness_4(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(1.0)\n        self.processor.adjust_brightness(1.0)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n    def test_adjust_brightness_5(self):\n        self.processor.load_image(self.image_path)\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(1.5)\n        self.processor.adjust_brightness(1.5)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n\nclass ImageProcessorTestMain(unittest.TestCase):\n    def setUp(self):\n        self.processor = ImageProcessor()\n        self.image_path = os.path.join(os.path.dirname(__file__), \"test.png\")\n        image = Image.new(\"RGB\", (100, 100), (255, 255, 255))\n        image.save(self.image_path)\n\n    def tearDown(self):\n        self.processor.image.close()\n\n    def test_main(self):\n        self.processor.load_image(self.image_path)\n        self.assertIsNotNone(self.processor.image)\n\n        enhancer = ImageEnhance.Brightness(Image.open(self.image_path))\n        expected_image = enhancer.enhance(0.4)\n        self.processor.adjust_brightness(0.4)\n        self.assertTrue(ImageChops.difference(expected_image, self.processor.image).getbbox() is None)\n\n        self.processor.resize_image(30, 15)\n        self.assertEqual(self.processor.image.size, (30, 15))\n\n        original_image = self.processor.image\n        self.processor.rotate_image(90)\n        self.assertTrue(ImageChops.difference(original_image.rotate(90), self.processor.image).getbbox() is None)\n\n        save_path = os.path.join(os.path.dirname(__file__), \"test_save.png\")\n        self.processor.save_image(save_path)\n        saved_image = Image.open(save_path)\n        self.assertIsNotNone(saved_image)\n        saved_image.close()", "solutions": ["from PIL import Image, ImageEnhance, ImageChops\n\n\nclass ImageProcessor:\n    def __init__(self):\n        self.image = None\n\n    def load_image(self, image_path):\n        self.image = Image.open(image_path)\n\n    def save_image(self, save_path):\n        if self.image:\n            self.image.save(save_path)\n\n    def resize_image(self, width, height):\n        if self.image:\n            self.image = self.image.resize((width, height))\n\n    def rotate_image(self, degrees):\n        if self.image:\n            self.image = self.image.rotate(degrees)\n\n    def adjust_brightness(self, factor):\n        if self.image:\n            enhancer = ImageEnhance.Brightness(self.image)\n            self.image = enhancer.enhance(factor)"], "task": "class_eval", "split": "test", "transformation_type": "func_summary", "import_statement": ["from PIL import Image, ImageEnhance, ImageChops"], "test_classes": ["ImageProcessorTestLoadImage", "ImageProcessorTestSaveImage", "ImageProcessorTestResizeImage", "ImageProcessorTestRotateImage", "ImageProcessorTestAdjustBrightness", "ImageProcessorTestMain"]}