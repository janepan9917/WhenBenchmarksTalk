{"qid": "ClassEval_94", "orig_input": "class VendingMachine:\n    \"\"\"\n    This is a class to simulate a vending machine, including adding products, inserting coins, purchasing products, viewing balance, replenishing product inventory, and displaying product information.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the vending machine's inventory and balance.\n        \"\"\"\n        self.inventory = {}\n        self.balance = 0\n\n    def add_item(self, item_name, price, quantity):\n        \"\"\"\n        Adds a product to the vending machine's inventory.\n        :param item_name: The name of the product to be added, str.\n        :param price: The price of the product to be added, float.\n        :param quantity: The quantity of the product to be added, int.\n        :return: None\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.add_item('Coke', 1.25, 10)\n        >>> vendingMachine.inventory\n        {'Coke': {'price': 1.25, 'quantity': 10}}\n\n        \"\"\"\n\n    def insert_coin(self, amount):\n        \"\"\"\n        Inserts coins into the vending machine.\n        :param amount: The amount of coins to be inserted, float.\n        :return: The balance of the vending machine after the coins are inserted, float.\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.insert_coin(1.25)\n        1.25\n\n        \"\"\"\n\n    def purchase_item(self, item_name):\n        \"\"\"\n        Purchases a product from the vending machine and returns the balance after the purchase and display purchase unsuccessful if the product is out of stock.\n        :param item_name: The name of the product to be purchased, str.\n        :return: If successful, returns the balance of the vending machine after the product is purchased, float,otherwise,returns False.\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        >>> vendingMachine.balance = 1.25\n        >>> vendingMachine.purchase_item('Coke')\n        0.0\n        >>> vendingMachine.purchase_item('Pizza')\n        False\n\n        \"\"\"\n\n    def restock_item(self, item_name, quantity):\n        \"\"\"\n        Replenishes the inventory of a product already in the vending machine.\n        :param item_name: The name of the product to be replenished, str.\n        :param quantity: The quantity of the product to be replenished, int.\n        :return: If the product is already in the vending machine, returns True, otherwise, returns False.\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        >>> vendingMachine.restock_item('Coke', 10)\n        True\n        >>> vendingMachine.restock_item('Pizza', 10)\n        False\n\n        \"\"\"\n\n    def display_items(self):\n        \"\"\"\n        Displays the products in the vending machine.\n        :return: If the vending machine is empty, returns False, otherwise, returns a list of the products in the vending machine, str.\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.display_items()\n        False\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10} }\n        >>> vendingMachine.display_items()\n        'Coke - $1.25 [10]'\n\n        \"\"\"", "input": "class VendingMachine:\n    \"\"\"\n    This is a class to simulate a vending machine, including adding products, inserting coins, purchasing products, viewing balance, replenishing product inventory, and displaying product information.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initializes the vending machine's inventory and balance.\n        \"\"\"\n        self.inventory = {}\n        self.balance = 0\n\n    def add_item(self, item_name, price, quantity):\n        \"\"\"Adds a product to the vending machine's inventory with specified name, price, and quantity.\"\"\"\n\n    def insert_coin(self, amount):\n        \"\"\"Inserts coins into the vending machine and returns the updated balance.\"\"\"\n\n    def purchase_item(self, item_name):\n        \"\"\"Purchases item from vending machine, returns balance if successful or False if unsuccessful due to unavailability.\"\"\"\n\n    def restock_item(self, item_name, quantity):\n        \"\"\"Replenishes existing product inventory in vending machine, returning True if successful or False if product doesn't exist.\"\"\"\n\n    def display_items(self):\n        \"\"\"Displays vending machine products, returning False if empty or a list of products otherwise.\"\"\"", "method_info": [{"method_name": "add_item", "method_description": "def add_item(self, item_name, price, quantity):\n        \"\"\"\n        Adds a product to the vending machine's inventory.\n        :param item_name: The name of the product to be added, str.\n        :param price: The price of the product to be added, float.\n        :param quantity: The quantity of the product to be added, int.\n        :return: None\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.add_item('Coke', 1.25, 10)\n        >>> vendingMachine.inventory\n        {'Coke': {'price': 1.25, 'quantity': 10}}\n\n        \"\"\"", "test_class": "VendingMachineTestAddItem", "test_code": "class VendingMachineTestAddItem(unittest.TestCase):\n    def test_add_item(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_add_item_2(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        vendingMachine.add_item('Coke', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 20}})\n\n    def test_add_item_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}})\n\n    def test_add_item_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 20}})\n\n    def test_add_item_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        vendingMachine.add_item('Coke', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 20}, 'Pizza': {'price': 1.25, 'quantity': 20}})", "solution_code": "def add_item(self, item_name, price, quantity):\n        if not self.restock_item(item_name, quantity):\n            self.inventory[item_name] = {'price': price, 'quantity': quantity}", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.inventory"], "method_dependencies": ["restock_item"]}}, {"method_name": "insert_coin", "method_description": "def insert_coin(self, amount):\n        \"\"\"\n        Inserts coins into the vending machine.\n        :param amount: The amount of coins to be inserted, float.\n        :return: The balance of the vending machine after the coins are inserted, float.\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.insert_coin(1.25)\n        1.25\n\n        \"\"\"", "test_class": "VendingMachineTestInsertCoin", "test_code": "class VendingMachineTestInsertCoin(unittest.TestCase):\n    def test_insert_coin(self):\n        vendingMachine = VendingMachine()\n        self.assertEqual(vendingMachine.insert_coin(1.25), 1.25)\n\n    def test_insert_coin_2(self):\n        vendingMachine = VendingMachine()\n        self.assertEqual(vendingMachine.insert_coin(2.5), 2.5)\n\n    def test_insert_coin_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        self.assertEqual(vendingMachine.balance, 2.50)\n\n    def test_insert_coin_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.balance = 1.25\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        self.assertEqual(vendingMachine.balance, 5.0)\n\n    def test_insert_coin_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.balance = 1.25\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        self.assertEqual(vendingMachine.balance, 6.25)", "solution_code": "def insert_coin(self, amount):\n        self.balance += amount\n        return self.balance", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.balance"], "method_dependencies": []}}, {"method_name": "purchase_item", "method_description": "def purchase_item(self, item_name):\n        \"\"\"\n        Purchases a product from the vending machine and returns the balance after the purchase and display purchase unsuccessful if the product is out of stock.\n        :param item_name: The name of the product to be purchased, str.\n        :return: If successful, returns the balance of the vending machine after the product is purchased, float,otherwise,returns False.\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        >>> vendingMachine.balance = 1.25\n        >>> vendingMachine.purchase_item('Coke')\n        0.0\n        >>> vendingMachine.purchase_item('Pizza')\n        False\n\n        \"\"\"", "test_class": "VendingMachineTestPurchaseItem", "test_code": "class VendingMachineTestPurchaseItem(unittest.TestCase):\n    def test_purchase_item(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        vendingMachine.balance = 1.25\n        self.assertEqual(vendingMachine.purchase_item('Coke'), 0.0)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 9}})\n\n    def test_purchase_item_2(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        vendingMachine.balance = 1.25\n        self.assertEqual(vendingMachine.purchase_item('Pizza'), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_purchase_item_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        vendingMachine.balance = 0\n        self.assertEqual(vendingMachine.purchase_item('Coke'), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_purchase_item_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}}\n        vendingMachine.balance = 1.25\n        self.assertEqual(vendingMachine.purchase_item('Coke'), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 0}})\n\n    def test_purchase_item_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        vendingMachine.balance = 1.25\n        self.assertEqual(vendingMachine.purchase_item('Pizza'), 0.0)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 9}})", "solution_code": "def purchase_item(self, item_name):\n        if item_name in self.inventory:\n            item = self.inventory[item_name]\n            if item['quantity'] > 0 and self.balance >= item['price']:\n                self.balance -= item['price']\n                item['quantity'] -= 1\n                return self.balance\n            else:\n                return False\n        else:\n            return False", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.balance", "self.inventory"], "method_dependencies": []}}, {"method_name": "restock_item", "method_description": "def restock_item(self, item_name, quantity):\n        \"\"\"\n        Replenishes the inventory of a product already in the vending machine.\n        :param item_name: The name of the product to be replenished, str.\n        :param quantity: The quantity of the product to be replenished, int.\n        :return: If the product is already in the vending machine, returns True, otherwise, returns False.\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        >>> vendingMachine.restock_item('Coke', 10)\n        True\n        >>> vendingMachine.restock_item('Pizza', 10)\n        False\n\n        \"\"\"", "test_class": "VendingMachineTestRestockItem", "test_code": "class VendingMachineTestRestockItem(unittest.TestCase):\n    def test_restock_item(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.restock_item('Coke', 10), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 20}})\n\n    def test_restock_item_2(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.restock_item('Pizza', 10), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_restock_item_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}}\n        self.assertEqual(vendingMachine.restock_item('Coke', 10), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_restock_item_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.restock_item('Pizza', 10), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 20}})\n\n    def test_restock_item_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.restock_item('Pizza', 0), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}})", "solution_code": "def restock_item(self, item_name, quantity):\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] += quantity\n            return True\n        else:\n            return False", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.inventory"], "method_dependencies": []}}, {"method_name": "display_items", "method_description": "def display_items(self):\n        \"\"\"\n        Displays the products in the vending machine.\n        :return: If the vending machine is empty, returns False, otherwise, returns a list of the products in the vending machine, str.\n        >>> vendingMachine = VendingMachine()\n        >>> vendingMachine.display_items()\n        False\n        >>> vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10} }\n        >>> vendingMachine.display_items()\n        'Coke - $1.25 [10]'\n\n        \"\"\"", "test_class": "VendingMachineTestDisplayItems", "test_code": "class VendingMachineTestDisplayItems(unittest.TestCase):\n    def test_display_items(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.display_items(), 'Coke - $1.25 [10]')\n\n    def test_display_items_2(self):\n        vendingMachine = VendingMachine()\n        self.assertEqual(vendingMachine.display_items(), False)\n\n    def test_display_items_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.display_items(),\"Coke - $1.25 [10]\\nPizza - $1.25 [10]\")\n\n    def test_display_items_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}}\n        self.assertEqual(vendingMachine.display_items(), 'Coke - $1.25 [0]')\n\n    def test_display_items_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.display_items(), 'Coke - $1.25 [0]\\nPizza - $1.25 [10]')", "solution_code": "def display_items(self):\n        if not self.inventory:\n            return False\n        else:\n            items = []\n            for item_name, item_info in self.inventory.items():\n                items.append(f\"{item_name} - ${item_info['price']} [{item_info['quantity']}]\")\n            return \"\\n\".join(items)", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.inventory"], "method_dependencies": []}}], "test_cases": "import unittest\nclass VendingMachineTestAddItem(unittest.TestCase):\n    def test_add_item(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_add_item_2(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        vendingMachine.add_item('Coke', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 20}})\n\n    def test_add_item_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}})\n\n    def test_add_item_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 20}})\n\n    def test_add_item_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.add_item('Coke', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        vendingMachine.add_item('Pizza', 1.25, 10)\n        vendingMachine.add_item('Coke', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 20}, 'Pizza': {'price': 1.25, 'quantity': 20}})\n\nclass VendingMachineTestInsertCoin(unittest.TestCase):\n    def test_insert_coin(self):\n        vendingMachine = VendingMachine()\n        self.assertEqual(vendingMachine.insert_coin(1.25), 1.25)\n\n    def test_insert_coin_2(self):\n        vendingMachine = VendingMachine()\n        self.assertEqual(vendingMachine.insert_coin(2.5), 2.5)\n\n    def test_insert_coin_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        self.assertEqual(vendingMachine.balance, 2.50)\n\n    def test_insert_coin_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.balance = 1.25\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        self.assertEqual(vendingMachine.balance, 5.0)\n\n    def test_insert_coin_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.balance = 1.25\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        vendingMachine.insert_coin(1.25)\n        self.assertEqual(vendingMachine.balance, 6.25)\n\nclass VendingMachineTestPurchaseItem(unittest.TestCase):\n    def test_purchase_item(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        vendingMachine.balance = 1.25\n        self.assertEqual(vendingMachine.purchase_item('Coke'), 0.0)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 9}})\n\n    def test_purchase_item_2(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        vendingMachine.balance = 1.25\n        self.assertEqual(vendingMachine.purchase_item('Pizza'), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_purchase_item_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        vendingMachine.balance = 0\n        self.assertEqual(vendingMachine.purchase_item('Coke'), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_purchase_item_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}}\n        vendingMachine.balance = 1.25\n        self.assertEqual(vendingMachine.purchase_item('Coke'), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 0}})\n\n    def test_purchase_item_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        vendingMachine.balance = 1.25\n        self.assertEqual(vendingMachine.purchase_item('Pizza'), 0.0)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 9}})\n\nclass VendingMachineTestRestockItem(unittest.TestCase):\n    def test_restock_item(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.restock_item('Coke', 10), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 20}})\n\n    def test_restock_item_2(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.restock_item('Pizza', 10), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_restock_item_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}}\n        self.assertEqual(vendingMachine.restock_item('Coke', 10), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n\n    def test_restock_item_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.restock_item('Pizza', 10), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 20}})\n\n    def test_restock_item_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.restock_item('Pizza', 0), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}})\nclass VendingMachineTestDisplayItems(unittest.TestCase):\n    def test_display_items(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.display_items(), 'Coke - $1.25 [10]')\n\n    def test_display_items_2(self):\n        vendingMachine = VendingMachine()\n        self.assertEqual(vendingMachine.display_items(), False)\n\n    def test_display_items_3(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 10}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.display_items(),\"Coke - $1.25 [10]\\nPizza - $1.25 [10]\")\n\n    def test_display_items_4(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}}\n        self.assertEqual(vendingMachine.display_items(), 'Coke - $1.25 [0]')\n\n    def test_display_items_5(self):\n        vendingMachine = VendingMachine()\n        vendingMachine.inventory = {'Coke': {'price': 1.25, 'quantity': 0}, 'Pizza': {'price': 1.25, 'quantity': 10}}\n        self.assertEqual(vendingMachine.display_items(), 'Coke - $1.25 [0]\\nPizza - $1.25 [10]')\n\nclass VendingMachineTestMain(unittest.TestCase):\n    def test_main(self):\n        vendingMachine = VendingMachine()\n        self.assertEqual(vendingMachine.display_items(), False)\n        vendingMachine.add_item('Coke', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n        self.assertEqual(vendingMachine.insert_coin(1.25), 1.25)\n        self.assertEqual(vendingMachine.purchase_item('Coke'), 0.0)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 9}})\n        self.assertEqual(vendingMachine.purchase_item('Pizza'), False)\n        self.assertEqual(vendingMachine.restock_item('Coke', 10), True)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 19}})\n        self.assertEqual(vendingMachine.restock_item('Pizza', 10), False)\n        self.assertEqual(vendingMachine.display_items(), 'Coke - $1.25 [19]')\n\n    def test_main_2(self):\n        vendingMachine = VendingMachine()\n        self.assertEqual(vendingMachine.purchase_item('Coke'), False)\n        vendingMachine.add_item('Coke', 1.25, 10)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n        self.assertEqual(vendingMachine.restock_item('Pizza', 10), False)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 10}})\n        self.assertEqual(vendingMachine.insert_coin(1.25), 1.25)\n        self.assertEqual(vendingMachine.purchase_item('Coke'), 0.0)\n        self.assertEqual(vendingMachine.inventory, {'Coke': {'price': 1.25, 'quantity': 9}})\n        self.assertEqual(vendingMachine.display_items(), 'Coke - $1.25 [9]')", "solutions": ["class VendingMachine:\n    def __init__(self):\n        self.inventory = {}\n        self.balance = 0\n\n    def add_item(self, item_name, price, quantity):\n        if not self.restock_item(item_name, quantity):\n            self.inventory[item_name] = {'price': price, 'quantity': quantity}\n\n    def insert_coin(self, amount):\n        self.balance += amount\n        return self.balance\n\n    def purchase_item(self, item_name):\n        if item_name in self.inventory:\n            item = self.inventory[item_name]\n            if item['quantity'] > 0 and self.balance >= item['price']:\n                self.balance -= item['price']\n                item['quantity'] -= 1\n                return self.balance\n            else:\n                return False\n        else:\n            return False\n\n    def restock_item(self, item_name, quantity):\n        if item_name in self.inventory:\n            self.inventory[item_name]['quantity'] += quantity\n            return True\n        else:\n            return False\n\n    def display_items(self):\n        if not self.inventory:\n            return False\n        else:\n            items = []\n            for item_name, item_info in self.inventory.items():\n                items.append(f\"{item_name} - ${item_info['price']} [{item_info['quantity']}]\")\n            return \"\\n\".join(items)"], "task": "class_eval", "split": "test", "transformation_type": "func_summary", "import_statement": [], "test_classes": ["VendingMachineTestAddItem", "VendingMachineTestInsertCoin", "VendingMachineTestPurchaseItem", "VendingMachineTestRestockItem", "VendingMachineTestDisplayItems", "VendingMachineTestMain"]}