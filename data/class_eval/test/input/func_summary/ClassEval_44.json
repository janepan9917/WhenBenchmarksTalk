{"qid": "ClassEval_44", "orig_input": "import re\nimport string\nimport gensim\nfrom bs4 import BeautifulSoup\n\nclass HtmlUtil:\n    \"\"\"\n    This is a class as util for html, supporting for formatting and extracting code from HTML text, including cleaning up the text and converting certain elements into specific marks.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize a series of labels\n        \"\"\"\n        self.SPACE_MARK = '-SPACE-'\n        self.JSON_MARK = '-JSON-'\n        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'\n        self.URL_MARK = '-URL-'\n        self.NUMBER_MARK = '-NUMBER-'\n        self.TRACE_MARK = '-TRACE-'\n        self.COMMAND_MARK = '-COMMAND-'\n        self.COMMENT_MARK = '-COMMENT-'\n        self.CODE_MARK = '-CODE-'\n\n    @staticmethod\n    def __format_line_feed(text):\n        \"\"\"\n        Replace consecutive line breaks with a single line break\n        :param text: string with consecutive line breaks\n        :return:string, replaced text with single line break\n        \"\"\"\n\n    def format_line_html_text(self, html_text):\n        \"\"\"\n        get the html text without the code, and add the code tag -CODE- where the code is\n        :param html_text:string\n        :return:string\n        >>>htmlutil = HtmlUtil()\n        >>>htmlutil.format_line_html_text(<html>\n        >>> <body>\n        >>>    <h1>Title</h1>\n        >>>    <p>This is a paragraph.</p>\n        >>>    <pre>print('Hello, world!')</pre>\n        >>>    <p>Another paragraph.</p>\n        >>>    <pre><code>for i in range(5):\n        >>>    print(i)</code></pre>\n        >>>    </body>\n        >>>    </html>)\n        Title\n        This is a paragraph.\n        -CODE-\n        Another paragraph.\n        -CODE-\n        \"\"\"\n\n    def extract_code_from_html_text(self, html_text):\n        \"\"\"\n        extract codes from the html body\n        :param html_text: string, html text\n        :return: the list of code\n        >>>htmlutil = HtmlUtil()\n        >>>htmlutil.extract_code_from_html_text(<html>\n        >>> <body>\n        >>>    <h1>Title</h1>\n        >>>    <p>This is a paragraph.</p>\n        >>>    <pre>print('Hello, world!')</pre>\n        >>>    <p>Another paragraph.</p>\n        >>>    <pre><code>for i in range(5):\n        >>>    print(i)</code></pre>\n        >>>    </body>\n        >>>    </html>)\n        [\"print('Hello, world!')\", 'for i in range(5):\\n                print(i)']\n        \"\"\"", "input": "import re\nimport string\nimport gensim\nfrom bs4 import BeautifulSoup\n\nclass HtmlUtil:\n    \"\"\"\n    This is a class as util for html, supporting for formatting and extracting code from HTML text, including cleaning up the text and converting certain elements into specific marks.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize a series of labels\n        \"\"\"\n        self.SPACE_MARK = '-SPACE-'\n        self.JSON_MARK = '-JSON-'\n        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'\n        self.URL_MARK = '-URL-'\n        self.NUMBER_MARK = '-NUMBER-'\n        self.TRACE_MARK = '-TRACE-'\n        self.COMMAND_MARK = '-COMMAND-'\n        self.COMMENT_MARK = '-COMMENT-'\n        self.CODE_MARK = '-CODE-'\n\n    @staticmethod\n    def __format_line_feed(text):\n        \"\"\"Replaces multiple consecutive line breaks in a string with a single line break.\"\"\"\n\n    def format_line_html_text(self, html_text):\n        \"\"\"Removes code from HTML text and replaces it with a -CODE- tag.\"\"\"\n\n    def extract_code_from_html_text(self, html_text):\n        \"\"\"This method extracts code snippets from HTML text and returns them as a list.\"\"\"", "method_info": [{"method_name": "__format_line_feed", "method_description": "def __format_line_feed(text):\n        \"\"\"\n        Replace consecutive line breaks with a single line break\n        :param text: string with consecutive line breaks\n        :return:string, replaced text with single line break\n        \"\"\"", "test_class": "HtmlUtilTestFormatLineFeed", "test_code": "class HtmlUtilTestFormatLineFeed(unittest.TestCase):\n    def test_format_line_feed_1(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed('aaa\\n\\n\\n'), 'aaa\\n')\n\n    def test_format_line_feed_2(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed('aaa\\n\\n\\n\\n'), 'aaa\\n')\n\n    def test_format_line_feed_3(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed('aaa\\n\\n\\nbbb\\n\\n'), 'aaa\\nbbb\\n')\n\n    def test_format_line_feed_4(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed('ccc\\n\\n\\n'), 'ccc\\n')\n\n    def test_format_line_feed_5(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed(''), '')", "solution_code": "def __format_line_feed(text):\n        return re.sub(re.compile(r'\\n+'), '\\n', text)", "dependencies": {"Standalone": false, "lib_dependencies": ["re"], "field_dependencies": [], "method_dependencies": []}}, {"method_name": "format_line_html_text", "method_description": "def format_line_html_text(self, html_text):\n        \"\"\"\n        get the html text without the code, and add the code tag -CODE- where the code is\n        :param html_text:string\n        :return:string\n        >>>htmlutil = HtmlUtil()\n        >>>htmlutil.format_line_html_text(<html>\n        >>> <body>\n        >>>    <h1>Title</h1>\n        >>>    <p>This is a paragraph.</p>\n        >>>    <pre>print('Hello, world!')</pre>\n        >>>    <p>Another paragraph.</p>\n        >>>    <pre><code>for i in range(5):\n        >>>    print(i)</code></pre>\n        >>>    </body>\n        >>>    </html>)\n        Title\n        This is a paragraph.\n        -CODE-\n        Another paragraph.\n        -CODE-\n        \"\"\"", "test_class": "HtmlUtilTestFormatLineHtmlText", "test_code": "class HtmlUtilTestFormatLineHtmlText(unittest.TestCase):\n    def test_format_line_html_text_1(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n\n    def test_format_line_html_text_2(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title2</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle2\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n\n    def test_format_line_html_text_3(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title3</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle3\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n\n    def test_format_line_html_text_4(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title4</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle4\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n\n    def test_format_line_html_text_5(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title5</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle5\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n    def test_format_line_html_text_6(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('')\n        self.assertEqual(res, '')\n\n    def test_format_line_html_text_7(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<ul><li>Item 1!</li></ul>''')\n        self.assertEqual(res, '''[-]Item 1!''')\n\n    def test_format_line_html_text_8(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<ul><li></li></ul>''')\n        self.assertEqual(res, '')\n\n    def test_format_line_html_text_9(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<p>Some sentence here.</p>''')\n        self.assertEqual(res, 'Some sentence here.')\n\n    def test_format_line_html_text_10(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<p>Some paragraph here</p><code>Code block</code>''')\n        self.assertEqual(res, '''Some paragraph here.Code block''')\n\n    def test_format_line_html_text_11(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<p>Some paragraph here</p><div>Some text here</div>''')\n        self.assertEqual(res, '''Some paragraph here.Some text here''')\n\n    def test_format_line_html_text_12(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<ul><li>Item 1</li></ul>''')\n        self.assertEqual(res, '''[-]Item 1.''')", "solution_code": "def format_line_html_text(self, html_text):\n        if html_text is None or len(html_text) == 0:\n            return ''\n        soup = BeautifulSoup(html_text, 'lxml')\n\n        code_tag = soup.find_all(name=['pre', 'blockquote'])\n        for tag in code_tag:\n            tag.string = self.CODE_MARK\n\n        ul_ol_group = soup.find_all(name=['ul', 'ol'])\n        for ul_ol_item in ul_ol_group:\n            li_group = ul_ol_item.find_all('li')\n            for li_item in li_group:\n                li_item_text = li_item.get_text().strip()\n                if len(li_item_text) == 0:\n                    continue\n                if li_item_text[-1] in string.punctuation:\n                    li_item.string = '[{0}]{1}'.format('-', li_item_text)\n                    continue\n                li_item.string = '[{0}]{1}.'.format('-', li_item_text)\n\n        p_group = soup.find_all(name=['p'])\n        for p_item in p_group:\n            p_item_text = p_item.get_text().strip()\n            if p_item_text:\n                if p_item_text[-1] in string.punctuation:\n                    p_item.string = p_item_text\n                    continue\n                next_sibling = p_item.find_next_sibling()\n                if next_sibling and self.CODE_MARK in next_sibling.get_text():\n                    p_item.string = p_item_text + ':'\n                    continue\n                p_item.string = p_item_text + '.'\n\n        clean_text = gensim.utils.decode_htmlentities(soup.get_text())\n        return self.__format_line_feed(clean_text)", "dependencies": {"Standalone": false, "lib_dependencies": ["string", "gensim", "BeautifulSoup"], "field_dependencies": ["self.CODE_MARK"], "method_dependencies": ["__format_line_feed"]}}, {"method_name": "extract_code_from_html_text", "method_description": "def extract_code_from_html_text(self, html_text):\n        \"\"\"\n        extract codes from the html body\n        :param html_text: string, html text\n        :return: the list of code\n        >>>htmlutil = HtmlUtil()\n        >>>htmlutil.extract_code_from_html_text(<html>\n        >>> <body>\n        >>>    <h1>Title</h1>\n        >>>    <p>This is a paragraph.</p>\n        >>>    <pre>print('Hello, world!')</pre>\n        >>>    <p>Another paragraph.</p>\n        >>>    <pre><code>for i in range(5):\n        >>>    print(i)</code></pre>\n        >>>    </body>\n        >>>    </html>)\n        [\"print('Hello, world!')\", 'for i in range(5):\\n                print(i)']\n        \"\"\"", "test_class": "HtmlUtilTestExtractCodeFromHtmlText", "test_code": "class HtmlUtilTestExtractCodeFromHtmlText(unittest.TestCase):\n    def test_extract_code_from_html_text_1(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(5):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(5):\\n                print(i)'])\n\n    def test_extract_code_from_html_text_2(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(4):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(4):\\n                print(i)'])\n\n    def test_extract_code_from_html_text_3(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(3):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(3):\\n                print(i)'])\n\n    def test_extract_code_from_html_text_4(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(2):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(2):\\n                print(i)'])\n\n    def test_extract_code_from_html_text_5(self):\n        htmlutil = HtmlUtil()\n        htmlutil.CODE_MARK = 'abcdefg'\n        res = htmlutil.extract_code_from_html_text(\"\")\n        self.assertEqual(res, [])", "solution_code": "def extract_code_from_html_text(self, html_text):\n        text_with_code_tag = self.format_line_html_text(html_text)\n\n        if self.CODE_MARK not in text_with_code_tag:\n            return []\n\n        code_index_start = 0\n        soup = BeautifulSoup(html_text, 'lxml')\n        code_tag = soup.find_all(name=['pre', 'blockquote'])\n        code_count = text_with_code_tag.count(self.CODE_MARK)\n        code_list = []\n        for code_index in range(code_index_start, code_index_start + code_count):\n            code = code_tag[code_index].get_text()\n            if code:\n                code_list.append(code)\n        return code_list", "dependencies": {"Standalone": false, "lib_dependencies": ["BeautifulSoup"], "field_dependencies": ["self.CODE_MARK"], "method_dependencies": ["format_line_html_text"]}}], "test_cases": "import unittest\nimport sys\n\nclass HtmlUtilTestFormatLineFeed(unittest.TestCase):\n    def test_format_line_feed_1(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed('aaa\\n\\n\\n'), 'aaa\\n')\n\n    def test_format_line_feed_2(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed('aaa\\n\\n\\n\\n'), 'aaa\\n')\n\n    def test_format_line_feed_3(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed('aaa\\n\\n\\nbbb\\n\\n'), 'aaa\\nbbb\\n')\n\n    def test_format_line_feed_4(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed('ccc\\n\\n\\n'), 'ccc\\n')\n\n    def test_format_line_feed_5(self):\n        self.assertEqual(HtmlUtil._HtmlUtil__format_line_feed(''), '')\n\n\nclass HtmlUtilTestFormatLineHtmlText(unittest.TestCase):\n    def test_format_line_html_text_1(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n\n    def test_format_line_html_text_2(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title2</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle2\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n\n    def test_format_line_html_text_3(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title3</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle3\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n\n    def test_format_line_html_text_4(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title4</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle4\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n\n    def test_format_line_html_text_5(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title5</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle5\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n    def test_format_line_html_text_6(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('')\n        self.assertEqual(res, '')\n\n    def test_format_line_html_text_7(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<ul><li>Item 1!</li></ul>''')\n        self.assertEqual(res, '''[-]Item 1!''')\n\n    def test_format_line_html_text_8(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<ul><li></li></ul>''')\n        self.assertEqual(res, '')\n\n    def test_format_line_html_text_9(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<p>Some sentence here.</p>''')\n        self.assertEqual(res, 'Some sentence here.')\n\n    def test_format_line_html_text_10(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<p>Some paragraph here</p><code>Code block</code>''')\n        self.assertEqual(res, '''Some paragraph here.Code block''')\n\n    def test_format_line_html_text_11(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<p>Some paragraph here</p><div>Some text here</div>''')\n        self.assertEqual(res, '''Some paragraph here.Some text here''')\n\n    def test_format_line_html_text_12(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''<ul><li>Item 1</li></ul>''')\n        self.assertEqual(res, '''[-]Item 1.''')\n\n\nclass HtmlUtilTestExtractCodeFromHtmlText(unittest.TestCase):\n    def test_extract_code_from_html_text_1(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(5):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(5):\\n                print(i)'])\n\n    def test_extract_code_from_html_text_2(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(4):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(4):\\n                print(i)'])\n\n    def test_extract_code_from_html_text_3(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(3):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(3):\\n                print(i)'])\n\n    def test_extract_code_from_html_text_4(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(2):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(2):\\n                print(i)'])\n\n    def test_extract_code_from_html_text_5(self):\n        htmlutil = HtmlUtil()\n        htmlutil.CODE_MARK = 'abcdefg'\n        res = htmlutil.extract_code_from_html_text(\"\")\n        self.assertEqual(res, [])\n\n\nclass HtmlUtilTest(unittest.TestCase):\n    def test_htmlutil(self):\n        htmlutil = HtmlUtil()\n        res = htmlutil.format_line_html_text('''\n        <html>\n        <body>\n        <h1>Title</h1>\n        <p>This is a paragraph.</p>\n        <pre>print('Hello, world!')</pre>\n        <p>Another paragraph.</p>\n        <pre><code>for i in range(5):\n        print(i)</code></pre>\n        </body>\n        </html>\n        ''')\n        self.assertEqual(res, '''\nTitle\nThis is a paragraph.\n-CODE-\nAnother paragraph.\n-CODE-\n''')\n        res = htmlutil.extract_code_from_html_text('''\n                <html>\n                <body>\n                <h1>Title</h1>\n                <p>This is a paragraph.</p>\n                <pre>print('Hello, world!')</pre>\n                <p>Another paragraph.</p>\n                <pre><code>for i in range(5):\n                print(i)</code></pre>\n                </body>\n                </html>\n                ''')\n        self.assertEqual(res, [\"print('Hello, world!')\", 'for i in range(5):\\n                print(i)'])\n\nif __name__ == '__main__':\n    unittest.main()", "solutions": ["import re\nimport string\nimport gensim\nfrom bs4 import BeautifulSoup\n\n\nclass HtmlUtil:\n\n    def __init__(self):\n        self.SPACE_MARK = '-SPACE-'\n        self.JSON_MARK = '-JSON-'\n        self.MARKUP_LANGUAGE_MARK = '-MARKUP_LANGUAGE-'\n        self.URL_MARK = '-URL-'\n        self.NUMBER_MARK = '-NUMBER-'\n        self.TRACE_MARK = '-TRACE-'\n        self.COMMAND_MARK = '-COMMAND-'\n        self.COMMENT_MARK = '-COMMENT-'\n        self.CODE_MARK = '-CODE-'\n\n    @staticmethod\n    def __format_line_feed(text):\n        return re.sub(re.compile(r'\\n+'), '\\n', text)\n\n    def format_line_html_text(self, html_text):\n        if html_text is None or len(html_text) == 0:\n            return ''\n        soup = BeautifulSoup(html_text, 'lxml')\n\n        code_tag = soup.find_all(name=['pre', 'blockquote'])\n        for tag in code_tag:\n            tag.string = self.CODE_MARK\n\n        ul_ol_group = soup.find_all(name=['ul', 'ol'])\n        for ul_ol_item in ul_ol_group:\n            li_group = ul_ol_item.find_all('li')\n            for li_item in li_group:\n                li_item_text = li_item.get_text().strip()\n                if len(li_item_text) == 0:\n                    continue\n                if li_item_text[-1] in string.punctuation:\n                    li_item.string = '[{0}]{1}'.format('-', li_item_text)\n                    continue\n                li_item.string = '[{0}]{1}.'.format('-', li_item_text)\n\n        p_group = soup.find_all(name=['p'])\n        for p_item in p_group:\n            p_item_text = p_item.get_text().strip()\n            if p_item_text:\n                if p_item_text[-1] in string.punctuation:\n                    p_item.string = p_item_text\n                    continue\n                next_sibling = p_item.find_next_sibling()\n                if next_sibling and self.CODE_MARK in next_sibling.get_text():\n                    p_item.string = p_item_text + ':'\n                    continue\n                p_item.string = p_item_text + '.'\n\n        clean_text = gensim.utils.decode_htmlentities(soup.get_text())\n        return self.__format_line_feed(clean_text)\n\n    def extract_code_from_html_text(self, html_text):\n        text_with_code_tag = self.format_line_html_text(html_text)\n\n        if self.CODE_MARK not in text_with_code_tag:\n            return []\n\n        code_index_start = 0\n        soup = BeautifulSoup(html_text, 'lxml')\n        code_tag = soup.find_all(name=['pre', 'blockquote'])\n        code_count = text_with_code_tag.count(self.CODE_MARK)\n        code_list = []\n        for code_index in range(code_index_start, code_index_start + code_count):\n            code = code_tag[code_index].get_text()\n            if code:\n                code_list.append(code)\n        return code_list"], "task": "class_eval", "split": "test", "transformation_type": "func_summary", "import_statement": ["import re", "import string", "import gensim", "from bs4 import BeautifulSoup"], "test_classes": ["HtmlUtilTestFormatLineFeed", "HtmlUtilTestFormatLineHtmlText", "HtmlUtilTestExtractCodeFromHtmlText", "HtmlUtilTest"]}