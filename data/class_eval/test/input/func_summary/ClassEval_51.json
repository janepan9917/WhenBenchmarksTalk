{"qid": "ClassEval_51", "orig_input": "import numpy as np\n\nclass KappaCalculator:\n    \"\"\"\n    This is a class as KappaCalculator, supporting to calculate Cohen's and Fleiss' kappa coefficient.\n    \"\"\"\n\n\n    @staticmethod\n    def kappa(testData, k):\n        \"\"\"\n        Calculate the cohens kappa value of a k-dimensional matrix\n        :param testData: The k-dimensional matrix that needs to calculate the cohens kappa value\n        :param k: int, Matrix dimension\n        :return:float, the cohens kappa value of the matrix\n        >>> KappaCalculator.kappa([[2, 1, 1], [1, 2, 1], [1, 1, 2]], 3)\n        0.25\n        \"\"\"\n\n    @staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        \"\"\"\n        Calculate the fliss kappa value of an N * k matrix\n        :param testData: Input data matrix, N * k\n        :param N: int, Number of samples\n        :param k: int, Number of categories\n        :param n: int, Number of raters\n        :return: float, fleiss kappa value\n        >>> KappaCalculator.fleiss_kappa([[0, 0, 0, 0, 14],\n        >>>                              [0, 2, 6, 4, 2],\n        >>>                              [0, 0, 3, 5, 6],\n        >>>                              [0, 3, 9, 2, 0],\n        >>>                              [2, 2, 8, 1, 1],\n        >>>                              [7, 7, 0, 0, 0],\n        >>>                              [3, 2, 6, 3, 0],\n        >>>                              [2, 5, 3, 2, 2],\n        >>>                              [6, 5, 2, 1, 0],\n        >>>                              [0, 2, 2, 3, 7]], 10, 5, 14)\n        0.20993070442195522\n        \"\"\"", "input": "import numpy as np\n\nclass KappaCalculator:\n    \"\"\"\n    This is a class as KappaCalculator, supporting to calculate Cohen's and Fleiss' kappa coefficient.\n    \"\"\"\n\n\n    @staticmethod\n    def kappa(testData, k):\n        \"\"\"Calculates Cohen's kappa value for a k-dimensional matrix, measuring agreement between raters or methods.\"\"\"\n\n    @staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        \"\"\"Calculates Fleiss' kappa for inter-rater agreement using a matrix of ratings across samples and categories.\"\"\"", "method_info": [{"method_name": "kappa", "method_description": "def kappa(testData, k):\n        \"\"\"\n        Calculate the cohens kappa value of a k-dimensional matrix\n        :param testData: The k-dimensional matrix that needs to calculate the cohens kappa value\n        :param k: int, Matrix dimension\n        :return:float, the cohens kappa value of the matrix\n        >>> KappaCalculator.kappa([[2, 1, 1], [1, 2, 1], [1, 1, 2]], 3)\n        0.25\n        \"\"\"", "test_class": "KappaCalculatorTestKappa", "test_code": "class KappaCalculatorTestKappa(unittest.TestCase):\n    def test_kappa_1(self):\n        self.assertEqual(KappaCalculator.kappa([[2, 1, 1], [1, 2, 1], [1, 1, 2]], 3), 0.25)\n\n    def test_kappa_2(self):\n        self.assertAlmostEqual(KappaCalculator.kappa([[2, 2, 1], [1, 2, 1], [1, 1, 2]], 3), 0.19469026548672572)\n\n    def test_kappa_3(self):\n        self.assertAlmostEqual(KappaCalculator.kappa([[2, 1, 2], [1, 2, 1], [1, 1, 2]], 3), 0.19469026548672572)\n\n    def test_kappa_4(self):\n        self.assertAlmostEqual(KappaCalculator.kappa([[2, 1, 1], [2, 2, 1], [1, 1, 2]], 3), 0.19469026548672572)\n\n    def test_kappa_5(self):\n        self.assertAlmostEqual(KappaCalculator.kappa([[2, 1, 1], [1, 2, 2], [1, 1, 2]], 3), 0.19469026548672572)", "solution_code": "def kappa(testData, k):\n        dataMat = np.mat(testData)\n        P0 = 0.0\n        for i in range(k):\n            P0 += dataMat[i, i] * 1.0\n        xsum = np.sum(dataMat, axis=1)\n        ysum = np.sum(dataMat, axis=0)\n        sum = np.sum(dataMat)\n        Pe = float(ysum * xsum) / sum / sum\n        P0 = float(P0 / sum * 1.0)\n        cohens_coefficient = float((P0 - Pe) / (1 - Pe))\n        return cohens_coefficient", "dependencies": {"Standalone": true, "lib_dependencies": [], "field_dependencies": [], "method_dependencies": []}}, {"method_name": "fleiss_kappa", "method_description": "@staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        \"\"\"\n        Calculate the fliss kappa value of an N * k matrix\n        :param testData: Input data matrix, N * k\n        :param N: int, Number of samples\n        :param k: int, Number of categories\n        :param n: int, Number of raters\n        :return: float, fleiss kappa value\n        >>> KappaCalculator.fleiss_kappa([[0, 0, 0, 0, 14],\n        >>>                              [0, 2, 6, 4, 2],\n        >>>                              [0, 0, 3, 5, 6],\n        >>>                              [0, 3, 9, 2, 0],\n        >>>                              [2, 2, 8, 1, 1],\n        >>>                              [7, 7, 0, 0, 0],\n        >>>                              [3, 2, 6, 3, 0],\n        >>>                              [2, 5, 3, 2, 2],\n        >>>                              [6, 5, 2, 1, 0],\n        >>>                              [0, 2, 2, 3, 7]], 10, 5, 14)\n        0.20993070442195522\n        \"\"\"", "test_class": "KappaCalculatorTestFleissKappa", "test_code": "class KappaCalculatorTestFleissKappa(unittest.TestCase):\n    def test_fleiss_kappa_1(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 0, 0, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.20993070442195522)\n\n    def test_fleiss_kappa_2(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[1, 0, 0, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.2115748928799344)\n\n    def test_fleiss_kappa_3(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 1, 0, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.21076904123090398)\n\n    def test_fleiss_kappa_4(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 0, 1, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.2096583016522883)\n\n    def test_fleiss_kappa_5(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 0, 0, 1, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.21147425143148907)", "solution_code": "@staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        dataMat = np.mat(testData, float)\n        oneMat = np.ones((k, 1))\n        sum = 0.0\n        P0 = 0.0\n        for i in range(N):\n            temp = 0.0\n            for j in range(k):\n                sum += dataMat[i, j]\n                temp += 1.0 * dataMat[i, j] ** 2\n            temp -= n\n            temp /= (n - 1) * n\n            P0 += temp\n        P0 = 1.0 * P0 / N\n        ysum = np.sum(dataMat, axis=0)\n        for i in range(k):\n            ysum[0, i] = (ysum[0, i] / sum) ** 2\n        Pe = ysum * oneMat * 1.0\n        ans = (P0 - Pe) / (1 - Pe)\n        return ans[0, 0]", "dependencies": {"Standalone": true, "lib_dependencies": [], "field_dependencies": [], "method_dependencies": []}}], "test_cases": "import unittest\n\n\nclass KappaCalculatorTestKappa(unittest.TestCase):\n    def test_kappa_1(self):\n        self.assertEqual(KappaCalculator.kappa([[2, 1, 1], [1, 2, 1], [1, 1, 2]], 3), 0.25)\n\n    def test_kappa_2(self):\n        self.assertAlmostEqual(KappaCalculator.kappa([[2, 2, 1], [1, 2, 1], [1, 1, 2]], 3), 0.19469026548672572)\n\n    def test_kappa_3(self):\n        self.assertAlmostEqual(KappaCalculator.kappa([[2, 1, 2], [1, 2, 1], [1, 1, 2]], 3), 0.19469026548672572)\n\n    def test_kappa_4(self):\n        self.assertAlmostEqual(KappaCalculator.kappa([[2, 1, 1], [2, 2, 1], [1, 1, 2]], 3), 0.19469026548672572)\n\n    def test_kappa_5(self):\n        self.assertAlmostEqual(KappaCalculator.kappa([[2, 1, 1], [1, 2, 2], [1, 1, 2]], 3), 0.19469026548672572)\n\n\nclass KappaCalculatorTestFleissKappa(unittest.TestCase):\n    def test_fleiss_kappa_1(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 0, 0, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.20993070442195522)\n\n    def test_fleiss_kappa_2(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[1, 0, 0, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.2115748928799344)\n\n    def test_fleiss_kappa_3(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 1, 0, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.21076904123090398)\n\n    def test_fleiss_kappa_4(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 0, 1, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.2096583016522883)\n\n    def test_fleiss_kappa_5(self):\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 0, 0, 1, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.21147425143148907)\n\n\nclass KappaCalculatorTest(unittest.TestCase):\n    def test_kappacalculator(self):\n        self.assertEqual(KappaCalculator.kappa([[2, 1, 1], [1, 2, 1], [1, 1, 2]], 3), 0.25)\n        self.assertEqual(KappaCalculator.fleiss_kappa([[0, 0, 0, 0, 14],\n                                                       [0, 2, 6, 4, 2],\n                                                       [0, 0, 3, 5, 6],\n                                                       [0, 3, 9, 2, 0],\n                                                       [2, 2, 8, 1, 1],\n                                                       [7, 7, 0, 0, 0],\n                                                       [3, 2, 6, 3, 0],\n                                                       [2, 5, 3, 2, 2],\n                                                       [6, 5, 2, 1, 0],\n                                                       [0, 2, 2, 3, 7]], 10, 5, 14), 0.20993070442195522)", "solutions": ["import numpy as np\n\n\nclass KappaCalculator:\n\n    @staticmethod\n    def kappa(testData, k):\n        dataMat = np.mat(testData)\n        P0 = 0.0\n        for i in range(k):\n            P0 += dataMat[i, i] * 1.0\n        xsum = np.sum(dataMat, axis=1)\n        ysum = np.sum(dataMat, axis=0)\n        sum = np.sum(dataMat)\n        Pe = float(ysum * xsum) / sum / sum\n        P0 = float(P0 / sum * 1.0)\n        cohens_coefficient = float((P0 - Pe) / (1 - Pe))\n        return cohens_coefficient\n\n    @staticmethod\n    def fleiss_kappa(testData, N, k, n):\n        dataMat = np.mat(testData, float)\n        oneMat = np.ones((k, 1))\n        sum = 0.0\n        P0 = 0.0\n        for i in range(N):\n            temp = 0.0\n            for j in range(k):\n                sum += dataMat[i, j]\n                temp += 1.0 * dataMat[i, j] ** 2\n            temp -= n\n            temp /= (n - 1) * n\n            P0 += temp\n        P0 = 1.0 * P0 / N\n        ysum = np.sum(dataMat, axis=0)\n        for i in range(k):\n            ysum[0, i] = (ysum[0, i] / sum) ** 2\n        Pe = ysum * oneMat * 1.0\n        ans = (P0 - Pe) / (1 - Pe)\n        return ans[0, 0]"], "task": "class_eval", "split": "test", "transformation_type": "func_summary", "import_statement": ["import numpy as np"], "test_classes": ["KappaCalculatorTestKappa", "KappaCalculatorTestFleissKappa", "KappaCalculatorTest"]}