{"qid": "ClassEval_37", "orig_input": "class EncryptionUtils:\n    \"\"\"\n    This is a class that provides methods for encryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.\n    \"\"\"\n\n    def __init__(self, key):\n        \"\"\"\n        Initializes the class with a key.\n        :param key: The key to use for encryption, str.\n        \"\"\"\n        self.key = key\n\n    def caesar_cipher(self, plaintext, shift):\n        \"\"\"\n        Encrypts the plaintext using the Caesar cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :param shift: The number of characters to shift each character in the plaintext, int.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.caesar_cipher(\"abc\", 1)\n        'bcd'\n\n        \"\"\"\n\n    def vigenere_cipher(self, plaintext):\n        \"\"\"\n        Encrypts the plaintext using the Vigenere cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.vigenere_cipher(\"abc\")\n        'kfa'\n\n        \"\"\"\n\n    def rail_fence_cipher(self,plain_text, rails):\n        \"\"\"\n        Encrypts the plaintext using the Rail Fence cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.rail_fence_cipher(\"abc\", 2)\n        'acb'\n\n        \"\"\"", "input": "class EncryptionUtils:\n    \"\"\"\n    This is a class that provides methods for encryption, including the Caesar cipher, Vigenere cipher, and Rail Fence cipher.\n    \"\"\"\n\n    def __init__(self, key):\n        \"\"\"\n        Initializes the class with a key.\n        :param key: The key to use for encryption, str.\n        \"\"\"\n        self.key = key\n\n    def caesar_cipher(self, plaintext, shift):\n        \"\"\"Caesar cipher encryption method that shifts characters in plaintext by a specified number.\"\"\"\n\n    def vigenere_cipher(self, plaintext):\n        \"\"\"Encrypts plaintext using Vigenere cipher with a given key, returning the resulting ciphertext.\"\"\"\n\n    def rail_fence_cipher(self,plain_text, rails):\n        \"\"\"Encrypts plaintext using Rail Fence cipher, taking plaintext string and number of rails as inputs.\"\"\"", "method_info": [{"method_name": "caesar_cipher", "method_description": "def caesar_cipher(self, plaintext, shift):\n        \"\"\"\n        Encrypts the plaintext using the Caesar cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :param shift: The number of characters to shift each character in the plaintext, int.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.caesar_cipher(\"abc\", 1)\n        'bcd'\n\n        \"\"\"", "test_class": "EncryptionUtilsTestCaesarCipher", "test_code": "class EncryptionUtilsTestCaesarCipher(unittest.TestCase):\n    def test_caesar_cipher(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"abc\", 1), \"bcd\")\n\n    def test_caesar_cipher_2(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"WORLD\", -2), \"UMPJB\")\n\n    def test_caesar_cipher_3(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"\", 4), \"\")\n\n    def test_caesar_cipher_4(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"abcxyz\", 26), \"abcxyz\")\n\n    def test_caesar_cipher_5(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"abcxyz\", 27), \"bcdyza\")\n\n    def test_caesar_cipher_6(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"123\", 27), \"123\")", "solution_code": "def caesar_cipher(self, plaintext, shift):\n        ciphertext = \"\"\n        for char in plaintext:\n            if char.isalpha():\n                if char.isupper():\n                    ascii_offset = 65\n                else:\n                    ascii_offset = 97\n                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n                ciphertext += shifted_char\n            else:\n                ciphertext += char\n        return ciphertext", "dependencies": {"Standalone": true, "lib_dependencies": [], "field_dependencies": [], "method_dependencies": []}}, {"method_name": "vigenere_cipher", "method_description": "def vigenere_cipher(self, plaintext):\n        \"\"\"\n        Encrypts the plaintext using the Vigenere cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.vigenere_cipher(\"abc\")\n        'kfa'\n\n        \"\"\"", "test_class": "EncryptionUtilsTestVigenereCipher", "test_code": "class EncryptionUtilsTestVigenereCipher(unittest.TestCase):\n    def test_vigenere_cipher(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"abc\"), \"kfa\")\n\n    def test_vigenere_cipher_2(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"hello\"), \"rijvs\")\n\n    def test_vigenere_cipher_3(self):\n        encryption_utils = EncryptionUtils(\"longkey\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"AbCdEfG\"), \"LpPjOjE\")\n\n    def test_vigenere_cipher_4(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"Hello, World! 123\"), \"Rijvs, Uyvjn! 123\")\n\n    def test_vigenere_cipher_5(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"\"), \"\")", "solution_code": "def vigenere_cipher(self, plain_text):\n        encrypted_text = \"\"\n        key_index = 0\n        for char in plain_text:\n            if char.isalpha():\n                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')\n                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))\n                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char\n                key_index += 1\n            else:\n                encrypted_text += char\n        return encrypted_text", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.key"], "method_dependencies": []}}, {"method_name": "rail_fence_cipher", "method_description": "def rail_fence_cipher(self,plain_text, rails):\n        \"\"\"\n        Encrypts the plaintext using the Rail Fence cipher.\n        :param plaintext: The plaintext to encrypt, str.\n        :return: The ciphertext, str.\n        >>> e = EncryptionUtils(\"key\")\n        >>> e.rail_fence_cipher(\"abc\", 2)\n        'acb'\n\n        \"\"\"", "test_class": "EncryptionUtilsTestRailFenceCipher", "test_code": "class EncryptionUtilsTestRailFenceCipher(unittest.TestCase):\n    def test_rail_fence_cipher(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"abc\", 2), \"acb\")\n\n    def test_rail_fence_cipher_2(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"hello\", 2), \"hloel\")\n\n    def test_rail_fence_cipher_3(self):\n        encryption_utils = EncryptionUtils(\"longkey\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"AbCdEfG\", 2), \"ACEGbdf\")\n\n    def test_rail_fence_cipher_4(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"Hello, World! 123\", 2), \"Hlo ol!13el,Wrd 2\")\n\n    def test_rail_fence_cipher_5(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"\", 2), \"\")\n\n    def test_rail_fence_cipher_6(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"abcdefg\", 3), \"aebdfcg\")", "solution_code": "def rail_fence_cipher(self, plain_text, rails):\n        fence = [['\\n' for _ in range(len(plain_text))] for _ in range(rails)]\n        direction = -1\n        row, col = 0, 0\n\n        for char in plain_text:\n            if row == 0 or row == rails-1:\n                direction = -direction\n\n            fence[row][col] = char\n            col += 1\n            row += direction\n\n        encrypted_text = ''\n        for i in range(rails):\n            for j in range(len(plain_text)):\n                if fence[i][j] != '\\n':\n                    encrypted_text += fence[i][j]\n\n        return encrypted_text", "dependencies": {"Standalone": true, "lib_dependencies": [], "field_dependencies": [], "method_dependencies": []}}], "test_cases": "import unittest\n\n\nclass EncryptionUtilsTestCaesarCipher(unittest.TestCase):\n    def test_caesar_cipher(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"abc\", 1), \"bcd\")\n\n    def test_caesar_cipher_2(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"WORLD\", -2), \"UMPJB\")\n\n    def test_caesar_cipher_3(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"\", 4), \"\")\n\n    def test_caesar_cipher_4(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"abcxyz\", 26), \"abcxyz\")\n\n    def test_caesar_cipher_5(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"abcxyz\", 27), \"bcdyza\")\n\n    def test_caesar_cipher_6(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"123\", 27), \"123\")\n\n\nclass EncryptionUtilsTestVigenereCipher(unittest.TestCase):\n    def test_vigenere_cipher(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"abc\"), \"kfa\")\n\n    def test_vigenere_cipher_2(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"hello\"), \"rijvs\")\n\n    def test_vigenere_cipher_3(self):\n        encryption_utils = EncryptionUtils(\"longkey\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"AbCdEfG\"), \"LpPjOjE\")\n\n    def test_vigenere_cipher_4(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"Hello, World! 123\"), \"Rijvs, Uyvjn! 123\")\n\n    def test_vigenere_cipher_5(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"\"), \"\")\n\n\nclass EncryptionUtilsTestRailFenceCipher(unittest.TestCase):\n    def test_rail_fence_cipher(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"abc\", 2), \"acb\")\n\n    def test_rail_fence_cipher_2(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"hello\", 2), \"hloel\")\n\n    def test_rail_fence_cipher_3(self):\n        encryption_utils = EncryptionUtils(\"longkey\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"AbCdEfG\", 2), \"ACEGbdf\")\n\n    def test_rail_fence_cipher_4(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"Hello, World! 123\", 2), \"Hlo ol!13el,Wrd 2\")\n\n    def test_rail_fence_cipher_5(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"\", 2), \"\")\n\n    def test_rail_fence_cipher_6(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"abcdefg\", 3), \"aebdfcg\")\n\n\nclass EncryptionUtilsTestMain(unittest.TestCase):\n    def test_main(self):\n        encryption_utils = EncryptionUtils(\"key\")\n        self.assertEqual(encryption_utils.caesar_cipher(\"abc\", 1), \"bcd\")\n        self.assertEqual(encryption_utils.vigenere_cipher(\"abc\"), \"kfa\")\n        self.assertEqual(encryption_utils.rail_fence_cipher(\"abc\", 2), \"acb\")", "solutions": ["class EncryptionUtils:\n    def __init__(self, key):\n        self.key = key\n\n    def caesar_cipher(self, plaintext, shift):\n        ciphertext = \"\"\n        for char in plaintext:\n            if char.isalpha():\n                if char.isupper():\n                    ascii_offset = 65\n                else:\n                    ascii_offset = 97\n                shifted_char = chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n                ciphertext += shifted_char\n            else:\n                ciphertext += char\n        return ciphertext\n    \n    def vigenere_cipher(self, plain_text):\n        encrypted_text = \"\"\n        key_index = 0\n        for char in plain_text:\n            if char.isalpha():\n                shift = ord(self.key[key_index % len(self.key)].lower()) - ord('a')\n                encrypted_char = chr((ord(char.lower()) - ord('a') + shift) % 26 + ord('a'))\n                encrypted_text += encrypted_char.upper() if char.isupper() else encrypted_char\n                key_index += 1\n            else:\n                encrypted_text += char\n        return encrypted_text\n\n    def rail_fence_cipher(self, plain_text, rails):\n        fence = [['\\n' for _ in range(len(plain_text))] for _ in range(rails)]\n        direction = -1\n        row, col = 0, 0\n\n        for char in plain_text:\n            if row == 0 or row == rails-1:\n                direction = -direction\n\n            fence[row][col] = char\n            col += 1\n            row += direction\n\n        encrypted_text = ''\n        for i in range(rails):\n            for j in range(len(plain_text)):\n                if fence[i][j] != '\\n':\n                    encrypted_text += fence[i][j]\n\n        return encrypted_text"], "task": "class_eval", "split": "test", "transformation_type": "func_summary", "import_statement": [], "test_classes": ["EncryptionUtilsTestCaesarCipher", "EncryptionUtilsTestVigenereCipher", "EncryptionUtilsTestRailFenceCipher", "EncryptionUtilsTestMain"]}