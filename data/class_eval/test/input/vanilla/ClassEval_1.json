{"qid": "ClassEval_1", "orig_input": "import math\nclass AreaCalculator:\n    \"\"\"\n    This is a class for calculating the area of different shapes, including circle, sphere, cylinder, sector and annulus.\n    \"\"\"\n\n\n    def __init__(self, radius):\n        \"\"\"\n        Initialize the radius for shapes.\n        :param radius: float\n        \"\"\"\n        self.radius = radius\n\n    def calculate_circle_area(self):\n        \"\"\"\n        calculate the area of circle based on self.radius\n        :return: area of circle, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_circle_area()\n        12.566370614359172\n        \"\"\"\n\n    def calculate_sphere_area(self):\n        \"\"\"\n        calculate the area of sphere based on self.radius\n        :return: area of sphere, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_sphere_area()\n        50.26548245743669\n        \"\"\"\n\n    def calculate_cylinder_area(self, height):\n        \"\"\"\n        calculate the area of cylinder based on self.radius and height\n        :param height: height of cylinder, float\n        :return: area of cylinder, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_cylinder_area(3)\n        62.83185307179586\n        \"\"\"\n\n    def calculate_sector_area(self, angle):\n        \"\"\"\n        calculate the area of sector based on self.radius and angle\n        :param angle: angle of sector, float\n        :return: area of sector, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_sector_area(math.pi)\n        6.283185307179586\n        \"\"\"\n\n    def calculate_annulus_area(self, inner_radius, outer_radius):\n        \"\"\"\n        calculate the area of annulus based on inner_radius and out_radius\n        :param inner_radius: inner radius of sector, float\n        :param outer_radius: outer radius of sector, float\n        :return: area of annulus, float\n        >>> areaCalculator.calculate_annulus_area(2, 3)\n        15.707963267948966\n        \"\"\"", "input": "import math\nclass AreaCalculator:\n    \"\"\"\n    This is a class for calculating the area of different shapes, including circle, sphere, cylinder, sector and annulus.\n    \"\"\"\n\n\n    def __init__(self, radius):\n        \"\"\"\n        Initialize the radius for shapes.\n        :param radius: float\n        \"\"\"\n        self.radius = radius\n\n    def calculate_circle_area(self):\n        \"\"\"\n        calculate the area of circle based on self.radius\n        :return: area of circle, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_circle_area()\n        12.566370614359172\n        \"\"\"\n\n    def calculate_sphere_area(self):\n        \"\"\"\n        calculate the area of sphere based on self.radius\n        :return: area of sphere, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_sphere_area()\n        50.26548245743669\n        \"\"\"\n\n    def calculate_cylinder_area(self, height):\n        \"\"\"\n        calculate the area of cylinder based on self.radius and height\n        :param height: height of cylinder, float\n        :return: area of cylinder, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_cylinder_area(3)\n        62.83185307179586\n        \"\"\"\n\n    def calculate_sector_area(self, angle):\n        \"\"\"\n        calculate the area of sector based on self.radius and angle\n        :param angle: angle of sector, float\n        :return: area of sector, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_sector_area(math.pi)\n        6.283185307179586\n        \"\"\"\n\n    def calculate_annulus_area(self, inner_radius, outer_radius):\n        \"\"\"\n        calculate the area of annulus based on inner_radius and out_radius\n        :param inner_radius: inner radius of sector, float\n        :param outer_radius: outer radius of sector, float\n        :return: area of annulus, float\n        >>> areaCalculator.calculate_annulus_area(2, 3)\n        15.707963267948966\n        \"\"\"", "method_info": [{"method_name": "calculate_circle_area", "method_description": "def calculate_circle_area(self):\n        \"\"\"\n        calculate the area of circle based on self.radius\n        :return: area of circle, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_circle_area()\n        12.566370614359172\n        \"\"\"", "test_class": "AreaCalculatorTestCalculateCircleArea", "test_code": "class AreaCalculatorTestCalculateCircleArea(unittest.TestCase):\n    def test_calculate_circle_area(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(12.56, areaCalculator.calculate_circle_area(), delta=0.01)\n    def test_calculate_circle_area_2(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(19.63, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_circle_area_3(self):\n        areaCalculator = AreaCalculator(2000)\n        self.assertAlmostEqual(12566370.61, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_circle_area_4(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(0, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_circle_area_5(self):\n        areaCalculator = AreaCalculator(0.1)\n        self.assertAlmostEqual(0.031, areaCalculator.calculate_circle_area(), delta=0.01)", "solution_code": "def calculate_circle_area(self):\n        return math.pi * self.radius ** 2", "dependencies": {"Standalone": false, "lib_dependencies": ["math"], "field_dependencies": ["self.radius"], "method_dependencies": []}}, {"method_name": "calculate_sphere_area", "method_description": "def calculate_sphere_area(self):\n        \"\"\"\n        calculate the area of sphere based on self.radius\n        :return: area of sphere, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_sphere_area()\n        50.26548245743669\n        \"\"\"", "test_class": "AreaCalculatorTestCalculateSphereArea", "test_code": "class AreaCalculatorTestCalculateSphereArea(unittest.TestCase):\n    def test_calculate_sphere_area(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(50.27, areaCalculator.calculate_sphere_area(), delta=0.01)\n\n    def test_calculate_sphere_area_2(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(19.63, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_sphere_area_3(self):\n        areaCalculator = AreaCalculator(2000)\n        self.assertAlmostEqual(12566370.61, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_sphere_area_4(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(0, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_sphere_area_5(self):\n        areaCalculator = AreaCalculator(0.1)\n        self.assertAlmostEqual(0.031, areaCalculator.calculate_circle_area(), delta=0.01)", "solution_code": "def calculate_sphere_area(self):\n        return 4 * math.pi * self.radius ** 2", "dependencies": {"Standalone": false, "lib_dependencies": ["math"], "field_dependencies": ["self.radius"], "method_dependencies": []}}, {"method_name": "calculate_cylinder_area", "method_description": "def calculate_cylinder_area(self, height):\n        \"\"\"\n        calculate the area of cylinder based on self.radius and height\n        :param height: height of cylinder, float\n        :return: area of cylinder, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_cylinder_area(3)\n        62.83185307179586\n        \"\"\"", "test_class": "AreaCalculatorTestCalculateCylinderArea", "test_code": "class AreaCalculatorTestCalculateCylinderArea(unittest.TestCase):\n    def test_calculate_cylinder_area(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(50.27, areaCalculator.calculate_cylinder_area(2), delta=0.01)\n\n    def test_calculate_cylinder_area_2(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(25.13, areaCalculator.calculate_cylinder_area(0), delta=0.01)\n\n    def test_calculate_cylinder_area_3(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(0, areaCalculator.calculate_cylinder_area(2000), delta=0.01)\n\n    def test_calculate_cylinder_area_4(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(70.68, areaCalculator.calculate_cylinder_area(2), delta=0.01)\n\n    def test_calculate_cylinder_area_5(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(62.83, areaCalculator.calculate_cylinder_area(1.5), delta=0.01)", "solution_code": "def calculate_cylinder_area(self, height):\n        return 2 * math.pi * self.radius * (self.radius + height)", "dependencies": {"Standalone": false, "lib_dependencies": ["math"], "field_dependencies": ["self.radius"], "method_dependencies": []}}, {"method_name": "calculate_sector_area", "method_description": "def calculate_sector_area(self, angle):\n        \"\"\"\n        calculate the area of sector based on self.radius and angle\n        :param angle: angle of sector, float\n        :return: area of sector, float\n        >>> areaCalculator = AreaCalculator(2)\n        >>> areaCalculator.calculate_sector_area(math.pi)\n        6.283185307179586\n        \"\"\"", "test_class": "AreaCalculatorTestCalculateSectorArea", "test_code": "class AreaCalculatorTestCalculateSectorArea(unittest.TestCase):\n    def test_calculate_sector_area(self):\n        areaCalculator = AreaCalculator(1.5)\n        self.assertAlmostEqual(3.53, areaCalculator.calculate_sector_area(math.pi), delta=0.01)\n\n    def test_calculate_sector_area_2(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(3.14, areaCalculator.calculate_sector_area(math.pi/2), delta=0.01)\n\n    def test_calculate_sector_area_3(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(0, areaCalculator.calculate_sector_area(0), delta=0.01)\n\n    def test_calculate_sector_area_4(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(12.56, areaCalculator.calculate_sector_area(2*math.pi), delta=0.01)\n\n    def test5_calculate_sector_area_5(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(0, areaCalculator.calculate_sector_area(math.pi), delta=0.01)", "solution_code": "def calculate_sector_area(self, angle):\n        return self.radius ** 2 * angle / 2", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.radius"], "method_dependencies": []}}, {"method_name": "calculate_annulus_area", "method_description": "def calculate_annulus_area(self, inner_radius, outer_radius):\n        \"\"\"\n        calculate the area of annulus based on inner_radius and out_radius\n        :param inner_radius: inner radius of sector, float\n        :param outer_radius: outer radius of sector, float\n        :return: area of annulus, float\n        >>> areaCalculator.calculate_annulus_area(2, 3)\n        15.707963267948966\n        \"\"\"", "test_class": "AreaCalculatorTestCalculateAnnulusArea", "test_code": "class AreaCalculatorTestCalculateAnnulusArea(unittest.TestCase):\n    def test_calculate_annulus_area(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(25.128, areaCalculator.calculate_annulus_area(1, 3), delta=0.01)\n\n    def test_calculate_annulus_area_2(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(0, areaCalculator.calculate_annulus_area(3, 3), delta=0.01)\n\n    def test_calculate_annulus_area_3(self):\n        areaCalculator = AreaCalculator(2000)\n        self.assertAlmostEqual(3.14, areaCalculator.calculate_annulus_area(0, 1), delta=0.01)\n\n    def test_calculate_annulus_area_4(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(25.13, areaCalculator.calculate_annulus_area(1, 3), delta=0.01)\n\n    def test_calculate_annulus_area_5(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(25.13, areaCalculator.calculate_annulus_area(1, 3), delta=0.01)", "solution_code": "def calculate_annulus_area(self, inner_radius, outer_radius):\n        return math.pi * (outer_radius ** 2 - inner_radius ** 2)", "dependencies": {"Standalone": false, "lib_dependencies": ["math"], "field_dependencies": [], "method_dependencies": []}}], "test_cases": "import unittest\n\nclass AreaCalculatorTestCalculateCircleArea(unittest.TestCase):\n    def test_calculate_circle_area(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(12.56, areaCalculator.calculate_circle_area(), delta=0.01)\n    def test_calculate_circle_area_2(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(19.63, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_circle_area_3(self):\n        areaCalculator = AreaCalculator(2000)\n        self.assertAlmostEqual(12566370.61, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_circle_area_4(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(0, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_circle_area_5(self):\n        areaCalculator = AreaCalculator(0.1)\n        self.assertAlmostEqual(0.031, areaCalculator.calculate_circle_area(), delta=0.01)\n\n\nclass AreaCalculatorTestCalculateSphereArea(unittest.TestCase):\n    def test_calculate_sphere_area(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(50.27, areaCalculator.calculate_sphere_area(), delta=0.01)\n\n    def test_calculate_sphere_area_2(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(19.63, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_sphere_area_3(self):\n        areaCalculator = AreaCalculator(2000)\n        self.assertAlmostEqual(12566370.61, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_sphere_area_4(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(0, areaCalculator.calculate_circle_area(), delta=0.01)\n\n    def test_calculate_sphere_area_5(self):\n        areaCalculator = AreaCalculator(0.1)\n        self.assertAlmostEqual(0.031, areaCalculator.calculate_circle_area(), delta=0.01)\n\n\nclass AreaCalculatorTestCalculateCylinderArea(unittest.TestCase):\n    def test_calculate_cylinder_area(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(50.27, areaCalculator.calculate_cylinder_area(2), delta=0.01)\n\n    def test_calculate_cylinder_area_2(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(25.13, areaCalculator.calculate_cylinder_area(0), delta=0.01)\n\n    def test_calculate_cylinder_area_3(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(0, areaCalculator.calculate_cylinder_area(2000), delta=0.01)\n\n    def test_calculate_cylinder_area_4(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(70.68, areaCalculator.calculate_cylinder_area(2), delta=0.01)\n\n    def test_calculate_cylinder_area_5(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(62.83, areaCalculator.calculate_cylinder_area(1.5), delta=0.01)\n\nclass AreaCalculatorTestCalculateSectorArea(unittest.TestCase):\n    def test_calculate_sector_area(self):\n        areaCalculator = AreaCalculator(1.5)\n        self.assertAlmostEqual(3.53, areaCalculator.calculate_sector_area(math.pi), delta=0.01)\n\n    def test_calculate_sector_area_2(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(3.14, areaCalculator.calculate_sector_area(math.pi/2), delta=0.01)\n\n    def test_calculate_sector_area_3(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(0, areaCalculator.calculate_sector_area(0), delta=0.01)\n\n    def test_calculate_sector_area_4(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(12.56, areaCalculator.calculate_sector_area(2*math.pi), delta=0.01)\n\n    def test5_calculate_sector_area_5(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(0, areaCalculator.calculate_sector_area(math.pi), delta=0.01)\n\nclass AreaCalculatorTestCalculateAnnulusArea(unittest.TestCase):\n    def test_calculate_annulus_area(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(25.128, areaCalculator.calculate_annulus_area(1, 3), delta=0.01)\n\n    def test_calculate_annulus_area_2(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(0, areaCalculator.calculate_annulus_area(3, 3), delta=0.01)\n\n    def test_calculate_annulus_area_3(self):\n        areaCalculator = AreaCalculator(2000)\n        self.assertAlmostEqual(3.14, areaCalculator.calculate_annulus_area(0, 1), delta=0.01)\n\n    def test_calculate_annulus_area_4(self):\n        areaCalculator = AreaCalculator(0)\n        self.assertAlmostEqual(25.13, areaCalculator.calculate_annulus_area(1, 3), delta=0.01)\n\n    def test_calculate_annulus_area_5(self):\n        areaCalculator = AreaCalculator(2.5)\n        self.assertAlmostEqual(25.13, areaCalculator.calculate_annulus_area(1, 3), delta=0.01)\n\nclass AreaCalculatorTestCalculateMain(unittest.TestCase):\n    def test_main(self):\n        areaCalculator = AreaCalculator(2)\n        self.assertAlmostEqual(12.56, areaCalculator.calculate_circle_area(), delta=0.01)\n        self.assertAlmostEqual(50.27, areaCalculator.calculate_sphere_area(), delta=0.01)\n        self.assertAlmostEqual(50.27, areaCalculator.calculate_cylinder_area(2), delta=0.01)\n        self.assertAlmostEqual(6.28, areaCalculator.calculate_sector_area(math.pi), delta=0.01)\n        self.assertAlmostEqual(25.128, areaCalculator.calculate_annulus_area(1, 3), delta=0.01)", "solutions": ["import math\n\n\nclass AreaCalculator:\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculate_circle_area(self):\n        return math.pi * self.radius ** 2\n\n    def calculate_sphere_area(self):\n        return 4 * math.pi * self.radius ** 2\n\n    def calculate_cylinder_area(self, height):\n        return 2 * math.pi * self.radius * (self.radius + height)\n\n    def calculate_sector_area(self, angle):\n        return self.radius ** 2 * angle / 2\n\n    def calculate_annulus_area(self, inner_radius, outer_radius):\n        return math.pi * (outer_radius ** 2 - inner_radius ** 2)"], "task": "class_eval", "split": "test", "transformation_type": "vanilla", "import_statement": ["import math"], "test_classes": ["AreaCalculatorTestCalculateCircleArea", "AreaCalculatorTestCalculateSphereArea", "AreaCalculatorTestCalculateCylinderArea", "AreaCalculatorTestCalculateSectorArea", "AreaCalculatorTestCalculateAnnulusArea", "AreaCalculatorTestCalculateMain"]}