{"qid": "ClassEval_17", "orig_input": "from datetime import datetime, timedelta\n\nclass CalendarUtil:\n    \"\"\"\n    This is a class as CalendarUtil that provides functionalities to manage calendar events, schedule appointments, and perform conflict checks.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the calendar with an empty list of events.\n        \"\"\"\n        self.events = []\n\n    def add_event(self, event):\n        \"\"\"\n        Add an event to the calendar.\n        :param event: The event to be added to the calendar,dict.\n        >>> calendar = CalendarUtil()\n        >>> calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        >>> calendar.events\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n\n        \"\"\"\n\n    def remove_event(self, event):\n        \"\"\"\n        Remove an event from the calendar.\n        :param event: The event to be removed from the calendar,dict.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        >>> calendar.events\n        []\n\n        \"\"\"\n\n    def get_events(self, date):\n        \"\"\"\n        Get all events on a given date.\n        :param date: The date to get events for,datetime.\n        :return: A list of events on the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.get_events(datetime(2023, 1, 1, 0, 0))\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n\n        \"\"\"\n\n    def is_available(self, start_time, end_time):\n        \"\"\"\n        Check if the calendar is available for a given time slot.\n        :param start_time: The start time of the time slot,datetime.\n        :param end_time: The end time of the time slot,datetime.\n        :return: True if the calendar is available for the given time slot, False otherwise,bool.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 1, 0))\n        False\n\n        \"\"\"\n\n    def get_available_slots(self, date):\n        \"\"\"\n        Get all available time slots on a given date.\n        :param date: The date to get available time slots for,datetime.\n        :return: A list of available time slots on the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]\n        >>> calendar.get_available_slots(datetime(2023, 1, 1))\n        [(datetime.datetime(2023, 1, 1, 23, 0), datetime.datetime(2023, 1, 2, 0, 0))]\n\n        \"\"\"\n\n    def get_upcoming_events(self, num_events):\n        \"\"\"\n        Get the next n upcoming events from a given date.\n        :param date: The date to get upcoming events from,datetime.\n        :param n: The number of upcoming events to get,int.\n        :return: A list of the next n upcoming events from the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},{'date': datetime(2023, 1, 2, 0, 0),'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]\n        >>> calendar.get_upcoming_events(1)\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}, {'date': datetime.datetime(2023, 1, 2, 0, 0), 'end_time': datetime.datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]\n\n        \"\"\"", "input": "from datetime import datetime, timedelta\n\nclass CalendarUtil:\n    \"\"\"\n    This is a class as CalendarUtil that provides functionalities to manage calendar events, schedule appointments, and perform conflict checks.\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\n        Initialize the calendar with an empty list of events.\n        \"\"\"\n        self.events = []\n\n    def add_event(self, event):\n        \"\"\"\n        Add an event to the calendar.\n        :param event: The event to be added to the calendar,dict.\n        >>> calendar = CalendarUtil()\n        >>> calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        >>> calendar.events\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n\n        \"\"\"\n\n    def remove_event(self, event):\n        \"\"\"\n        Remove an event from the calendar.\n        :param event: The event to be removed from the calendar,dict.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        >>> calendar.events\n        []\n\n        \"\"\"\n\n    def get_events(self, date):\n        \"\"\"\n        Get all events on a given date.\n        :param date: The date to get events for,datetime.\n        :return: A list of events on the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.get_events(datetime(2023, 1, 1, 0, 0))\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n\n        \"\"\"\n\n    def is_available(self, start_time, end_time):\n        \"\"\"\n        Check if the calendar is available for a given time slot.\n        :param start_time: The start time of the time slot,datetime.\n        :param end_time: The end time of the time slot,datetime.\n        :return: True if the calendar is available for the given time slot, False otherwise,bool.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 1, 0))\n        False\n\n        \"\"\"\n\n    def get_available_slots(self, date):\n        \"\"\"\n        Get all available time slots on a given date.\n        :param date: The date to get available time slots for,datetime.\n        :return: A list of available time slots on the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]\n        >>> calendar.get_available_slots(datetime(2023, 1, 1))\n        [(datetime.datetime(2023, 1, 1, 23, 0), datetime.datetime(2023, 1, 2, 0, 0))]\n\n        \"\"\"\n\n    def get_upcoming_events(self, num_events):\n        \"\"\"\n        Get the next n upcoming events from a given date.\n        :param date: The date to get upcoming events from,datetime.\n        :param n: The number of upcoming events to get,int.\n        :return: A list of the next n upcoming events from the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},{'date': datetime(2023, 1, 2, 0, 0),'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]\n        >>> calendar.get_upcoming_events(1)\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}, {'date': datetime.datetime(2023, 1, 2, 0, 0), 'end_time': datetime.datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]\n\n        \"\"\"", "method_info": [{"method_name": "add_event", "method_description": "def add_event(self, event):\n        \"\"\"\n        Add an event to the calendar.\n        :param event: The event to be added to the calendar,dict.\n        >>> calendar = CalendarUtil()\n        >>> calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        >>> calendar.events\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n\n        \"\"\"", "test_class": "CalendarTestAddEvent", "test_code": "class CalendarTestAddEvent(unittest.TestCase):\n    def test_add_event(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n\n    def test_add_event_2(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'},\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n\n    def test_add_event_3(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}])\n\n    def test_add_event_4(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 22, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 22, 0), 'description': 'New Year'}])\n\n    def test_add_event_5(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 20, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 20, 0), 'description': 'New Year'}])", "solution_code": "def add_event(self, event):\n        self.events.append(event)", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.events"], "method_dependencies": []}}, {"method_name": "remove_event", "method_description": "def remove_event(self, event):\n        \"\"\"\n        Remove an event from the calendar.\n        :param event: The event to be removed from the calendar,dict.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        >>> calendar.events\n        []\n\n        \"\"\"", "test_class": "CalendarTestRemoveEvent", "test_code": "class CalendarTestRemoveEvent(unittest.TestCase):\n    def test_remove_event(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                               'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [])\n\n    def test_remove_event_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'},\n                           {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                            'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                               'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n             'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}])\n\n    def test_remove_event_3(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'},\n                           {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                            'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                               'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n\n    def test_remove_event_4(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},\n                           {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                            'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                               'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}])\n\n    def test_remove_event_5(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 22, 0), 'description': 'New Year'},\n                           {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                            'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                               'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 22, 0), 'description': 'New Year'}])\n\n    def test_remove_event_6(self):\n        calendar = CalendarUtil()\n        calendar.events = []\n        calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                               'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [])", "solution_code": "def remove_event(self, event):\n        if event in self.events:\n            self.events.remove(event)", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.events"], "method_dependencies": []}}, {"method_name": "get_events", "method_description": "def get_events(self, date):\n        \"\"\"\n        Get all events on a given date.\n        :param date: The date to get events for,datetime.\n        :return: A list of events on the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.get_events(datetime(2023, 1, 1, 0, 0))\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n\n        \"\"\"", "test_class": "CalendarTestGetEvents", "test_code": "class CalendarTestGetEvents(unittest.TestCase):\n    def test_get_events(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_events(datetime(2023, 1, 1)), [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n\n    def test_get_events_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_events(datetime(2023, 1, 2)), [])", "solution_code": "def get_events(self, date):\n        events_on_date = []\n        for event in self.events:\n            if event['date'].date() == date.date():\n                events_on_date.append(event)\n        return events_on_date", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.events"], "method_dependencies": []}}, {"method_name": "is_available", "method_description": "def is_available(self, start_time, end_time):\n        \"\"\"\n        Check if the calendar is available for a given time slot.\n        :param start_time: The start time of the time slot,datetime.\n        :param end_time: The end time of the time slot,datetime.\n        :return: True if the calendar is available for the given time slot, False otherwise,bool.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        >>> calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 1, 0))\n        False\n\n        \"\"\"", "test_class": "CalendarTestIsAvailable", "test_code": "class CalendarTestIsAvailable(unittest.TestCase):\n    def test_is_available(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 1, 0)), False)\n\n    def test_is_available_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 1, 0), datetime(2023, 1, 1, 2, 0)), True)\n\n    def test_is_available_3(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 0, 30)), False)\n\n    def test_is_available_4(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 0, 30), datetime(2023, 1, 1, 1, 0)), False)\n\n    def test_is_available_5(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 1, 0), datetime(2023, 1, 1, 1, 30)), True)", "solution_code": "def is_available(self, start_time, end_time):\n        for event in self.events:\n            if start_time < event['end_time'] and end_time > event['start_time']:\n                return False\n        return True", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.events"], "method_dependencies": []}}, {"method_name": "get_available_slots", "method_description": "def get_available_slots(self, date):\n        \"\"\"\n        Get all available time slots on a given date.\n        :param date: The date to get available time slots for,datetime.\n        :return: A list of available time slots on the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]\n        >>> calendar.get_available_slots(datetime(2023, 1, 1))\n        [(datetime.datetime(2023, 1, 1, 23, 0), datetime.datetime(2023, 1, 2, 0, 0))]\n\n        \"\"\"", "test_class": "CalendarTestGetAvailableSlots", "test_code": "class CalendarTestGetAvailableSlots(unittest.TestCase):\n    def test_get_available_slots(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_available_slots(datetime(2023, 1, 1)),\n                         [(datetime(2023, 1, 1, 23, 0), datetime(2023, 1, 2, 0, 0))])\n\n    def test_get_available_slots_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 1, 0),\n                            'end_time': datetime(2023, 1, 1, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(len(calendar.get_available_slots(datetime(2023, 1, 1))), 23)\n\n    def test_get_available_slots_3(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(len(calendar.get_available_slots(datetime(2023, 1, 1))), 24)\n\n    def test_get_available_slots_4(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(len(calendar.get_available_slots(datetime(2023, 1, 1))), 24)\n\n    def test_get_available_slots_5(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(len(calendar.get_available_slots(datetime(2023, 1, 1))), 24)", "solution_code": "def get_available_slots(self, date):\n        available_slots = []\n        start_time = datetime(date.year, date.month, date.day, 0, 0)\n        end_time = datetime(date.year, date.month, date.day, 23, 59)\n\n        while start_time < end_time:\n            slot_end_time = start_time + timedelta(minutes=60)\n            if self.is_available(start_time, slot_end_time):\n                available_slots.append((start_time, slot_end_time))\n            start_time += timedelta(minutes=60)\n\n\n        return available_slots", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": [], "method_dependencies": ["is_available"]}}, {"method_name": "get_upcoming_events", "method_description": "def get_upcoming_events(self, num_events):\n        \"\"\"\n        Get the next n upcoming events from a given date.\n        :param date: The date to get upcoming events from,datetime.\n        :param n: The number of upcoming events to get,int.\n        :return: A list of the next n upcoming events from the given date,list.\n        >>> calendar = CalendarUtil()\n        >>> calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0), 'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},{'date': datetime(2023, 1, 2, 0, 0),'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]\n        >>> calendar.get_upcoming_events(1)\n        [{'date': datetime.datetime(2023, 1, 1, 0, 0), 'start_time': datetime.datetime(2023, 1, 1, 0, 0), 'end_time': datetime.datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}, {'date': datetime.datetime(2023, 1, 2, 0, 0), 'end_time': datetime.datetime(2023, 1, 2, 1, 0), 'description': 'New Year 2'}]\n\n        \"\"\"", "test_class": "CalendarTestGetUpcomingEvents", "test_code": "class CalendarTestGetUpcomingEvents(unittest.TestCase):\n    def test_get_upcoming_events(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_upcoming_events(1), [])\n\n    def test_get_upcoming_events_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 1, 0),\n                            'end_time': datetime(2023, 1, 1, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_upcoming_events(1), [])\n\n    def test_get_upcoming_events_3(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_upcoming_events(1), [])\n\n    def test_get_upcoming_events_4(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_upcoming_events(2), [])\n\n    def test_get_upcoming_events_5(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},\n                           {'date': datetime(2024, 1, 2, 0, 0), 'start_time': datetime(2024, 1, 2, 1, 0),\n                            'end_time': datetime(2024, 1, 2, 2, 0),\n                            'description': 'New Year 2'}]\n        self.assertEqual(calendar.get_upcoming_events(1), [\n            {'date': datetime(2024, 1, 2, 0, 0), 'start_time': datetime(2024, 1, 2, 1, 0),\n             'end_time': datetime(2024, 1, 2, 2, 0), 'description': 'New Year 2'}])", "solution_code": "def get_upcoming_events(self, num_events):\n        now = datetime.now()\n        upcoming_events = []\n        for event in self.events:\n            if event['start_time'] >= now:\n                upcoming_events.append(event)\n            if len(upcoming_events) == num_events:\n                break\n        return upcoming_events", "dependencies": {"Standalone": false, "lib_dependencies": [], "field_dependencies": ["self.events"], "method_dependencies": []}}], "test_cases": "import unittest\nfrom datetime import datetime\n\n\nclass CalendarTestAddEvent(unittest.TestCase):\n    def test_add_event(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n\n    def test_add_event_2(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'},\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n\n    def test_add_event_3(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}])\n\n    def test_add_event_4(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 22, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 22, 0), 'description': 'New Year'}])\n\n    def test_add_event_5(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 20, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 20, 0), 'description': 'New Year'}])\n\n\nclass CalendarTestRemoveEvent(unittest.TestCase):\n    def test_remove_event(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                               'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [])\n\n    def test_remove_event_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'},\n                           {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                            'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                               'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n             'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}])\n\n    def test_remove_event_3(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'},\n                           {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                            'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                               'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n\n    def test_remove_event_4(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},\n                           {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                            'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                               'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}])\n\n    def test_remove_event_5(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 22, 0), 'description': 'New Year'},\n                           {'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                            'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'}]\n        calendar.remove_event({'date': datetime(2023, 1, 2, 0, 0), 'start_time': datetime(2023, 1, 2, 0, 0),\n                               'end_time': datetime(2023, 1, 2, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 22, 0), 'description': 'New Year'}])\n\n    def test_remove_event_6(self):\n        calendar = CalendarUtil()\n        calendar.events = []\n        calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                               'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [])\n\n\nclass CalendarTestGetEvents(unittest.TestCase):\n    def test_get_events(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_events(datetime(2023, 1, 1)), [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n\n    def test_get_events_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_events(datetime(2023, 1, 2)), [])\n\n\nclass CalendarTestIsAvailable(unittest.TestCase):\n    def test_is_available(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 1, 0)), False)\n\n    def test_is_available_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 1, 0), datetime(2023, 1, 1, 2, 0)), True)\n\n    def test_is_available_3(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 0, 30)), False)\n\n    def test_is_available_4(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 0, 30), datetime(2023, 1, 1, 1, 0)), False)\n\n    def test_is_available_5(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 1, 0), datetime(2023, 1, 1, 1, 30)), True)\n\n\nclass CalendarTestGetAvailableSlots(unittest.TestCase):\n    def test_get_available_slots(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_available_slots(datetime(2023, 1, 1)),\n                         [(datetime(2023, 1, 1, 23, 0), datetime(2023, 1, 2, 0, 0))])\n\n    def test_get_available_slots_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 1, 0),\n                            'end_time': datetime(2023, 1, 1, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(len(calendar.get_available_slots(datetime(2023, 1, 1))), 23)\n\n    def test_get_available_slots_3(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(len(calendar.get_available_slots(datetime(2023, 1, 1))), 24)\n\n    def test_get_available_slots_4(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(len(calendar.get_available_slots(datetime(2023, 1, 1))), 24)\n\n    def test_get_available_slots_5(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(len(calendar.get_available_slots(datetime(2023, 1, 1))), 24)\n\n\nclass CalendarTestGetUpcomingEvents(unittest.TestCase):\n    def test_get_upcoming_events(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_upcoming_events(1), [])\n\n    def test_get_upcoming_events_2(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 1, 0),\n                            'end_time': datetime(2023, 1, 1, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_upcoming_events(1), [])\n\n    def test_get_upcoming_events_3(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_upcoming_events(1), [])\n\n    def test_get_upcoming_events_4(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 2, 1, 0),\n                            'end_time': datetime(2023, 1, 2, 2, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_upcoming_events(2), [])\n\n    def test_get_upcoming_events_5(self):\n        calendar = CalendarUtil()\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'},\n                           {'date': datetime(2024, 1, 2, 0, 0), 'start_time': datetime(2024, 1, 2, 1, 0),\n                            'end_time': datetime(2024, 1, 2, 2, 0),\n                            'description': 'New Year 2'}]\n        self.assertEqual(calendar.get_upcoming_events(1), [\n            {'date': datetime(2024, 1, 2, 0, 0), 'start_time': datetime(2024, 1, 2, 1, 0),\n             'end_time': datetime(2024, 1, 2, 2, 0), 'description': 'New Year 2'}])\n\n\nclass CalendarTestMain(unittest.TestCase):\n    def test_main(self):\n        calendar = CalendarUtil()\n        calendar.add_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'}])\n        calendar.remove_event({'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                               'end_time': datetime(2023, 1, 1, 1, 0), 'description': 'New Year'})\n        self.assertEqual(calendar.events, [])\n        calendar.events = [{'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n                            'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}]\n        self.assertEqual(calendar.get_events(datetime(2023, 1, 1)), [\n            {'date': datetime(2023, 1, 1, 0, 0), 'start_time': datetime(2023, 1, 1, 0, 0),\n             'end_time': datetime(2023, 1, 1, 23, 0), 'description': 'New Year'}])\n        self.assertEqual(calendar.is_available(datetime(2023, 1, 1, 0, 0), datetime(2023, 1, 1, 1, 0)), False)\n        self.assertEqual(calendar.get_available_slots(datetime(2023, 1, 1)),\n                         [(datetime(2023, 1, 1, 23, 0), datetime(2023, 1, 2, 0, 0))])\n        self.assertEqual(calendar.get_upcoming_events(1), [])", "solutions": ["from datetime import datetime, timedelta\n\nclass CalendarUtil:\n    def __init__(self):\n        self.events = []\n\n    def add_event(self, event):\n        self.events.append(event)\n\n    def remove_event(self, event):\n        if event in self.events:\n            self.events.remove(event)\n\n    def get_events(self, date):\n        events_on_date = []\n        for event in self.events:\n            if event['date'].date() == date.date():\n                events_on_date.append(event)\n        return events_on_date\n\n    def is_available(self, start_time, end_time):\n        for event in self.events:\n            if start_time < event['end_time'] and end_time > event['start_time']:\n                return False\n        return True\n\n    def get_available_slots(self, date):\n        available_slots = []\n        start_time = datetime(date.year, date.month, date.day, 0, 0)\n        end_time = datetime(date.year, date.month, date.day, 23, 59)\n\n        while start_time < end_time:\n            slot_end_time = start_time + timedelta(minutes=60)\n            if self.is_available(start_time, slot_end_time):\n                available_slots.append((start_time, slot_end_time))\n            start_time += timedelta(minutes=60)\n\n\n        return available_slots\n\n    def get_upcoming_events(self, num_events):\n        now = datetime.now()\n        upcoming_events = []\n        for event in self.events:\n            if event['start_time'] >= now:\n                upcoming_events.append(event)\n            if len(upcoming_events) == num_events:\n                break\n        return upcoming_events"], "task": "class_eval", "split": "test", "transformation_type": "vanilla", "import_statement": ["from datetime import datetime, timedelta"], "test_classes": ["CalendarTestAddEvent", "CalendarTestRemoveEvent", "CalendarTestGetEvents", "CalendarTestIsAvailable", "CalendarTestGetAvailableSlots", "CalendarTestGetUpcomingEvents", "CalendarTestMain"]}