{"qid": "3533", "orig_input": "There is a snake in an n x n matrix grid and can move in four possible directions. Each cell in the grid is identified by the position: grid[i][j] = (i * n) + j.\nThe snake starts at cell 0 and follows a sequence of commands.\nYou are given an integer n representing the size of the grid and an array of strings commands where each command[i] is either \"UP\", \"RIGHT\", \"DOWN\", and \"LEFT\". It's guaranteed that the snake will remain within the grid boundaries throughout its movement.\nReturn the position of the final cell where the snake ends up after executing commands.\n \nExample 1:\n\nInput: n = 2, commands = [\"RIGHT\",\"DOWN\"]\nOutput: 3\nExplanation:\n\n\n\n\n0\n1\n\n\n2\n3\n\n\n\n\n\n\n0\n1\n\n\n2\n3\n\n\n\n\n\n\n0\n1\n\n\n2\n3\n\n\n\n\n\nExample 2:\n\nInput: n = 3, commands = [\"DOWN\",\"RIGHT\",\"UP\"]\nOutput: 1\nExplanation:\n\n\n\n\n0\n1\n2\n\n\n3\n4\n5\n\n\n6\n7\n8\n\n\n\n\n\n\n0\n1\n2\n\n\n3\n4\n5\n\n\n6\n7\n8\n\n\n\n\n\n\n0\n1\n2\n\n\n3\n4\n5\n\n\n6\n7\n8\n\n\n\n\n\n\n0\n1\n2\n\n\n3\n4\n5\n\n\n6\n7\n8\n\n\n\n\n\n \nConstraints:\n\n2 <= n <= 10\n1 <= commands.length <= 100\ncommands consists only of \"UP\", \"RIGHT\", \"DOWN\", and \"LEFT\".\nThe input is generated such the snake will not move outside of the boundaries.", "input": "There is a snake in an n x n matrix grid and can move in four possible directions. Each cell in the grid is identified by the position: grid[i][j] = (i * n) + j.\nThe snake starts at cell 0 and follows a sequence of commands.\nYou are given an integer n representing the size of the grid and an array of strings commands where each command[i] is either \"UP\", \"RIGHT\", \"DOWN\", and \"LEFT\". It's guaranteed that the snake will remain within the grid boundaries throughout its movement.\nReturn the position of the final cell where the snake ends up after executing commands.\n \nExample 1:\n\nInput: n = 2, commands = [\"RIGHT\",\"DOWN\"]\nOutput: 3\nExplanation:\n\n\n\n\n0\n1\n\n\n2\n3\n\n\n\n\n\n\n0\n1\n\n\n2\n3\n\n\n\n\n\n\n0\n1\n\n\n2\n3\n\n\n\n\n\nExample 2:\n\nInput: n = 3, commands = [\"DOWN\",\"RIGHT\",\"UP\"]\nOutput: 1\nExplanation:\n\n\n\n\n0\n1\n2\n\n\n3\n4\n5\n\n\n6\n7\n8\n\n\n\n\n\n\n0\n1\n2\n\n\n3\n4\n5\n\n\n6\n7\n8\n\n\n\n\n\n\n0\n1\n2\n\n\n3\n4\n5\n\n\n6\n7\n8\n\n\n\n\n\n\n0\n1\n2\n\n\n3\n4\n5\n\n\n6\n7\n8\n\n\n\n\n\n \nConstraints:\n\n2 <= n <= 10\n1 <= commands.length <= 100\ncommands consists only of \"UP\", \"RIGHT\", \"DOWN\", and \"LEFT\".\nThe input is generated such the snake will not move outside of the boundaries.", "test_cases": [{"input": "2\n[\"RIGHT\", \"DOWN\"]", "output": "3", "testtype": "functional"}, {"input": "3\n[\"DOWN\", \"RIGHT\", \"UP\"]", "output": "1", "testtype": "functional"}], "priv_test": "eJztW9tqFEEQ9cEPCfMcJNlrVl+9gqiIopDNg0iEgGwCzj6ICH6Efo1vfpnZZTKX6qpTp3tmLyGTl+nt7a7Lqa7LVGd/3f/z79G99d/Hv9eD0x/ZxeJqmWcPD7LZfHE6z96+ePb83Tw7PJhnL588LUb9ZD/ZT9KTZ9fj7HKZF451tPqYn3/L8+9X56uJL8vF5/zicvHpa/bz8KDmgmPpgo9ff3gVMImdFOIMRrQ8g7U8BemKcql8OSVYDGkOwyaH929aoDeS6KnwVKPKgtVoJcDNM1mQ46OGJPVRqWk4WLPWvijBlisUstIwutUKQvJz8VDIVlPNpfYOyUKTB4+UrZx2tjQmpBwVnxwwL1jcBNOWzdhgGackFA4UfUNB0SJoCdv2gJt5ypFgTQSEw04m6YF3H9LILcxX7lCLw2xs9uK19mwpUBrz7lKQSaK5PNmAA5Go1IKBz+Z+vdBtXk0JHmzQhNk7jKhM5Fdzp4IWipdSTCpM8iUA3ByhYwAvCPhOcWFqDJM2L4ePqE3epxZB3a22QK5lzIeOVbBKOOl0mhxTWuaYgf1O1FEQDBofnQ7ZjNd1Zuwqg7bOsNsHa7fA7BaFbWq8NfU2p0pfu97a2rWoBu3KA2Y+9J7PlBNMLWQndL9uIGoOu3dhVJx+yRNVMmKk/SaE20PyGiSc2DEdHWBwqonC7FfEIDpWNCiwcHcaRx5CwlePZ7SzDjdexYmXw64rkw1WdJur7foqr695dlRPAFcXLj5Ob1fJoCfjUyRhIxskU52sqVYYVUDU0GGtW9tyg7FGWd2gGiOkorCAXPF6VVtlS0hXfqNSCr8MZzwwHNOEBLFfKCBgE3VjSOcwaSRZrw7BTWCmfesdDggqPBfuUAWWVFQqIDvlnV2tyzv7lpFMlZYnCq7HnFCVcp49syKPt3KfSpP0YfZMg9jGw0CKF5+g2TCAOAANodvQJwdlJ4ccTE/oyHgS23mKDXs4TyLoaeCawiW/RJ3c6XvwfnL/J5OPNt2BUEOHYMvn+bAt4aSiPZsUis/4ls+0jyV3dLK7u95NMHHvDcqugtmMBVcNsiWB6ClrUUtYY2c3bqXMJTOrB2zTSAAkBl0EmX+LoOyOZIYwDwnYOqqPwFRIW4V21MDiiYSnkDFPEbAHbKJNO/inMu1GIjUvsy4cebRI8qYlY26IiC0gbnDeY/MwpOFv7oDLEWEm0qvM0xvDs2XQN6AxHYmmyIR0PwlQ2QbgxsWBwQntsaNaHEgux8f1YNIoMLg+MnpZRw0CRJPqCWiCwsaMSk3bS3ZanKYEahtxgJKvZrEq0AzoFqHdbXRME3vsVKDR6XK0jrlpoe7zbIJYXqQ+hZdM+7v+yUI3P7GL6c+f/X7wHyRmoLM=", "solutions": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        # Initialize the position of the snake\n        row, col = 0, 0\n        \n        # Define the movements for each direction\n        directions = {\n            \"UP\": (-1, 0),\n            \"DOWN\": (1, 0),\n            \"LEFT\": (0, -1),\n            \"RIGHT\": (0, 1)\n        }\n        \n        # Iterate through the commands\n        for command in commands:\n            # Update the position of the snake based on the command\n            row_move, col_move = directions[command]\n            new_row = row + row_move\n            new_col = col + col_move\n            \n            # Check if the new position is within the grid boundaries\n            if 0 <= new_row < n and 0 <= new_col < n:\n                row, col = new_row, new_col\n            \n        # Calculate the final position of the snake\n        return row * n + col", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def finalPositionOfSnake(self, n: int, commands: List[str]) -> int:\n        "}