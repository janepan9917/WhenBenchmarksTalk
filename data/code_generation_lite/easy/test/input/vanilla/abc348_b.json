{"qid": "abc348_b", "orig_input": "On the xy-plane, there are N points with ID numbers from 1 to N. Point i is located at coordinates (X_i, Y_i), and no two points have the same coordinates.\nFrom each point, find the farthest point and print its ID number.\r\nIf multiple points are the farthest, print the smallest of the ID numbers of those points.\nHere, we use the Euclidean distance: for two points (x_1,y_1) and (x_2,y_2), the distance between them is \\sqrt{(x_1-x_2)^{2}+(y_1-y_2)^{2}}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nX_1 Y_1\r\nX_2 Y_2\r\n\\vdots\r\nX_N Y_N\n\nOutput\n\nPrint N lines. The i-th line should contain the ID number of the farthest point from point i.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- -1000 \\leq X_i, Y_i \\leq 1000\n- (X_i, Y_i) \\neq (X_j, Y_j) if i \\neq j.\n- All input values are integers.\n\nSample Input 1\n\n4\r\n0 0\r\n2 4\r\n5 0\r\n3 4\n\nSample Output 1\n\n3\r\n3\r\n1\r\n1\r\n\nThe following figure shows the arrangement of the points. Here, P_i represents point i.\r\n\r\nThe farthest point from point 1 are points 3 and 4, and point 3 has the smaller ID number.\nThe farthest point from point 2 is point 3.\nThe farthest point from point 3 are points 1 and 2, and point 1 has the smaller ID number.\nThe farthest point from point 4 is point 1.\n\nSample Input 2\n\n6\r\n3 2\r\n1 6\r\n4 5\r\n1 3\r\n5 5\r\n9 8\n\nSample Output 2\n\n6\r\n6\r\n6\r\n6\r\n6\r\n4", "input": "On the xy-plane, there are N points with ID numbers from 1 to N. Point i is located at coordinates (X_i, Y_i), and no two points have the same coordinates.\nFrom each point, find the farthest point and print its ID number.\r\nIf multiple points are the farthest, print the smallest of the ID numbers of those points.\nHere, we use the Euclidean distance: for two points (x_1,y_1) and (x_2,y_2), the distance between them is \\sqrt{(x_1-x_2)^{2}+(y_1-y_2)^{2}}.\n\nInput\n\nThe input is given from Standard Input in the following format:\nN\r\nX_1 Y_1\r\nX_2 Y_2\r\n\\vdots\r\nX_N Y_N\n\nOutput\n\nPrint N lines. The i-th line should contain the ID number of the farthest point from point i.\n\nConstraints\n\n\n- 2 \\leq N \\leq 100\n- -1000 \\leq X_i, Y_i \\leq 1000\n- (X_i, Y_i) \\neq (X_j, Y_j) if i \\neq j.\n- All input values are integers.\n\nSample Input 1\n\n4\r\n0 0\r\n2 4\r\n5 0\r\n3 4\n\nSample Output 1\n\n3\r\n3\r\n1\r\n1\r\n\nThe following figure shows the arrangement of the points. Here, P_i represents point i.\r\n\r\nThe farthest point from point 1 are points 3 and 4, and point 3 has the smaller ID number.\nThe farthest point from point 2 is point 3.\nThe farthest point from point 3 are points 1 and 2, and point 1 has the smaller ID number.\nThe farthest point from point 4 is point 1.\n\nSample Input 2\n\n6\r\n3 2\r\n1 6\r\n4 5\r\n1 3\r\n5 5\r\n9 8\n\nSample Output 2\n\n6\r\n6\r\n6\r\n6\r\n6\r\n4", "test_cases": [{"input": "4\n0 0\n2 4\n5 0\n3 4\n", "output": "3\n3\n1\n1\n", "testtype": "stdin"}, {"input": "6\n3 2\n1 6\n4 5\n1 3\n5 5\n9 8\n", "output": "6\n6\n6\n6\n6\n4\n", "testtype": "stdin"}], "priv_test": "", "solutions": "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\nN = int(input())\npoints = []\nfor _ in range(N):\n    x, y = map(int, input().split())\n    points.append((x, y))\n\nfor i in range(N):\n    x1, y1 = points[i]\n    max_dist = 0\n    farthest_point = None\n    for j in range(N):\n        if i != j:\n            x2, y2 = points[j]\n            dist = distance(x1, y1, x2, y2)\n            if dist > max_dist:\n                max_dist = dist\n                farthest_point = j + 1\n    print(farthest_point)", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": ""}