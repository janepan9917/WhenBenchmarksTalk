{"qid": "3398", "orig_input": "You are given a 2D matrix grid of size 3 x 3 consisting only of characters 'B' and 'W'. Character 'W' represents the white color, and character 'B' represents the black color.\nYour task is to change the color of at most one cell so that the matrix has a 2 x 2 square where all cells are of the same color.\nReturn true if it is possible to create a 2 x 2 square of the same color, otherwise, return false.\n \n\n\nExample 1:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]\nOutput: true\nExplanation:\nIt can be done by changing the color of the grid[0][2].\n\nExample 2:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]\nOutput: false\nExplanation:\nIt cannot be done by changing at most one cell.\n\nExample 3:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]\nOutput: true\nExplanation:\nThe grid already contains a 2 x 2 square of the same color.\n\n \nConstraints:\n\ngrid.length == 3\ngrid[i].length == 3\ngrid[i][j] is either 'W' or 'B'.", "input": "You are given a 2D matrix grid of size 3 x 3 consisting only of characters 'B' and 'W'. Character 'W' represents the white color, and character 'B' represents the black color.\nYour task is to change the color of at most one cell so that the matrix has a 2 x 2 square where all cells are of the same color.\nReturn true if it is possible to create a 2 x 2 square of the same color, otherwise, return false.\n \n\n\nExample 1:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"B\"]]\nOutput: true\nExplanation:\nIt can be done by changing the color of the grid[0][2].\n\nExample 2:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"B\"]]\nOutput: false\nExplanation:\nIt cannot be done by changing at most one cell.\n\nExample 3:\n\n \n \n \n \n \n \n \n \n \n\n\nInput: grid = [[\"B\",\"W\",\"B\"],[\"B\",\"W\",\"W\"],[\"B\",\"W\",\"W\"]]\nOutput: true\nExplanation:\nThe grid already contains a 2 x 2 square of the same color.\n\n \nConstraints:\n\ngrid.length == 3\ngrid[i].length == 3\ngrid[i][j] is either 'W' or 'B'.", "test_cases": [{"input": "[[\"B\", \"W\", \"B\"], [\"B\", \"W\", \"W\"], [\"B\", \"W\", \"B\"]]", "output": "true", "testtype": "functional"}, {"input": "[[\"B\", \"W\", \"B\"], [\"W\", \"B\", \"W\"], [\"B\", \"W\", \"B\"]]", "output": "false", "testtype": "functional"}, {"input": "[[\"B\", \"W\", \"B\"], [\"B\", \"W\", \"W\"], [\"B\", \"W\", \"W\"]]", "output": "true", "testtype": "functional"}], "priv_test": "eJxrYJmqz8MABhEaQEZ0tVJmXkFpiZKVglJ0dIySU4ySjgIyFaujABQOxy6MqToWyFLKLy2BGllSVJoKEilJLS4pqSxIBYmlleYll2Tm5yXmKNXqKGC3Pxy7ReFwCpswFe0n7FEcwUIN+5HIWB2oLUgkVjH6+ps28U7IjzT0N3p6Cx8c6Y0+9iOF/gCFO7oHndCEw2kV7vgDGI8wpfaHY/coXe0fiPyGI2Phz280LmeIKXtoG9/46xXqxTf96xVke+ldvqD7lxgxauYr+ofzQKfrgWk3kFuP0L88o009Rof0FjtFDwAxgnTR", "solutions": "class Solution:\n    def canMakeSquare(self, grid: List[List[str]]) -> bool:\n        def find_square(i, j, color):\n            for row in range(i, i + 2):\n                for col in range(j, j + 2):\n                    if row >= 3 or col >= 3 or grid[row][col] != color:\n                        return False\n            return True\n\n        def flip_cell(i, j):\n            grid[i][j] = 'W' if grid[i][j] == 'B' else 'B'\n\n        for i in range(2):\n            for j in range(2):\n                if find_square(i, j, grid[i][j]):\n                    return True\n\n                for x in range(3):\n                    for y in range(3):\n                        if grid[x][y] != grid[i][j]:\n                            flip_cell(x, y)\n                            if find_square(i, j, grid[i][j]):\n                                flip_cell(x, y)\n                                return True\n                            flip_cell(x, y)\n\n        return find_square(1, 1, grid[1][1])", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def canMakeSquare(self, grid: List[List[str]]) -> bool:\n        "}