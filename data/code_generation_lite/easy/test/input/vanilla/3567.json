{"qid": "3567", "orig_input": "You are given a string date representing a Gregorian calendar date in the yyyy-mm-dd format.\ndate can be written in its binary representation obtained by converting year, month, and day to their binary representations without any leading zeroes and writing them down in year-month-day format.\nReturn the binary representation of date.\n \nExample 1:\n\nInput: date = \"2080-02-29\"\nOutput: \"100000100000-10-11101\"\nExplanation:\n100000100000, 10, and 11101 are the binary representations of 2080, 02, and 29 respectively.\n\nExample 2:\n\nInput: date = \"1900-01-01\"\nOutput: \"11101101100-1-1\"\nExplanation:\n11101101100, 1, and 1 are the binary representations of 1900, 1, and 1 respectively.\n\n \nConstraints:\n\ndate.length == 10\ndate[4] == date[7] == '-', and all other date[i]'s are digits.\nThe input is generated such that date represents a valid Gregorian calendar date between Jan 1^st, 1900 and Dec 31^st, 2100 (both inclusive).", "input": "You are given a string date representing a Gregorian calendar date in the yyyy-mm-dd format.\ndate can be written in its binary representation obtained by converting year, month, and day to their binary representations without any leading zeroes and writing them down in year-month-day format.\nReturn the binary representation of date.\n \nExample 1:\n\nInput: date = \"2080-02-29\"\nOutput: \"100000100000-10-11101\"\nExplanation:\n100000100000, 10, and 11101 are the binary representations of 2080, 02, and 29 respectively.\n\nExample 2:\n\nInput: date = \"1900-01-01\"\nOutput: \"11101101100-1-1\"\nExplanation:\n11101101100, 1, and 1 are the binary representations of 1900, 1, and 1 respectively.\n\n \nConstraints:\n\ndate.length == 10\ndate[4] == date[7] == '-', and all other date[i]'s are digits.\nThe input is generated such that date represents a valid Gregorian calendar date between Jan 1^st, 1900 and Dec 31^st, 2100 (both inclusive).", "test_cases": [{"input": "\"2080-02-29\"", "output": "\"100000100000-10-11101\"", "testtype": "functional"}, {"input": "\"1900-01-01\"", "output": "\"11101101100-1-1\"", "testtype": "functional"}], "priv_test": "eJydV01LAzEQ9eDZ31BybmQm+5HGXyJYDyIVClILbg8iBQ/+BP2/ZiabbYVMl0laaGGXt483b97Mfl3/ft9c8bk/xj8Pn2a72x8Gc7cwa4MBGotooVkbs1yYt8NwuoYI/I3X6Sfel24aNu/D8LHf0G0vh93zsH3bPb2a43LxD9uBj9jONlDABj4RHggXwNJjQIUfuYOFYB1e4E7I/AyInwr43sJqBh75ETXcnYVZ7lbNuo2ULZZET9Uk4Zkxi6JEx45KCr2IPjolCaP0C/GOfilrMkoCJ7to7diR3mXJYTwMrZTcQesteItlo+RjUx/pJQ+eOtQFSRU2S+5Qvcup+6PLW9kviTx7Rond9lRQSZjEPBdUrYyD0HD/e6mgmKVJIaM3TEf4WDL7ZBjM+KDPAPJN9GSJ/yQPcgaoqfd+xusMr/Y6hm7Fmgg9mmBPmaul3QRWpBwvOJlRHy4YXMRtpFzMfrFp1mmN6AP7XDZKToAxebXcPZIs6CTRx2KmVqqYF1jmfj4vqniHQNniytmSWOdsUY/Q6HEkK0JJlak7p/ZXlxRmG4h5V83nWEtx4crz2VZkeaqlvFRMtdSJwbYVBvOkc/1kjkEI1JvFSiabjPD6Mjrk9VYMFMbOw1O9r/AOJ0/ms1Lqa9nJCZ6DFqoCvKH9UNhqR86Y90N1x6Mnp8grOaaWxHH7rDDKhQ3xZJTKDZFMKGuO1UOz5zcJOb8hL7b6AHewiltKW7b4NOlTRWumZssJLnYmZMG5h2bQH39u/wDWHeCb", "solutions": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        year, month, day = date.split('-')\n        year_bin = bin(int(year))[2:]\n        month_bin = bin(int(month))[2:]\n        day_bin = bin(int(day))[2:]\n        return f\"{year_bin}-{month_bin}-{day_bin}\"", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def convertDateToBinary(self, date: str) -> str:\n        "}