{"qid": "3426", "orig_input": "You are given a string s. Simulate events at each second i:\n\nIf s[i] == 'E', a person enters the waiting room and takes one of the chairs in it.\nIf s[i] == 'L', a person leaves the waiting room, freeing up a chair.\n\nReturn the minimum number of chairs needed so that a chair is available for every person who enters the waiting room given that it is initially empty.\n \nExample 1:\n\nInput: s = \"EEEEEEE\"\nOutput: 7\nExplanation:\nAfter each second, a person enters the waiting room and no person leaves it. Therefore, a minimum of 7 chairs is needed.\n\nExample 2:\n\nInput: s = \"ELELEEL\"\nOutput: 2\nExplanation:\nLet's consider that there are 2 chairs in the waiting room. The table below shows the state of the waiting room at each second.\n\n\n\n\nSecond\nEvent\nPeople in the Waiting Room\nAvailable Chairs\n\n\n0\nEnter\n1\n1\n\n\n1\nLeave\n0\n2\n\n\n2\nEnter\n1\n1\n\n\n3\nLeave\n0\n2\n\n\n4\nEnter\n1\n1\n\n\n5\nEnter\n2\n0\n\n\n6\nLeave\n1\n1\n\n\n\nExample 3:\n\nInput: s = \"ELEELEELLL\"\nOutput: 3\nExplanation:\nLet's consider that there are 3 chairs in the waiting room. The table below shows the state of the waiting room at each second.\n\n\n\n\nSecond\nEvent\nPeople in the Waiting Room\nAvailable Chairs\n\n\n0\nEnter\n1\n2\n\n\n1\nLeave\n0\n3\n\n\n2\nEnter\n1\n2\n\n\n3\nEnter\n2\n1\n\n\n4\nLeave\n1\n2\n\n\n5\nEnter\n2\n1\n\n\n6\nEnter\n3\n0\n\n\n7\nLeave\n2\n1\n\n\n8\nLeave\n1\n2\n\n\n9\nLeave\n0\n3\n\n\n\n \nConstraints:\n\n1 <= s.length <= 50\ns consists only of the letters 'E' and 'L'.\ns represents a valid sequence of entries and exits.", "input": "You are given a string s. Simulate events at each second i:\n\nIf s[i] == 'E', a person enters the waiting room and takes one of the chairs in it.\nIf s[i] == 'L', a person leaves the waiting room, freeing up a chair.\n\nReturn the minimum number of chairs needed so that a chair is available for every person who enters the waiting room given that it is initially empty.\n \nExample 1:\n\nInput: s = \"EEEEEEE\"\nOutput: 7\nExplanation:\nAfter each second, a person enters the waiting room and no person leaves it. Therefore, a minimum of 7 chairs is needed.\n\nExample 2:\n\nInput: s = \"ELELEEL\"\nOutput: 2\nExplanation:\nLet's consider that there are 2 chairs in the waiting room. The table below shows the state of the waiting room at each second.\n\n\n\n\nSecond\nEvent\nPeople in the Waiting Room\nAvailable Chairs\n\n\n0\nEnter\n1\n1\n\n\n1\nLeave\n0\n2\n\n\n2\nEnter\n1\n1\n\n\n3\nLeave\n0\n2\n\n\n4\nEnter\n1\n1\n\n\n5\nEnter\n2\n0\n\n\n6\nLeave\n1\n1\n\n\n\nExample 3:\n\nInput: s = \"ELEELEELLL\"\nOutput: 3\nExplanation:\nLet's consider that there are 3 chairs in the waiting room. The table below shows the state of the waiting room at each second.\n\n\n\n\nSecond\nEvent\nPeople in the Waiting Room\nAvailable Chairs\n\n\n0\nEnter\n1\n2\n\n\n1\nLeave\n0\n3\n\n\n2\nEnter\n1\n2\n\n\n3\nEnter\n2\n1\n\n\n4\nLeave\n1\n2\n\n\n5\nEnter\n2\n1\n\n\n6\nEnter\n3\n0\n\n\n7\nLeave\n2\n1\n\n\n8\nLeave\n1\n2\n\n\n9\nLeave\n0\n3\n\n\n\n \nConstraints:\n\n1 <= s.length <= 50\ns consists only of the letters 'E' and 'L'.\ns represents a valid sequence of entries and exits.", "test_cases": [{"input": "\"EEEEEEE\"", "output": "7", "testtype": "functional"}, {"input": "\"ELELEEL\"", "output": "2", "testtype": "functional"}, {"input": "\"ELEELEELLL\"", "output": "3", "testtype": "functional"}], "priv_test": "eJy1Vs1Kw0AQ9tCbLxH2XMRqq+I9t3mAgvVQpEJB0kI3BxXBh6jva9Kd2cbMVPg6ZA7Dbkjm55tvZvI9+vm4vDjIfNccnj7DutrWMTwWYRFKKhtB1CKEcRE2dWQbt9ftPa52Mb5vV+2T17p6ietNtXwLX+PirzvMV6Oc7qgkM2jECCUjB90aI8qaH6RX+DWivrcbyJuOFvoekL6f6RR1REa2Myxb9f0EDqIkpksWbfQBsuqrAJnMhcBN5OLUhHnp3CEdCfN8VdCxgj2d4nIRwQDsDNCdmJPAKuLmJkOTB9qg/ZhoITPveOKUeGhJlio3qOjigWQOZPenZu4EAo9sSO7OWDZc1G4rdXCQPKxyY0Mj+xMgjqp/0yviHpyaJl9QcFxr0UgC7g4TdajGXFjNtoF2pk3LGdQ7g8RKp0RVCZzL7jJjf3yKkxg6zAd/zHnpys8FycXA9N/ufd5f/QIxaGm5", "solutions": "class Solution:\n    def minimumChairs(self, s: str) -> int:\n        chairs_needed = 0\n        current_chairs = 0\n        \n        for event in s:\n            if event == 'E':\n                current_chairs += 1\n                chairs_needed = max(chairs_needed, current_chairs)\n            else:\n                current_chairs -= 1\n        \n        return chairs_needed", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def minimumChairs(self, s: str) -> int:\n        "}