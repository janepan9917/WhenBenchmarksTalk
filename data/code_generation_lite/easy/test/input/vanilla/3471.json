{"qid": "3471", "orig_input": "You have an array of floating point numbers averages which is initially empty. You are given an array nums of n integers where n is even.\nYou repeat the following procedure n / 2 times:\n\nRemove the smallest element, minElement, and the largest element maxElement, from nums.\nAdd (minElement + maxElement) / 2 to averages.\n\nReturn the minimum element in averages.\n \nExample 1:\n\nInput: nums = [7,8,3,4,15,13,4,1]\nOutput: 5.5\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[7,8,3,4,15,13,4,1]\n[]\n\n\n1\n[7,8,3,4,13,4]\n[8]\n\n\n2\n[7,8,4,4]\n[8,8]\n\n\n3\n[7,4]\n[8,8,6]\n\n\n4\n[]\n[8,8,6,5.5]\n\n\n\nThe smallest element of averages, 5.5, is returned.\nExample 2:\n\nInput: nums = [1,9,8,3,10,5]\nOutput: 5.5\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[1,9,8,3,10,5]\n[]\n\n\n1\n[9,8,3,5]\n[5.5]\n\n\n2\n[8,5]\n[5.5,6]\n\n\n3\n[]\n[5.5,6,6.5]\n\n\n\n\nExample 3:\n\nInput: nums = [1,2,3,7,8,9]\nOutput: 5.0\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[1,2,3,7,8,9]\n[]\n\n\n1\n[2,3,7,8]\n[5]\n\n\n2\n[3,7]\n[5,5]\n\n\n3\n[]\n[5,5,5]\n\n\n\n\n \nConstraints:\n\n2 <= n == nums.length <= 50\nn is even.\n1 <= nums[i] <= 50", "input": "You have an array of floating point numbers averages which is initially empty. You are given an array nums of n integers where n is even.\nYou repeat the following procedure n / 2 times:\n\nRemove the smallest element, minElement, and the largest element maxElement, from nums.\nAdd (minElement + maxElement) / 2 to averages.\n\nReturn the minimum element in averages.\n \nExample 1:\n\nInput: nums = [7,8,3,4,15,13,4,1]\nOutput: 5.5\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[7,8,3,4,15,13,4,1]\n[]\n\n\n1\n[7,8,3,4,13,4]\n[8]\n\n\n2\n[7,8,4,4]\n[8,8]\n\n\n3\n[7,4]\n[8,8,6]\n\n\n4\n[]\n[8,8,6,5.5]\n\n\n\nThe smallest element of averages, 5.5, is returned.\nExample 2:\n\nInput: nums = [1,9,8,3,10,5]\nOutput: 5.5\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[1,9,8,3,10,5]\n[]\n\n\n1\n[9,8,3,5]\n[5.5]\n\n\n2\n[8,5]\n[5.5,6]\n\n\n3\n[]\n[5.5,6,6.5]\n\n\n\n\nExample 3:\n\nInput: nums = [1,2,3,7,8,9]\nOutput: 5.0\nExplanation:\n\n\n\nstep\nnums\naverages\n\n\n0\n[1,2,3,7,8,9]\n[]\n\n\n1\n[2,3,7,8]\n[5]\n\n\n2\n[3,7]\n[5,5]\n\n\n3\n[]\n[5,5,5]\n\n\n\n\n \nConstraints:\n\n2 <= n == nums.length <= 50\nn is even.\n1 <= nums[i] <= 50", "test_cases": [{"input": "[7, 8, 3, 4, 15, 13, 4, 1]", "output": "5.5", "testtype": "functional"}, {"input": "[1, 9, 8, 3, 10, 5]", "output": "5.5", "testtype": "functional"}, {"input": "[1, 2, 3, 7, 8, 9]", "output": "5.0", "testtype": "functional"}], "priv_test": "eJzNWEtuFEEMZcEJOEFr1tbQdv26OQlSlAVCICGhgMRkgRASh4D74me700P1qgiRSDo9/alyle33nj358fxXffHMfl6/1Iubb6cPd5/vL6dX0+lGaHo4+M9DtrNc3fLV+G5WN54PNjsLnTVc355oOn26v8Tu+Fzw4PLuy+Xy9fM7PHp/f/f28uHT3ZuPp+80XXtSaWqboUJTommhKXcW84jFMlMmPfkhTLzggtnOK/md7EP8sDkLcbHXJQb7O5+qxpYwiduEUWZmJSnElaTZ6211wfTOEynnMuvPSIC4N7Kc5zEbKdP/d3ROpTzqlWb2qX8PyB7c4kpN0bE+Nn8KvUnBOCnmpqwf1VgiyYkD/uinvlfogU3VqCSzk1UvlQETYyLuxVgmB99khGSsyE/gDFV1cVEn2Sim1kGMDG7oNnVvurZuXYw2uk3dtO5S+SLGF2WU0iTNlJiSmkyGjUKpUmqUFkorZSUnUxbKumKmXChXyo3yQvmfUMz1zGNbLHzNAoyIz3vUEH2LYvEUIPAW2dWDLeyJsLzoOEESdJwgQciXjlNPJ3V1SgfRrCPhF2pHiRzUBAdKhtu6UQ2pbQzOxSv4rhkwWYbrh0CnIcSkWEA8ErEWlg1ktghjsyUN7zWiyJYbC2rdg2wJyJaqJL5fi7PlEluOgPPSB7uNYX0AHt1KT7dQpEoCT7NH1fxvEaYSIUsRMg5RWAO3PYbGMFiN/r2MpFEclgOU63B5K5AJdTNZIW+Ql2b3DKmAugg0ySuPSsgCTWHoVoI+Q6gYRzatgvasULJsxvSACJlKQYEqLKO8N2sJMgxBipLpma5Vep7UvxMkOTZCch6rGukQ2sGdrA4fyIDGbUqA3F6Ictu5zH67Op/L7BjN647DkECTlXmXT9mGp4C0wR5Pms/nvn7KUIfJxiTZ2stD3zFoi6PvZbMGZ7J5XcxBcPYY86Hm9f87OofKPEpQFBek2vS/9tkc6u5baJpGPAfkrHxZUpZdHEsIIhArgVjUtSwuhnjOW/eEIlRjjH8BaVFh8pW8FucBZreo5HPQQVx5m9dTF+6Dn2OoreHD7CvmEHt2bYDvtjL74xwV04au4fKBN2VM3wUC92h1jvA99Udfy4Z8TWRifmhxhvUyoZgk632TdbqKIEW/AmRFhVisOmGpjGZYh2jlSDZE365oiq0DrlZaBCWHvekVnSs2yfpm9mZaMFiRpxgVq3i4XrCoHOAnw2W1OmU2aa8e7a1TBNIfOLJGj7h65Vr8z4ZHWwfEWhdTHKFpb4oB2uosKle0jhYnb63PEuvU4OEcbTjePUpT/PtS9j0djY1VCPy3QE99+B/9pWRsU7c/z78BOUlR4w==", "solutions": "class Solution:\n    def minimumAverage(self, nums: List[int]) -> float:\n        averages = []\n        nums.sort()\n        n = len(nums)\n        \n        for i in range(n // 2):\n            minElement = nums.pop(0)\n            maxElement = nums.pop()\n            averages.append((minElement + maxElement) / 2)\n        \n        return min(averages)", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def minimumAverage(self, nums: List[int]) -> float:\n        "}