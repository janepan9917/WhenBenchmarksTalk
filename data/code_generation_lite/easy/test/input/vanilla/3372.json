{"qid": "3372", "orig_input": "You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing.\n \nExample 1:\n\nInput: nums = [1,4,3,3,2]\nOutput: 2\nExplanation:\nThe strictly increasing subarrays of nums are [1], [2], [3], [3], [4], and [1,4].\nThe strictly decreasing subarrays of nums are [1], [2], [3], [3], [4], [3,2], and [4,3].\nHence, we return 2.\n\nExample 2:\n\nInput: nums = [3,3,3,3]\nOutput: 1\nExplanation:\nThe strictly increasing subarrays of nums are [3], [3], [3], and [3].\nThe strictly decreasing subarrays of nums are [3], [3], [3], and [3].\nHence, we return 1.\n\nExample 3:\n\nInput: nums = [3,2,1]\nOutput: 3\nExplanation:\nThe strictly increasing subarrays of nums are [3], [2], and [1].\nThe strictly decreasing subarrays of nums are [3], [2], [1], [3,2], [2,1], and [3,2,1].\nHence, we return 3.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 50", "input": "You are given an array of integers nums. Return the length of the longest subarray of nums which is either strictly increasing or strictly decreasing.\n \nExample 1:\n\nInput: nums = [1,4,3,3,2]\nOutput: 2\nExplanation:\nThe strictly increasing subarrays of nums are [1], [2], [3], [3], [4], and [1,4].\nThe strictly decreasing subarrays of nums are [1], [2], [3], [3], [4], [3,2], and [4,3].\nHence, we return 2.\n\nExample 2:\n\nInput: nums = [3,3,3,3]\nOutput: 1\nExplanation:\nThe strictly increasing subarrays of nums are [3], [3], [3], and [3].\nThe strictly decreasing subarrays of nums are [3], [3], [3], and [3].\nHence, we return 1.\n\nExample 3:\n\nInput: nums = [3,2,1]\nOutput: 3\nExplanation:\nThe strictly increasing subarrays of nums are [3], [2], and [1].\nThe strictly decreasing subarrays of nums are [3], [2], [1], [3,2], [2,1], and [3,2,1].\nHence, we return 3.\n\n \nConstraints:\n\n1 <= nums.length <= 50\n1 <= nums[i] <= 50", "test_cases": [{"input": "[1, 4, 3, 3, 2]", "output": "2", "testtype": "functional"}, {"input": "[3, 3, 3, 3]", "output": "1", "testtype": "functional"}, {"input": "[3, 2, 1]", "output": "3", "testtype": "functional"}], "priv_test": "eJzNV8tqG0EQzCHnfIPQeUh23jP5koDxIQQHDME2RD6EEMhHJP+bquqWLZYcvBKB2NrVvLanu7eqevTz9e/25pX+PrxD4+r7/vbu4fGwf7/bX8UWdiWFXbKvgm4suBYM8cphV9EdmCpqcoSzJaKLb3QzH8SXN1OzhXwu2rN5YsWwVRjp1/uw298/HtyLwu7h5uvh8O3hhgOfH+8+HW7v7z5+2f8Iu1N/tb1vkmAx0dn2ZL10DHXzhUN5rLbKL98qw/kM03lxW+gnbj0tIPbn+eZj9ZQ1ZZ+5jAzuApOw8f99VuHEl4dDQBKMBCIh5+9V7xdTuQtNxCVzqVdPFLC92KU+0Tkd5c3XRYcqAVzteY6lS97niXfToE+ElHK+SbgKQgLiiAV3eIw0wChCQTfOgOwAkQAnkIOurYyawuISOlejnzUBIPeAMAFgPMUxNIZs5gAYwm14z8dlYATsn3hDq4Z1HBtIi31gAIab/KvcMso8A8vyoNEheMMYMlynM5gMsWvzpqAnG4oIRjw0xjI9Q1iJh7gmsQGLg01olQXJvdr5cWRTw+p4bC5wVdCkzlXTRfKYsMrDUFocalSPGE1B2C4SQ9fUYUIm7DSXzwugMwULJLk4dBqb+IZDndnF5hHpycywcRVuJxvvhAbWEAZMMsFT9V4q04iJKNsAZw2VmCIYE8dkLBM4THYOF2j9OvwN0gEfLANGISLIcCUwMBwBHH4SeJVIIQcSQQWaJBEDZEiKEAlMwhnJsyjWwSThPUXhmvRLSsqC5DAJDWkROMM6irq8PIxh5YHyla10VkOXBK54XTIQqUYvXo3Xm27J+nAw/rPrgorgx5HiV7WDy6LaL1atVSptOFq4aA8ZZUrLGrwbCLjY2SQ5000AmqXAqU4NURjJLz94cc6T1ey54iePywJk9vI8uahS55sDx+AUOVBIMxKpuchWyckUR6oqU+eMdBn4BKVIxEKq4YN2tlXgnBuJ0pXiRrgii8hibg3JqQsyd/F0Daq6IS1DfFdpZEWc8iZSwWzbRZVINYb+HyVVQZqQWihJVStaJdIH3kt/OFz55JA11WupK5dF7l1UySE+6/K0JZCpEHqwxCclrLGEc7+sVEnh4lHwiu6cLPSb5VNvlK9zIM3RKoXZlSCyLsRjmHq75XgAgVYiFay/+F8fpLacFpJVUVZO0WIR6ddcbBuYXe0o6FJaT87wxx838bnqimndZcV5qMrtQku/uv9E6rI2TYb68wHAetG1irupPW0HHiDoCPvNu/4bLD8JBRdckMVoKvbX+xbOX/96+wcvulTE", "solutions": "class Solution:\n    def longestMonotonicSubarray(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n <= 1:\n            return n\n\n        max_len = 1\n        increasing = decreasing = 1\n\n        for i in range(1, n):\n            if nums[i] > nums[i-1]:\n                increasing += 1\n                decreasing = 1\n            elif nums[i] < nums[i-1]:\n                decreasing += 1\n                increasing = 1\n            else:\n                increasing = decreasing = 1\n\n            max_len = max(max_len, max(increasing, decreasing))\n\n        return max_len", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def longestMonotonicSubarray(self, nums: List[int]) -> int:\n        "}