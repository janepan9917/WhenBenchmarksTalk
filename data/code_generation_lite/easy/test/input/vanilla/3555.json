{"qid": "3555", "orig_input": "You are given an integer array nums, an integer k, and an integer multiplier.\nYou need to perform k operations on nums. In each operation:\n\nFind the minimum value x in nums. If there are multiple occurrences of the minimum value, select the one that appears first.\nReplace the selected minimum value x with x * multiplier.\n\nReturn an integer array denoting the final state of nums after performing all k operations.\n \nExample 1:\n\nInput: nums = [2,1,3,5,6], k = 5, multiplier = 2\nOutput: [8,4,6,5,6]\nExplanation:\n\n\n\nOperation\nResult\n\n\nAfter operation 1\n[2, 2, 3, 5, 6]\n\n\nAfter operation 2\n[4, 2, 3, 5, 6]\n\n\nAfter operation 3\n[4, 4, 3, 5, 6]\n\n\nAfter operation 4\n[4, 4, 6, 5, 6]\n\n\nAfter operation 5\n[8, 4, 6, 5, 6]\n\n\n\n\nExample 2:\n\nInput: nums = [1,2], k = 3, multiplier = 4\nOutput: [16,8]\nExplanation:\n\n\n\nOperation\nResult\n\n\nAfter operation 1\n[4, 2]\n\n\nAfter operation 2\n[4, 8]\n\n\nAfter operation 3\n[16, 8]\n\n\n\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\n1 <= k <= 10\n1 <= multiplier <= 5", "input": "You are given an integer array nums, an integer k, and an integer multiplier.\nYou need to perform k operations on nums. In each operation:\n\nFind the minimum value x in nums. If there are multiple occurrences of the minimum value, select the one that appears first.\nReplace the selected minimum value x with x * multiplier.\n\nReturn an integer array denoting the final state of nums after performing all k operations.\n \nExample 1:\n\nInput: nums = [2,1,3,5,6], k = 5, multiplier = 2\nOutput: [8,4,6,5,6]\nExplanation:\n\n\n\nOperation\nResult\n\n\nAfter operation 1\n[2, 2, 3, 5, 6]\n\n\nAfter operation 2\n[4, 2, 3, 5, 6]\n\n\nAfter operation 3\n[4, 4, 3, 5, 6]\n\n\nAfter operation 4\n[4, 4, 6, 5, 6]\n\n\nAfter operation 5\n[8, 4, 6, 5, 6]\n\n\n\n\nExample 2:\n\nInput: nums = [1,2], k = 3, multiplier = 4\nOutput: [16,8]\nExplanation:\n\n\n\nOperation\nResult\n\n\nAfter operation 1\n[4, 2]\n\n\nAfter operation 2\n[4, 8]\n\n\nAfter operation 3\n[16, 8]\n\n\n\n\n \nConstraints:\n\n1 <= nums.length <= 100\n1 <= nums[i] <= 100\n1 <= k <= 10\n1 <= multiplier <= 5", "test_cases": [{"input": "[2, 1, 3, 5, 6]\n5\n2", "output": "[8, 4, 6, 5, 6]", "testtype": "functional"}, {"input": "[1, 2]\n3\n4", "output": "[16, 8]", "testtype": "functional"}], "priv_test": "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", "solutions": "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        for _ in range(k):\n            min_val = min(nums)\n            min_idx = nums.index(min_val)\n            nums[min_idx] = min_val * multiplier\n        return nums", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def getFinalState(self, nums: List[int], k: int, multiplier: int) -> List[int]:\n        "}