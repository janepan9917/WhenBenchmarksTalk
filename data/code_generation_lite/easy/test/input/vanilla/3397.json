{"qid": "3397", "orig_input": "You are given two arrays of equal length, nums1 and nums2.\nEach element in nums1 has been increased (or decreased in the case of negative) by an integer, represented by the variable x.\nAs a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies.\nReturn the integer x.\n \nExample 1:\n\nInput: nums1 = [2,6,4], nums2 = [9,7,5]\nOutput: 3\nExplanation:\nThe integer added to each element of nums1 is 3.\n\nExample 2:\n\nInput: nums1 = [10], nums2 = [5]\nOutput: -5\nExplanation:\nThe integer added to each element of nums1 is -5.\n\nExample 3:\n\nInput: nums1 = [1,1,1,1], nums2 = [1,1,1,1]\nOutput: 0\nExplanation:\nThe integer added to each element of nums1 is 0.\n\n \nConstraints:\n\n1 <= nums1.length == nums2.length <= 100\n0 <= nums1[i], nums2[i] <= 1000\nThe test cases are generated in a way that there is an integer x such that nums1 can become equal to nums2 by adding x to each element of nums1.", "input": "You are given two arrays of equal length, nums1 and nums2.\nEach element in nums1 has been increased (or decreased in the case of negative) by an integer, represented by the variable x.\nAs a result, nums1 becomes equal to nums2. Two arrays are considered equal when they contain the same integers with the same frequencies.\nReturn the integer x.\n \nExample 1:\n\nInput: nums1 = [2,6,4], nums2 = [9,7,5]\nOutput: 3\nExplanation:\nThe integer added to each element of nums1 is 3.\n\nExample 2:\n\nInput: nums1 = [10], nums2 = [5]\nOutput: -5\nExplanation:\nThe integer added to each element of nums1 is -5.\n\nExample 3:\n\nInput: nums1 = [1,1,1,1], nums2 = [1,1,1,1]\nOutput: 0\nExplanation:\nThe integer added to each element of nums1 is 0.\n\n \nConstraints:\n\n1 <= nums1.length == nums2.length <= 100\n0 <= nums1[i], nums2[i] <= 1000\nThe test cases are generated in a way that there is an integer x such that nums1 can become equal to nums2 by adding x to each element of nums1.", "test_cases": [{"input": "[2, 6, 4]\n[9, 7, 5]", "output": "3", "testtype": "functional"}, {"input": "[10]\n[5]", "output": "-5", "testtype": "functional"}, {"input": "[1, 1, 1, 1]\n[1, 1, 1, 1]", "output": "0", "testtype": "functional"}], "priv_test": "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", "solutions": "class Solution:\n    def addedInteger(self, nums1: List[int], nums2: List[int]) -> int:\n        # Sort the lists to handle duplicate elements\n        nums1.sort()\n        nums2.sort()\n        \n        # Iterate through the lists simultaneously\n        for i in range(len(nums1)):\n            # Calculate the difference between corresponding elements\n            diff = nums2[i] - nums1[i]\n            \n            # If any difference is not equal to the previous ones, return -1\n            if i > 0 and diff != nums2[0] - nums1[0]:\n                return -1\n        \n        # If all differences are equal, return the difference\n        return nums2[0] - nums1[0]", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def addedInteger(self, nums1: List[int], nums2: List[int]) -> int:\n        "}