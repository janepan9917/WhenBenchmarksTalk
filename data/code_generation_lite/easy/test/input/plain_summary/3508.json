{"qid": "3508", "orig_input": "You are given two positive integers n and k.\nYou can choose any bit in the binary representation of n that is equal to 1 and change it to 0.\nReturn the number of changes needed to make n equal to k. If it is impossible, return -1.\n \nExample 1:\n\nInput: n = 13, k = 4\nOutput: 2\nExplanation:\nInitially, the binary representations of n and k are n = (1101)_2 and k = (0100)_2.\nWe can change the first and fourth bits of n. The resulting integer is n = (0100)_2 = k.\n\nExample 2:\n\nInput: n = 21, k = 21\nOutput: 0\nExplanation:\nn and k are already equal, so no changes are needed.\n\nExample 3:\n\nInput: n = 14, k = 13\nOutput: -1\nExplanation:\nIt is not possible to make n equal to k.\n\n \nConstraints:\n\n1 <= n, k <= 10^6", "input": "SUMMARY\nCalculate the minimum number of bit changes required to transform one integer into another by only changing 1s to 0s, or return -1 if impossible.", "test_cases": [{"input": "13\n4", "output": "2", "testtype": "functional"}, {"input": "21\n21", "output": "0", "testtype": "functional"}, {"input": "14\n13", "output": "-1", "testtype": "functional"}], "priv_test": "eJyllU1qG0EQhb3IxrcQs41tuv6rfBKDlUUIDhjCyODRwhiDD+HcN9VRFtFo0y5p0xqJ/qh6r+rN+5ffeHnx93P3Nb/cv06P89N+mW43E5OHwXY+nNPVZtrtl3//tf64PDwvy8vTQ//h537+sTzu5u+/prerzX8UcjOR7YxGDe2YIsMUASHIWiiESY4pNkzBJKwaweHLiuEQ2Yg4wqqRaxjHUBNLPcKzIyljrAV6dgOMTmVKmsPKKatB83aMGacEiURKa0ZhXC4GIJR7MQ4odUyYOLTtLBhUVwaMcTsrQt0hVTooW0bkvCmky/3EOkZS1JWeNH45TnaGxy9T96E6V5IOwBnz5AxiaSKLxRnz5Jjpk9MNrXEcY3SYwklgrirR1wLrY5TBK4eNUFuNkY8HV244at2N1roV1fR1dU0AZArXs7fbuB6oT9yOExPG66cGDbS/PcK03gH2DrRaBEQA9SKo0TlB7U3c+jybRv0VxnSi53gsAYs26nbmec5yu/aEC1TFT2G+fdz8AUmWvDk=", "solutions": "class Solution:\n    def minChanges(self, n: int, k: int) -> int:\n        # Convert n and k to binary strings\n        n_bin = bin(n)[2:]\n        k_bin = bin(k)[2:]\n        \n        # Pad the shorter string with leading zeros\n        max_len = max(len(n_bin), len(k_bin))\n        n_bin = n_bin.zfill(max_len)\n        k_bin = k_bin.zfill(max_len)\n        \n        # Count the number of differences\n        diff_count = 0\n        for i in range(max_len):\n            if n_bin[i] != k_bin[i]:\n                if n_bin[i] == '1':\n                    diff_count += 1\n                else:\n                    # If n has a 0 where k has a 1, it's impossible\n                    return -1\n        \n        return diff_count", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "plain_summary", "starter": "class Solution:\n    def minChanges(self, n: int, k: int) -> int:\n        "}