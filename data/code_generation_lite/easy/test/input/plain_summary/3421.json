{"qid": "3421", "orig_input": "Given an integer array hours representing times in hours, return an integer denoting the number of pairs i, j where i < j and hours[i] + hours[j] forms a complete day.\nA complete day is defined as a time duration that is an exact multiple of 24 hours.\nFor example, 1 day is 24 hours, 2 days is 48 hours, 3 days is 72 hours, and so on.\n \nExample 1:\n\nInput: hours = [12,12,30,24,24]\nOutput: 2\nExplanation:\nThe pairs of indices that form a complete day are (0, 1) and (3, 4).\n\nExample 2:\n\nInput: hours = [72,48,24,3]\nOutput: 3\nExplanation:\nThe pairs of indices that form a complete day are (0, 1), (0, 2), and (1, 2).\n\n \nConstraints:\n\n1 <= hours.length <= 100\n1 <= hours[i] <= 10^9", "input": "SUMMARY\nCount pairs of numbers in the input array that sum to a multiple of 24 hours, considering only pairs where the first index is less than the second.", "test_cases": [{"input": "[12, 12, 30, 24, 24]", "output": "2", "testtype": "functional"}, {"input": "[72, 48, 24, 3]", "output": "3", "testtype": "functional"}], "priv_test": "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", "solutions": "class Solution:\n    def countCompleteDayPairs(self, hours: List[int]) -> int:\n        count = 0\n        n = len(hours)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (hours[i] + hours[j]) % 24 == 0:\n                    count += 1\n        return count", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "plain_summary", "starter": "class Solution:\n    def countCompleteDayPairs(self, hours: List[int]) -> int:\n        "}