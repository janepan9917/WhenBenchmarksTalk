{"qid": "3568", "orig_input": "You are given three positive integers num1, num2, and num3.\nThe key of num1, num2, and num3 is defined as a four-digit number such that:\n\nInitially, if any number has less than four digits, it is padded with leading zeros.\nThe i^th digit (1 <= i <= 4) of the key is generated by taking the smallest digit among the i^th digits of num1, num2, and num3.\n\nReturn the key of the three numbers without leading zeros (if any).\n \nExample 1:\n\nInput: num1 = 1, num2 = 10, num3 = 1000\nOutput: 0\nExplanation:\nOn padding, num1 becomes \"0001\", num2 becomes \"0010\", and num3 remains \"1000\".\n\nThe 1^st digit of the key is min(0, 0, 1).\nThe 2^nd digit of the key is min(0, 0, 0).\nThe 3^rd digit of the key is min(0, 1, 0).\nThe 4^th digit of the key is min(1, 0, 0).\n\nHence, the key is \"0000\", i.e. 0.\n\nExample 2:\n\nInput: num1 = 987, num2 = 879, num3 = 798\nOutput: 777\n\nExample 3:\n\nInput: num1 = 1, num2 = 2, num3 = 3\nOutput: 1\n\n \nConstraints:\n\n1 <= num1, num2, num3 <= 9999", "input": "SUMMARY\nGenerate a four-digit key by selecting the smallest digit from the corresponding positions of three input numbers, then remove leading zeros.", "test_cases": [{"input": "1\n10\n1000", "output": "0", "testtype": "functional"}, {"input": "987\n879\n798", "output": "777", "testtype": "functional"}, {"input": "1\n2\n3", "output": "1", "testtype": "functional"}], "priv_test": "eJylVk2LFEEM9eDNPzH0eZHKd5W/RLA9iKywIL0L9hxEBO/eRP+vSffMrpMRqcI+hCEFb5KXVy/17fmvHy+ebd/r7/7jzZfpbnk4rtOrwyTSbF4YrXlUkOnmMN0f19Mp455Zbz+t6+eH28h9OC7v17v75d3H6evN4Q+oRgXmBWvzSLXZJRT6aT+Uf/PyFC+hzpkuKAAo8wIFvCr/CZdQUErphuJmdV6UlbwqKYkq6QeqRFGMBl2EnErCfp5AgyG0UgMJKCFRof6a/JuXp3gJdc50QamAOk/KHNOrSQh+yv1CcDYCqjphUjAJwTP9XElIXBp7fz7IRJVwP1Nsjc/iFEfNOrD+9qoROt0qoSijJM6q1N8eFtzpdiWAYLp82I1jKhwij8KacSrJ8wPqLCHzU8j3rp9vU3OLqgYerYJeIpnumU6L2kh6jMlXTpk+vv1zqh9jJnyAchQfGnAUhY2ybw7UtLvlXy2zvxjb/Nu8LZJEEMnA8A3Dmopu7ltKnv+A7yqEn3hP4pEhFeWn/QzF/+71/HdVyCqxM7epZZPz9ICSJJSNG19V65WSrL+9JhLlSCy7Uq8u3cD8WsOddIcSzNtOEPuZahwXWBnDxEmziRP2e4Hvg9h3u8tdL/MBeTZ2prRsPWqWVBlQFJsDGezmm5fBgDSV2/ZEIZemQG4NRoQZSoINzh9ddkXSAEtcnSDXp7dInJoj7n8bMsceJw0grYluHtjiKBIVxcup1LQKRmB4ezLVamEpuZ6B8SttEI02IeUbp0T/1Pbbny9/A+mPaH8=", "solutions": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        num1 = str(num1).zfill(4)\n        num2 = str(num2).zfill(4)\n        num3 = str(num3).zfill(4)\n        \n        key = \"\"\n        for i in range(4):\n            min_digit = min(int(num1[i]), int(num2[i]), int(num3[i]))\n            key += str(min_digit)\n        \n        return int(key)", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "plain_summary", "starter": "class Solution:\n    def generateKey(self, num1: int, num2: int, num3: int) -> int:\n        "}