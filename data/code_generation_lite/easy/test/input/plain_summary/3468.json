{"qid": "3468", "orig_input": "You are given a string s and an integer k. Encrypt the string using the following algorithm:\n\nFor each character c in s, replace c with the k^th character after c in the string (in a cyclic manner).\n\nReturn the encrypted string.\n \nExample 1:\n\nInput: s = \"dart\", k = 3\nOutput: \"tdar\"\nExplanation:\n\nFor i = 0, the 3^rd character after 'd' is 't'.\nFor i = 1, the 3^rd character after 'a' is 'd'.\nFor i = 2, the 3^rd character after 'r' is 'a'.\nFor i = 3, the 3^rd character after 't' is 'r'.\n\n\nExample 2:\n\nInput: s = \"aaa\", k = 1\nOutput: \"aaa\"\nExplanation:\nAs all the characters are the same, the encrypted string will also be the same.\n\n \nConstraints:\n\n1 <= s.length <= 100\n1 <= k <= 10^4\ns consists only of lowercase English letters.", "input": "FORMAL QUESTION\n\nEncrypt a string by replacing each character with the k-th character after it, wrapping around if necessary.\n\nSUMMARY\n\nCyclically shift each character in a string by k positions to create an encrypted version.", "test_cases": [{"input": "\"dart\"\n3", "output": "\"tdar\"", "testtype": "functional"}, {"input": "\"aaa\"\n1", "output": "\"aaa\"", "testtype": "functional"}], "priv_test": "eJy9V8tuJDUUZcGeX4h6PULJJJmE+ZKRCAuXXX67/H4iJD6AHfC/uKrzmq4mGguRWrV0rs89vi/f/v37v//84bvt+/JH//Hzrwe2mBgOny8ODwcYY2kVOZ6Wh8PDcvXx8OHioGN4NnjB4cNhBcPsQ6hmXmEcFxiYXoA8/Pbh4itiDoh1HlQdMEONLoVQJXBJ3mHiHHSdUrOy+bzcOX1t8u9EQ3oqkljOk/WUC45jZo1iaCGLyi3M2SLZquX65lTKt5wbkOF0wquju9vdnTs0RCUnxwRHYVr57k/ppid4iBMBubLd3p3SbcAAkYcOWz2xWmRbGX+6vt1JlO3Faoh8Mia4LYyfdtd+hAbYWEM+Fylg6NXl6hbOq10ATozGsg6OdX55SgrGWGwNvqJKOEaKRZtghdU2wGTvUaTKEiZl0FSYFJJhXnkzflI1YL0wwJQEKFlbmuzm1eawarq5/7RLy9unhkWMXTEKmHkqwuitbK53Cf7aYoC6696ysGvwYMeKjyaPj/ncFd8RGiAzW7td7zrDjHXtSrJTg8YaFhjhjK/bzXaCOrAZjM06gBjL1apZ+BkzC4WTRbeWQUZ+AQrAWrPxKDmx1eLuGRDfzjAkjBgsa07W5W00nbrNz/hY7b7D9zhHzkySd3E+EA0oxBRxUdhWXhTKhYdkglqQMLhZzXDsD6p1ZQoiL6ny1ERuTbCssjGTVA43FzNkxFKGhIVzyzLG2GwSUdGE0Vb0dze3+43lf/W63mts8ZgQdlt9nwp1KzTENQPNVarCnH3yzRM8xJm0dY47FMLZZgjP+Ni0dYvGEfD+bATFgm0Ceam3lF3d7cbLWeOxsUzPrgN0LBQJkCX25S6czdcRWo3GOsE1niI14vyj8YSOrdcqeVtsCsu2rtzsIvoIdrOxKDKdCJcAMkNJLiBTiZCkzMjJe+K0I1KQKYuJdItQfJUhEu64BQHowIRMTHpCeU5eLL1hSEy97zoP6yMcJRjnOW0L5n6CvY/rkbc5Zwdb2F7E3TpYH9EhxlZ9JEYHJKDvZK2hVsz5qnhl8HJqyJlI/fYKnZ0UR2iMb/GWJ2l5lv2vhZwzZQU2C4lQctIwL6WJIiWGwFFaOAR9CYxNUj/DoGkwpcUcKZstsYVUjovNqQ+rRFaBHy/vd9321pn/omWszXLxsQTY94HoFDBz99HOZ+yVwcupt5398teP/wA3fX1i", "solutions": "class Solution:\n    def getEncryptedString(self, s: str, k: int) -> str:\n        n = len(s)\n        encrypted = []\n        for i in range(n):\n            char = s[i]\n            shifted_idx = (i + k) % n\n            encrypted.append(s[shifted_idx])\n        return \"\".join(encrypted)", "task": "livecodebench", "difficulty": "easy", "split": "test", "transformation_type": "plain_summary", "starter": "class Solution:\n    def getEncryptedString(self, s: str, k: int) -> str:\n        "}