{"qid": "3422", "orig_input": "You are given two integers n and k.\nInitially, you start with an array a of n integers where a[i] = 1 for all 0 <= i <= n - 1. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, a[0] remains the same, a[1] becomes a[0] + a[1], a[2] becomes a[0] + a[1] + a[2], and so on.\nReturn the value of a[n - 1] after k seconds.\nSince the answer may be very large, return it modulo 10^9 + 7.\n \nExample 1:\n\nInput: n = 4, k = 5\nOutput: 56\nExplanation:\n\n\n\nSecond\nState After\n\n\n0\n[1,1,1,1]\n\n\n1\n[1,2,3,4]\n\n\n2\n[1,3,6,10]\n\n\n3\n[1,4,10,20]\n\n\n4\n[1,5,15,35]\n\n\n5\n[1,6,21,56]\n\n\n\n\nExample 2:\n\nInput: n = 5, k = 3\nOutput: 35\nExplanation:\n\n\n\nSecond\nState After\n\n\n0\n[1,1,1,1,1]\n\n\n1\n[1,2,3,4,5]\n\n\n2\n[1,3,6,10,15]\n\n\n3\n[1,4,10,20,35]\n\n\n\n\n \nConstraints:\n\n1 <= n, k <= 1000", "input": "You are given two integers n and k.\nInitially, you start with an array a of n integers where a[i] = 1 for all 0 <= i <= n - 1. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, a[0] remains the same, a[1] becomes a[0] + a[1], a[2] becomes a[0] + a[1] + a[2], and so on.\nReturn the value of a[n - 1] after k seconds.\nSince the answer may be very large, return it modulo 10^9 + 7.\n \nExample 1:\n\nInput: n = 4, k = 5\nOutput: 56\nExplanation:\n\n\n\nSecond\nState After\n\n\n0\n[1,1,1,1]\n\n\n1\n[1,2,3,4]\n\n\n2\n[1,3,6,10]\n\n\n3\n[1,4,10,20]\n\n\n4\n[1,5,15,35]\n\n\n5\n[1,6,21,56]\n\n\n\n\nExample 2:\n\nInput: n = 5, k = 3\nOutput: 35\nExplanation:\n\n\n\nSecond\nState After\n\n\n0\n[1,1,1,1,1]\n\n\n1\n[1,2,3,4,5]\n\n\n2\n[1,3,6,10,15]\n\n\n3\n[1,4,10,20,35]\n\n\n\n\n \nConstraints:\n\n1 <= n, k <= 1000", "test_cases": [{"input": "4\n5", "output": "56", "testtype": "functional"}, {"input": "5\n3", "output": "35", "testtype": "functional"}], "priv_test": "eJydVs1qFEEQ9uDFt1jmHKTrv8onCbgeRCMEZRJw9iAS8CH0fa1O9pCtiHTPHpbdgSqqvr+aX6//fH3z6vFz/Tl/vP+53K73p215d1jwuOJydVjuTtv5CfW/2833bftxf9MffDmtn7bbu/Xjt+Xh6vCsFo6rXdbCcK1aHFdCuKw3x/BoTYb7RGQfaK2VRk1JgXhmF967S9bCbhxaVudXqWdCdFOcmSH2zhAhx1WKCsJI2XW4iYd1IuiyjRAYEIzziUKpKi66YgflpNrH+6S6So/hWuM0RXGFYAJCxuOAiLdEFQuuHMyabcbZYc1xhLTOo8IMNmeUM4LPfGLhKTQfF5qEplVaMYsGiYzvRJb8KJZhQoLDm04vVbBBZ3EyH2dcugulutDQhRh1vE+CmSYoa5GzAYDGVKC8iLS5PNpdzOm/EKvMgDqqTzAsnWEuUKBpI5On6QbvRHdyVQr3eCcaN6OZdE8XM0oTz8CxcWbOgitRy+mh1tymKPLdDHkXK5QZkBkNdcI8mcw5BdazkaczSH08ak1apwhfUNRcBSdOoaf0CGr0NxF0sPHXknR+D5cyjwNZI8KJ15u04D/IDpW818b/jcwPv9/+Ba0wyX4=", "solutions": "class Solution:\n    def valueAfterKSeconds(self, n: int, k: int) -> int:\n        MOD = 10**9 + 7\n        prev = [1] * n\n        for _ in range(k):\n            curr = [0] * n\n            curr[0] = 1\n            for i in range(1, n):\n                curr[i] = (curr[i-1] + prev[i]) % MOD\n            prev = curr\n        return prev[-1]", "task": "livecodebench", "difficulty": "medium", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def valueAfterKSeconds(self, n: int, k: int) -> int:\n        "}