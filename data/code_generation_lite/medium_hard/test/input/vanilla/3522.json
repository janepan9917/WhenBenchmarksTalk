{"qid": "3522", "orig_input": "You are given an array of integers nums of length n and a positive integer k.\nThe power of an array is defined as:\n\nIts maximum element if all of its elements are consecutive and sorted in ascending order.\n-1 otherwise.\n\nYou need to find the power of all subarrays of nums of size k.\nReturn an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].\n \nExample 1:\n\nInput: nums = [1,2,3,4,3,2,5], k = 3\nOutput: [3,4,-1,-1,-1]\nExplanation:\nThere are 5 subarrays of nums of size 3:\n\n[1, 2, 3] with the maximum element 3.\n[2, 3, 4] with the maximum element 4.\n[3, 4, 3] whose elements are not consecutive.\n[4, 3, 2] whose elements are not sorted.\n[3, 2, 5] whose elements are not consecutive.\n\n\nExample 2:\n\nInput: nums = [2,2,2,2,2], k = 4\nOutput: [-1,-1]\n\nExample 3:\n\nInput: nums = [3,2,3,2,3,2], k = 2\nOutput: [-1,3,-1,3,-1]\n\n \nConstraints:\n\n1 <= n == nums.length <= 500\n1 <= nums[i] <= 10^5\n1 <= k <= n", "input": "You are given an array of integers nums of length n and a positive integer k.\nThe power of an array is defined as:\n\nIts maximum element if all of its elements are consecutive and sorted in ascending order.\n-1 otherwise.\n\nYou need to find the power of all subarrays of nums of size k.\nReturn an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].\n \nExample 1:\n\nInput: nums = [1,2,3,4,3,2,5], k = 3\nOutput: [3,4,-1,-1,-1]\nExplanation:\nThere are 5 subarrays of nums of size 3:\n\n[1, 2, 3] with the maximum element 3.\n[2, 3, 4] with the maximum element 4.\n[3, 4, 3] whose elements are not consecutive.\n[4, 3, 2] whose elements are not sorted.\n[3, 2, 5] whose elements are not consecutive.\n\n\nExample 2:\n\nInput: nums = [2,2,2,2,2], k = 4\nOutput: [-1,-1]\n\nExample 3:\n\nInput: nums = [3,2,3,2,3,2], k = 2\nOutput: [-1,3,-1,3,-1]\n\n \nConstraints:\n\n1 <= n == nums.length <= 500\n1 <= nums[i] <= 10^5\n1 <= k <= n", "test_cases": [{"input": "[1, 2, 3, 4, 3, 2, 5]\n3", "output": "[3, 4, -1, -1, -1]", "testtype": "functional"}, {"input": "[2, 2, 2, 2, 2]\n4", "output": "[-1, -1]", "testtype": "functional"}, {"input": "[3, 2, 3, 2, 3, 2]\n2", "output": "[-1, 3, -1, 3, -1]", "testtype": "functional"}], "priv_test": "", "solutions": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        n = len(nums)\n        results = []\n\n        for i in range(n - k + 1):\n            subarray = nums[i:i+k]\n            is_consecutive = all(subarray[j] == subarray[0] + j for j in range(k))\n            is_sorted = subarray == sorted(subarray)\n\n            if is_consecutive and is_sorted:\n                results.append(subarray[-1])\n            else:\n                results.append(-1)\n\n        return results", "task": "livecodebench", "difficulty": "medium", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def resultsArray(self, nums: List[int], k: int) -> List[int]:\n        "}