{"qid": "3517", "orig_input": "You are given an integer n and a 2D integer array queries.\nThere are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1.\nqueries[i] = [u_i, v_i] represents the addition of a new unidirectional road from city u_i to city v_i. After each query, you need to find the length of the shortest path from city 0 to city n - 1.\nReturn an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.\n \nExample 1:\n\nInput: n = 5, queries = [[2,4],[0,2],[0,4]]\nOutput: [3,2,1]\nExplanation: \n\nAfter the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.\n\nAfter the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.\n\nAfter the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.\n\nExample 2:\n\nInput: n = 4, queries = [[0,3],[0,2]]\nOutput: [1,1]\nExplanation:\n\nAfter the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.\n\nAfter the addition of the road from 0 to 2, the length of the shortest path remains 1.\n\n \nConstraints:\n\n3 <= n <= 500\n1 <= queries.length <= 500\nqueries[i].length == 2\n0 <= queries[i][0] < queries[i][1] < n\n1 < queries[i][1] - queries[i][0]\nThere are no repeated roads among the queries.", "input": "You are given an integer n and a 2D integer array queries.\nThere are n cities numbered from 0 to n - 1. Initially, there is a unidirectional road from city i to city i + 1 for all 0 <= i < n - 1.\nqueries[i] = [u_i, v_i] represents the addition of a new unidirectional road from city u_i to city v_i. After each query, you need to find the length of the shortest path from city 0 to city n - 1.\nReturn an array answer where for each i in the range [0, queries.length - 1], answer[i] is the length of the shortest path from city 0 to city n - 1 after processing the first i + 1 queries.\n \nExample 1:\n\nInput: n = 5, queries = [[2,4],[0,2],[0,4]]\nOutput: [3,2,1]\nExplanation: \n\nAfter the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.\n\nAfter the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.\n\nAfter the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.\n\nExample 2:\n\nInput: n = 4, queries = [[0,3],[0,2]]\nOutput: [1,1]\nExplanation:\n\nAfter the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.\n\nAfter the addition of the road from 0 to 2, the length of the shortest path remains 1.\n\n \nConstraints:\n\n3 <= n <= 500\n1 <= queries.length <= 500\nqueries[i].length == 2\n0 <= queries[i][0] < queries[i][1] < n\n1 < queries[i][1] - queries[i][0]\nThere are no repeated roads among the queries.", "test_cases": [{"input": "5\n[[2, 4], [0, 2], [0, 4]]", "output": "[3, 2, 1]", "testtype": "functional"}, {"input": "4\n[[0, 3], [0, 2]]", "output": "[1, 1]", "testtype": "functional"}], "priv_test": "", "solutions": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the graph with the initial roads\n        graph = {i: [i + 1] for i in range(n - 1)}\n        \n        # Initialize the distance dictionary\n        distances = {i: float('inf') for i in range(n)}\n        distances[0] = 0\n        \n        # Function to find the shortest distance using BFS\n        def bfs(start, end):\n            queue = deque([(start, 0)])\n            visited = set()\n            \n            while queue:\n                node, dist = queue.popleft()\n                \n                if node == end:\n                    return dist\n                \n                if node in visited:\n                    continue\n                \n                visited.add(node)\n                \n                for neighbor in graph.get(node, []):\n                    queue.append((neighbor, dist + 1))\n            \n            return float('inf')\n        \n        answer = []\n        \n        # Process each query\n        for u, v in queries:\n            # Add the new road\n            if u in graph:\n                graph[u].append(v)\n            else:\n                graph[u] = [v]\n            \n            # Update the distance from 0 to n - 1\n            distances[n - 1] = bfs(0, n - 1)\n            \n            answer.append(distances[n - 1])\n        \n        return answer", "task": "livecodebench", "difficulty": "medium", "split": "test", "transformation_type": "vanilla", "starter": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        "}