{"qid": "3570", "orig_input": "You are given a string word and a non-negative integer k.\nReturn the total number of substrings of word that contain every vowel ('a', 'e', 'i', 'o', and 'u') at least once and exactly k consonants.\n \nExample 1:\n\nInput: word = \"aeioqq\", k = 1\nOutput: 0\nExplanation:\nThere is no substring with every vowel.\n\nExample 2:\n\nInput: word = \"aeiou\", k = 0\nOutput: 1\nExplanation:\nThe only substring with every vowel and zero consonants is word[0..4], which is \"aeiou\".\n\nExample 3:\n\nInput: word = \"ieaouqqieaouqq\", k = 1\nOutput: 3\nExplanation:\nThe substrings with every vowel and one consonant are:\n\nword[0..5], which is \"ieaouq\".\nword[6..11], which is \"qieaou\".\nword[7..12], which is \"ieaouq\".\n\n\n \nConstraints:\n\n5 <= word.length <= 250\nword consists only of lowercase English letters.\n0 <= k <= word.length - 5", "input": "SUMMARY:\nCount substrings containing all vowels and exactly k consonants in a given word.", "test_cases": [{"input": "\"aeioqq\"\n1", "output": "0", "testtype": "functional"}, {"input": "\"aeiou\"\n0", "output": "1", "testtype": "functional"}, {"input": "\"ieaouqqieaouqq\"\n1", "output": "3", "testtype": "functional"}], "priv_test": "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", "solutions": "class Solution:\n    def countOfSubstrings(self, word: str, k: int) -> int:\n        def has_all_vowels(substring):\n            vowels = set('aeiou')\n            return all(v in set(substring) for v in vowels)\n\n        def count_consonants(substring):\n            return sum(1 for c in substring if c not in set('aeiou'))\n\n        result = 0\n        n = len(word)\n        for start in range(n):\n            for end in range(start + 5, n + 1):\n                substring = word[start:end]\n                if has_all_vowels(substring) and count_consonants(substring) == k:\n                    result += 1\n\n        return result", "task": "livecodebench", "difficulty": "medium", "split": "test", "transformation_type": "plain_summary", "starter": "class Solution:\n    def countOfSubstrings(self, word: str, k: int) -> int:\n        "}