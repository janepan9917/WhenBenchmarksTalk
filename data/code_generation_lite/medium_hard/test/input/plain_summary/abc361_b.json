{"qid": "abc361_b", "orig_input": "You are trying to implement collision detection in a 3D game.\n\nIn a 3-dimensional space, let C(a,b,c,d,e,f) denote the cuboid with a diagonal connecting (a,b,c) and (d,e,f), and with all faces parallel to the xy-plane, yz-plane, or zx-plane.\r\n(This definition uniquely determines C(a,b,c,d,e,f).)\nGiven two cuboids C(a,b,c,d,e,f) and C(g,h,i,j,k,l), determine whether their intersection has a positive volume.\n\nInput\n\nThe input is given from Standard Input in the following format:\na b c d e f\r\ng h i j k l\n\nOutput\n\nPrint Yes if the intersection of the two cuboids has a positive volume, and No otherwise.\n\nConstraints\n\n\n- 0 \\leq a < d \\leq 1000\n- 0 \\leq b < e \\leq 1000\n- 0 \\leq c < f \\leq 1000\n- 0 \\leq g < j \\leq 1000\n- 0 \\leq h < k \\leq 1000\n- 0 \\leq i < l \\leq 1000\n- All input values are integers.\n\nSample Input 1\n\n0 0 0 4 5 6\r\n2 3 4 5 6 7\n\nSample Output 1\n\nYes\r\n\nThe positional relationship of the two cuboids is shown in the figure below, and their intersection has a volume of 8.\n\nSample Input 2\n\n0 0 0 2 2 2\r\n0 0 2 2 2 4\n\nSample Output 2\n\nNo\r\n\nThe two cuboids touch at a face, where the volume of the intersection is 0.\n\nSample Input 3\n\n0 0 0 1000 1000 1000\r\n10 10 10 100 100 100\n\nSample Output 3\n\nYes", "input": "SUMMARY\nDetermine if two 3D cuboids intersect with positive volume, given their corner coordinates.", "test_cases": [{"input": "0 0 0 4 5 6\n2 3 4 5 6 7\n", "output": "Yes\n", "testtype": "stdin"}, {"input": "0 0 0 2 2 2\n0 0 2 2 2 4\n", "output": "No\n", "testtype": "stdin"}, {"input": "0 0 0 1000 1000 1000\n10 10 10 100 100 100\n", "output": "Yes\n", "testtype": "stdin"}], "priv_test": "eJyllTtuFEEQhgmQuEZpYwt1Pbq6m0MQg1gyHDgZW/ISIITEISAg46h8tUbIwslqvKPe2ZnRdtX/qH++v/z5+9WL8+fdL358+Hq42e4+nw5v5ODWRHtKtCbZQmYf0nseN4sQjS4xpnTW9CWr2XE7XMnh9vPp7//fX98/3Dpd359OX+6u6+b96dPNdvh2JY8KRVfpTSzr5OJu0m0et0cXsobJspS19P86b28vKzM8xTVksIs5HYes2Y4baIJH6hOoIX2BLn1vlTMY76IrJZfJCBpv47i5hThsDZ6vKUknNsZu0qy7qIJopsxQGag0DTh1YTpFW5eV4BxLwnIvHkV12Ap1SVcWkDrilAHQDCTeKBgAesLZxWBGDgiT6NUuxkL4Feu45dl+DlHlgLJgyrAnpF2KpYxE2xoDE6j46tIVyozy3hfuZk2HT7icTwx9aRlHAXZRp+FEoW4yB5QFRGmhycbcdLFGO+sZFjCTskECYzGCJUIyHp15rL3VEOUBava9YJrUoXUct1Vl/i5tOO7f126uoAJ+AqPqgnlt9EuzypjY4oIpCWiarFy7h3JIBrvPSgDUqEAJFEmYYvLxwQykZ2r86UhenC+4xh1l82yg0eBJgyKTzMFg1h+GFAfO3G2uQb4oGJSYWrBnVa5bqa7nC6sBJQ84Z+7WxRAkEMSbnc2VjMYsyiblizUmcZKYlTSjx+50IQUT6oMtiRW2ZfLLwwpps6xFIHs7y+N9NxoAxKq32dm5aZUklWFMqJPPlTuBN+oNkc/I5EheJVqR1eHeUZ2CHTcToMy88zqYE/VHewB5eZmPP17/AVxK+7I=", "solutions": "# YOUR CODE HERE\n\ndef read_cuboid():\n    a, b, c, d, e, f = map(int, input().split())\n    return a, b, c, d, e, f\n\ndef intersection_volume(c1, c2):\n    a1, b1, c1, d1, e1, f1 = c1\n    a2, b2, c2, d2, e2, f2 = c2\n    \n    # Calculate the intersection points\n    x1 = max(a1, a2)\n    y1 = max(b1, b2)\n    z1 = max(c1, c2)\n    x2 = min(d1, d2)\n    y2 = min(e1, e2)\n    z2 = min(f1, f2)\n    \n    # If the intersection is empty, return 0\n    if x1 >= x2 or y1 >= y2 or z1 >= z2:\n        return 0\n    \n    # Calculate the volume of the intersection\n    volume = (x2 - x1) * (y2 - y1) * (z2 - z1)\n    return volume\n\n# Read input\nc1 = read_cuboid()\nc2 = read_cuboid()\n\n# Compute intersection volume\nvolume = intersection_volume(c1, c2)\n\n# Print output\nif volume > 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")", "task": "livecodebench", "difficulty": "medium", "split": "test", "transformation_type": "plain_summary", "starter": ""}