{"qid": "3411", "split": "test", "solutions": "class Solution:\n    def findProductsOfElements(self, queries: List[List[int]]) -> List[int]:\n        def powerful_array(x):\n            res = []\n            i = 0\n            while x:\n                if x & 1:\n                    res.append(2 ** i)\n                i += 1\n                x >>= 1\n            return sorted(res)\n\n        big_nums = []\n        for i in range(1, 10 ** 6):\n            big_nums.extend(powerful_array(i))\n\n        ans = []\n        for from_i, to_i, mod_i in queries:\n            prod = 1\n            for j in range(from_i, to_i + 1):\n                prod = (prod * big_nums[j]) % mod_i\n            ans.append(prod)\n\n        return ans", "starter": "class Solution:\n    def findProductsOfElements(self, queries: List[List[int]]) -> List[int]:\n        "}